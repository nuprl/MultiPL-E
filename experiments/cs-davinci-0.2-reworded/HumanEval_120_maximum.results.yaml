language: cs
name: HumanEval_120_maximum
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Write your code here.\n      \
    \  return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <454d72c6dfb143a2bd6e1c24e2cc4e0e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <454d72c6dfb143a2bd6e1c24e2cc4e0e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code here\n        return\
    \ arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70208e8cdaad498bab039f9bb8ed1711>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70208e8cdaad498bab039f9bb8ed1711>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        var res = new List<long>();\n   \
    \     var pq = new PriorityQueue<long>();\n        foreach (var x in arr) {\n\
    \            pq.Add(x);\n            if (pq.Count > k) {\n                pq.Remove();\n\
    \            }\n        }\n        while (pq.Count > 0) {\n            res.Add(pq.Remove());\n\
    \        }\n        res.Reverse();\n        return res;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoj94c3mf.cs(26,22): error CS0246: The type or namespace name ''PriorityQueue<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmpoj94c3mf.cs(29,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''long''

    /tmp/tmpoj94c3mf.cs(33,16): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Write your code here\n       \
    \ return new List<long>();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0609bb2b1e6c4e058c5e07b78ee1dddc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0609bb2b1e6c4e058c5e07b78ee1dddc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Write your code here.\n      \
    \  return new List<long>();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2db0577353ef4d2eb062adced864e69e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2db0577353ef4d2eb062adced864e69e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // TODO: Implement your solution\
    \ here.\n        return null;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <c59e2aa78b78401ba01117adef1cd96d>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <c59e2aa78b78401ba01117adef1cd96d>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // TODO: Implement your solution\
    \ here\n        return null;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <6277f05085994c839c258dec3be198df>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <6277f05085994c839c258dec3be198df>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code here\n        return\
    \ new List<long>();\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13c47cb383d845c6bff8115718ac24aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13c47cb383d845c6bff8115718ac24aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return new List<long>();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // your code goes here\n        return\
    \ arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c69c3068514f4cdb973f893b787863ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c69c3068514f4cdb973f893b787863ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // TODO: Implement your solution\
    \ here\n        return new List<long>();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c75dfa18ebd4d5e8e8aa4651e085b13>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c75dfa18ebd4d5e8e8aa4651e085b13>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        for (long i = 0; i < k; i++) {\n            result.Add(arr[(int)i]);\n\
    \        }\n        result.Sort();\n        for (long i = k; i < arr.Count; i++)\
    \ {\n            if (arr[(int)i] > result[0]) {\n                result[0] = arr[(int)i];\n\
    \                result.Sort();\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f8d9f16ac3de476fa4c37a8ea6903dd6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f8d9f16ac3de476fa4c37a8ea6903dd6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k == 0) {\n            return\
    \ new List<long>();\n        }\n        if (k == arr.Count) {\n            return\
    \ arr;\n        }\n        List<long> result = new List<long>();\n        for\
    \ (int i = 0; i < k; i++) {\n            result.Add(arr[i]);\n        }\n    \
    \    result.Sort();\n        for (int i = k; i < arr.Count; i++) {\n         \
    \   if (arr[i] > result[0]) {\n                result[0] = arr[i];\n         \
    \       result.Sort();\n            }\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjvq2gesf.cs(36,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        var result = new List<long>();\n\
    \        var heap = new Heap<long>();\n        foreach (var item in arr) {\n \
    \           heap.Insert(item);\n        }\n        for (int i = 0; i < k; i++)\
    \ {\n            result.Add(heap.ExtractMax());\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv0hopaaq.cs(26,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x =>\
    \ x).Take((int)k).ToList();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d17c194c91d741769e3284259e16ff80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d17c194c91d741769e3284259e16ff80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code here\n        return\
    \ arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70208e8cdaad498bab039f9bb8ed1711>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70208e8cdaad498bab039f9bb8ed1711>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return new List<long>();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Fill in your code here\n     \
    \   return new List<long>();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <141cc082f25e41b3b87cbf89e2d00009>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <141cc082f25e41b3b87cbf89e2d00009>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        if (k == 0) {\n            return result;\n        }\n        if (k ==\
    \ arr.Count) {\n            return arr;\n        }\n        List<long> sorted\
    \ = arr.OrderByDescending(x => x).ToList();\n        for (int i = 0; i < k; i++)\
    \ {\n            result.Add(sorted[i]);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <123026be97ee43179da8e365058b74e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <123026be97ee43179da8e365058b74e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Write your code here.\n      \
    \  return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <cc5d22685bec4646acc38969e181646a>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <cc5d22685bec4646acc38969e181646a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Write your code here\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5ecbede6aae452e9dc686beb4f2d4a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5ecbede6aae452e9dc686beb4f2d4a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // TODO: Implement your solution\
    \ here\n        return arr;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e8dd0a21b994fae8c5005a068f0ef7f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e8dd0a21b994fae8c5005a068f0ef7f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // your code goes here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <ba3f568280704b2ba83aa5b0d8768449>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <ba3f568280704b2ba83aa5b0d8768449>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return new List<long>();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code here\n        return\
    \ arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70208e8cdaad498bab039f9bb8ed1711>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70208e8cdaad498bab039f9bb8ed1711>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // >>> Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L))\n        // (new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))\n        // >>> Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L))\n        // (new List<long>(new\
    \ long[]{(long)4L, (long)4L}))\n        // >>> Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n   \
    \     // (new List<long>(new long[]{(long)2L}))\n        // >>> Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})),\
    \ (2L))\n        // (new List<long>(new long[]{(long)2L, (long)2L}))\n       \
    \ // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L,\
    \ (long)-1L, (long)-2L, (long)1L})), (3L))\n        // (new List<long>(new long[]{(long)2L,\
    \ (long)2L, (long)1L}))\n        // >>> Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (4L))\n   \
    \     // (new List<long>(new long[]{(long)2L, (long)2L, (long)1L, (long)1L}))\n\
    \        // >>> Maximum((new List<long>(new long[]\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbgxg3ejv.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659793367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5089a74716c3457882dc45dd8f045158>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5089a74716c3457882dc45dd8f045158>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code here.\n        return\
    \ arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <09b93229d5fb4069b2a47477747798ad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <09b93229d5fb4069b2a47477747798ad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5089a74716c3457882dc45dd8f045158>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5089a74716c3457882dc45dd8f045158>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return new List<long>();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return new List<long>();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x =>\
    \ x).Take((int)k).ToList();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d17c194c91d741769e3284259e16ff80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d17c194c91d741769e3284259e16ff80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here\n        return\
    \ arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ff3c7a42f6c4ea8ab58a4260e598ba2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ff3c7a42f6c4ea8ab58a4260e598ba2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // TODO: Implement this function\n\
    \        return new List<long>();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8a0ffa0e6c84d04baf2ec939ff39057>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8a0ffa0e6c84d04baf2ec939ff39057>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return new List<long>();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5089a74716c3457882dc45dd8f045158>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5089a74716c3457882dc45dd8f045158>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // TODO: Implement your solution\
    \ here\n        return null;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <6277f05085994c839c258dec3be198df>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <6277f05085994c839c258dec3be198df>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here\n        return\
    \ arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ff3c7a42f6c4ea8ab58a4260e598ba2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ff3c7a42f6c4ea8ab58a4260e598ba2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        var res = new List<long>();\n   \
    \     var pq = new PriorityQueue<long>();\n        foreach (var i in arr) {\n\
    \            pq.Push(i);\n            if (pq.Count > k) {\n                pq.Pop();\n\
    \            }\n        }\n        while (pq.Count > 0) {\n            res.Add(pq.Pop());\n\
    \        }\n        res.Reverse();\n        return res;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph9s_30pc.cs(26,22): error CS0246: The type or namespace name ''PriorityQueue<>''
    could not be found (are you missing a using directive or an assembly reference?)

    /tmp/tmph9s_30pc.cs(29,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''long''

    /tmp/tmph9s_30pc.cs(33,16): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''method group'' and ''int''

    '
  timestamp: 1659793367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // your code goes here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <ba3f568280704b2ba83aa5b0d8768449>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <ba3f568280704b2ba83aa5b0d8768449>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Insert your code here.\n     \
    \   return new List<long>();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66068823b1664c8ba1f8cfcfad0a7282>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <66068823b1664c8ba1f8cfcfad0a7282>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x =>\
    \ x).Take((int)k).ToList();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d17c194c91d741769e3284259e16ff80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d17c194c91d741769e3284259e16ff80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        var result = new List<long>();\n\
    \        var heap = new Heap<long>();\n        foreach (var item in arr) {\n \
    \           heap.Insert(item);\n        }\n        for (var i = 0; i < k; i++)\
    \ {\n            result.Add(heap.ExtractMax());\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvfaejynx.cs(26,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659793367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // TODO: Implement your solution\
    \ here.\n        return new List<long>();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc790429342420d818d8f6825daf0a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <acc790429342420d818d8f6825daf0a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(arr[i]);\n    \
    \    }\n        result.Sort();\n        for (int i = k; i < arr.Count; i++) {\n\
    \            if (arr[i] > result[0]) {\n                result[0] = arr[i];\n\
    \                result.Sort();\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpan5pq4hk.cs(30,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code here.\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <cd3223da3ccb4326babaff92e5cc69be>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <cd3223da3ccb4326babaff92e5cc69be>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5089a74716c3457882dc45dd8f045158>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5089a74716c3457882dc45dd8f045158>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // TODO: Implement your solution\
    \ here\n        return arr;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e8dd0a21b994fae8c5005a068f0ef7f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1e8dd0a21b994fae8c5005a068f0ef7f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <21ce7d7f13a0492a82c165390525804b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <21ce7d7f13a0492a82c165390525804b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code here\n        return\
    \ arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70208e8cdaad498bab039f9bb8ed1711>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70208e8cdaad498bab039f9bb8ed1711>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ // You can add functions and other code here.\n        // You can modify the\
    \ return type.\n        // Do not modify the function signature.\n        return\
    \ arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f7b3bd9bab34684950efe84c5cb1770>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f7b3bd9bab34684950efe84c5cb1770>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return new List<long>();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return new List<long>();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Implement your solution here\n\
    \        return arr;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff966070bc9b41778bfd8e5f6cf41a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff966070bc9b41778bfd8e5f6cf41a74>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code here\n        return\
    \ arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70208e8cdaad498bab039f9bb8ed1711>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70208e8cdaad498bab039f9bb8ed1711>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code here\n        return\
    \ new List<long>();\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13c47cb383d845c6bff8115718ac24aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13c47cb383d845c6bff8115718ac24aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x =>\
    \ x).Take((int)k).ToList();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d17c194c91d741769e3284259e16ff80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d17c194c91d741769e3284259e16ff80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x =>\
    \ x).Take((int)k).ToList();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d17c194c91d741769e3284259e16ff80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d17c194c91d741769e3284259e16ff80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Write your code here\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <aaf237ca73b2457d94140fe929be36dd>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <aaf237ca73b2457d94140fe929be36dd>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return new List<long>();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Write your code here.\n      \
    \  return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <cc5d22685bec4646acc38969e181646a>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <cc5d22685bec4646acc38969e181646a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return new List<long>();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <21ce7d7f13a0492a82c165390525804b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <21ce7d7f13a0492a82c165390525804b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // TODO: Implement\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <e389f293ed2b4b70ba77f9a5ffe91bf1>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <e389f293ed2b4b70ba77f9a5ffe91bf1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        for (long i = 0; i < k; i++) {\n            long max = arr[0];\n    \
    \        long maxIndex = 0;\n            for (long j = 0; j < arr.Count; j++)\
    \ {\n                if (arr[(int)j] > max) {\n                    max = arr[(int)j];\n\
    \                    maxIndex = j;\n                }\n            }\n       \
    \     result.Add(max);\n            arr.RemoveAt((int)maxIndex);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <07f5eec533b946fa97adfa606a00040d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <07f5eec533b946fa97adfa606a00040d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x =>\
    \ x).Take((int)k).ToList();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d17c194c91d741769e3284259e16ff80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d17c194c91d741769e3284259e16ff80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return new List<long>();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5089a74716c3457882dc45dd8f045158>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5089a74716c3457882dc45dd8f045158>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x =>\
    \ x).Take((int)k).ToList();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d17c194c91d741769e3284259e16ff80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d17c194c91d741769e3284259e16ff80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code here\n        return\
    \ new List<long>();\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13c47cb383d845c6bff8115718ac24aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13c47cb383d845c6bff8115718ac24aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k == 0) {\n            return\
    \ new List<long>();\n        }\n        if (k == arr.Count) {\n            return\
    \ arr;\n        }\n        List<long> result = new List<long>();\n        for\
    \ (int i = 0; i < k; i++) {\n            result.Add(arr[i]);\n        }\n    \
    \    result.Sort();\n        for (int i = k; i < arr.Count; i++) {\n         \
    \   if (arr[i] > result[0]) {\n                result.RemoveAt(0);\n         \
    \       result.Add(arr[i]);\n                result.Sort();\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsmadrzc9.cs(36,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <21ce7d7f13a0492a82c165390525804b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <21ce7d7f13a0492a82c165390525804b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code here\n        return\
    \ new List<long>();\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13c47cb383d845c6bff8115718ac24aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13c47cb383d845c6bff8115718ac24aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here\n        return\
    \ new List<long>();\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b812406d7750401c901fe8a54880443d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b812406d7750401c901fe8a54880443d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5089a74716c3457882dc45dd8f045158>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5089a74716c3457882dc45dd8f045158>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Write your code here\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5ecbede6aae452e9dc686beb4f2d4a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5ecbede6aae452e9dc686beb4f2d4a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <21ce7d7f13a0492a82c165390525804b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <21ce7d7f13a0492a82c165390525804b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // your code goes here\n        return\
    \ new List<long>();\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14fae6b5336b46b6b9dce0a6e7cd8d0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14fae6b5336b46b6b9dce0a6e7cd8d0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        for (long i = 0; i < k; i++) {\n            long max = arr[0];\n    \
    \        long maxIndex = 0;\n            for (long j = 0; j < arr.Count; j++)\
    \ {\n                if (arr[(int)j] > max) {\n                    max = arr[(int)j];\n\
    \                    maxIndex = j;\n                }\n            }\n       \
    \     result.Add(max);\n            arr.RemoveAt((int)maxIndex);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <07f5eec533b946fa97adfa606a00040d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <07f5eec533b946fa97adfa606a00040d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // TODO: Implement\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <e389f293ed2b4b70ba77f9a5ffe91bf1>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <e389f293ed2b4b70ba77f9a5ffe91bf1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        var result = new List<long>();\n\
    \        var maxHeap = new MaxHeap<long>(arr);\n        for (var i = 0; i < k;\
    \ i++) {\n            result.Add(maxHeap.Pop());\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpde3yrb00.cs(26,27): error CS0246: The type or namespace name ''MaxHeap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659793367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return new List<long>();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Write your code here.\n      \
    \  return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <454d72c6dfb143a2bd6e1c24e2cc4e0e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <454d72c6dfb143a2bd6e1c24e2cc4e0e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        var result = new List<long>();\n\
    \        var heap = new Heap<long>();\n        foreach (var item in arr) {\n \
    \           heap.Push(item);\n        }\n        for (var i = 0; i < k; i++) {\n\
    \            result.Add(heap.Pop());\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9cz9vo06.cs(26,24): error CS0246: The type or namespace name ''Heap<>''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659793367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x =>\
    \ x).Take((int)k).ToList();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d17c194c91d741769e3284259e16ff80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d17c194c91d741769e3284259e16ff80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code here\n        return\
    \ arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70208e8cdaad498bab039f9bb8ed1711>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70208e8cdaad498bab039f9bb8ed1711>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <5089a74716c3457882dc45dd8f045158>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <5089a74716c3457882dc45dd8f045158>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793367
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // TODO: Implement me!\n        return\
    \ new List<long>();\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d3d63910a7284becaf873291cfb1b46b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d3d63910a7284becaf873291cfb1b46b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793367
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Write your code here\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5ecbede6aae452e9dc686beb4f2d4a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5ecbede6aae452e9dc686beb4f2d4a5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return new List<long>();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8171d33e77fa4262b8dbd6d53a1ed397>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        return arr.OrderByDescending(x =>\
    \ x).Take((int)k).ToList();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d17c194c91d741769e3284259e16ff80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d17c194c91d741769e3284259e16ff80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // TODO: Implement your solution\
    \ here\n        return null;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <6277f05085994c839c258dec3be198df>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <6277f05085994c839c258dec3be198df>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00034] in <b3341f4ad38648f5b294edf5c3ab0d73>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793366
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        // Your code goes here.\n       \
    \ return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0b297986a3d5441d9b9988d109457e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793366
