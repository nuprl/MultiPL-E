name: HumanEval_81_numerical_letter_grade
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // It is the last week of the semester and the teacher has to give\
  \ the grades\n    // to students. The teacher has been making her own algorithm\
  \ for grading.\n    // The only problem is, she has lost the code she used for grading.\n\
  \    // She has given you a list of GPAs for some students and you have to write\
  \ \n    // a function that can output a list of letter grades using the following\
  \ table:\n    // GPA       |    Letter grade\n    // 4.0                A+\n   \
  \ // > 3.7                A \n    // > 3.3                A- \n    // > 3.0    \
  \            B+\n    // > 2.7                B \n    // > 2.3                B-\n\
  \    // > 2.0                C+\n    // > 1.7                C\n    // > 1.3   \
  \             C-\n    // > 1.0                D+ \n    // > 0.7                D\
  \ \n    // > 0.0                D-\n    // 0.0                E\n    // Example:\n\
  \    // >>> GradeEquation((new List<float>(new float[]{(float)4.0f, (float)3L, (float)1.7f,\
  \ (float)2L, (float)3.5f})))\n    // (new List<string>(new string[]{(string)\"A+\"\
  , (string)\"B\", (string)\"C-\", (string)\"C\", (string)\"A-\"}))\n    public static\
  \ List<string> NumericalLetterGrade(List<float> grades) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NumericalLetterGrade((new\
  \ List<float>(new float[]{(float)4.0f, (float)3L, (float)1.7f, (float)2L, (float)3.5f}))).Equals((new\
  \ List<string>(new string[]{(string)\"A+\", (string)\"B\", (string)\"C-\", (string)\"\
  C\", (string)\"A-\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new\
  \ float[]{(float)1.2f}))).Equals((new List<string>(new string[]{(string)\"D+\"}))));\n\
  \    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)0.5f}))).Equals((new\
  \ List<string>(new string[]{(string)\"D-\"}))));\n    Debug.Assert(NumericalLetterGrade((new\
  \ List<float>(new float[]{(float)0.0f}))).Equals((new List<string>(new string[]{(string)\"\
  E\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)1.0f,\
  \ (float)0.3f, (float)1.5f, (float)2.8f, (float)3.3f}))).Equals((new List<string>(new\
  \ string[]{(string)\"D\", (string)\"D-\", (string)\"C-\", (string)\"B\", (string)\"\
  B+\"}))));\n    Debug.Assert(NumericalLetterGrade((new List<float>(new float[]{(float)0.0f,\
  \ (float)0.7f}))).Equals((new List<string>(new string[]{(string)\"E\", (string)\"\
  D-\"}))));\n    }\n\n}\n"
completions: ["        // TODO: Implement this function\n        // Hint: You can\
    \ use the ternary operator to make this more concise\n        List<string> letterGrades\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade == 4.0f) {\n                letterGrades.Add(\"A+\");\n        \
    \    } else if (grade > 3.7f) {\n                letterGrades.Add(\"A\");\n  \
    \          } else if (grade > 3.3f) {\n                letterGrades.Add(\"A-\"\
    );\n            } else if (grade > 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade > 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade > 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade > 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade > 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade > 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade > 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade > 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade > 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> letterGrades\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade == 4.0f) {\n                letterGrades.Add(\"A+\");\n        \
    \    } else if (grade > 3.7f) {\n                letterGrades.Add(\"A\");\n  \
    \          } else if (grade > 3.3f) {\n                letterGrades.Add(\"A-\"\
    );\n            } else if (grade > 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade > 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade > 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade > 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade > 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade > 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade > 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade > 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade > 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> letterGrades\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade >= 4.0f) {\n                letterGrades.Add(\"A+\");\n        \
    \    } else if (grade >= 3.7f) {\n                letterGrades.Add(\"A\");\n \
    \           } else if (grade >= 3.3f) {\n                letterGrades.Add(\"A-\"\
    );\n            } else if (grade >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> letterGrades\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade >= 4.0f) {\n                letterGrades.Add(\"A+\");\n        \
    \    } else if (grade >= 3.7f) {\n                letterGrades.Add(\"A\");\n \
    \           } else if (grade >= 3.3f) {\n                letterGrades.Add(\"A-\"\
    );\n            } else if (grade >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> letterGrades\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade >= 4.0f) {\n                letterGrades.Add(\"A+\");\n        \
    \    } else if (grade >= 3.7f) {\n                letterGrades.Add(\"A\");\n \
    \           } else if (grade >= 3.3f) {\n                letterGrades.Add(\"A-\"\
    );\n            } else if (grade >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> letterGrades\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade >= 4.0f) {\n                letterGrades.Add(\"A+\");\n        \
    \    } else if (grade >= 3.7f) {\n                letterGrades.Add(\"A\");\n \
    \           } else if (grade >= 3.3f) {\n                letterGrades.Add(\"A-\"\
    );\n            } else if (grade >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> letterGrades\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade >= 4.0f) {\n                letterGrades.Add(\"A+\");\n        \
    \    } else if (grade >= 3.7f) {\n                letterGrades.Add(\"A\");\n \
    \           } else if (grade >= 3.3f) {\n                letterGrades.Add(\"A-\"\
    );\n            } else if (grade >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> letterGrades\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade >= 4.0f) {\n                letterGrades.Add(\"A+\");\n        \
    \    } else if (grade >= 3.7f) {\n                letterGrades.Add(\"A\");\n \
    \           } else if (grade >= 3.3f) {\n                letterGrades.Add(\"A-\"\
    );\n            } else if (grade >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> letterGrades\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade >= 4.0f) {\n                letterGrades.Add(\"A+\");\n        \
    \    } else if (grade >= 3.7f) {\n                letterGrades.Add(\"A\");\n \
    \           } else if (grade >= 3.3f) {\n                letterGrades.Add(\"A-\"\
    );\n            } else if (grade >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> letterGrades\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade >= 4.0f) {\n                letterGrades.Add(\"A+\");\n        \
    \    } else if (grade >= 3.7f) {\n                letterGrades.Add(\"A\");\n \
    \           } else if (grade >= 3.3f) {\n                letterGrades.Add(\"A-\"\
    );\n            } else if (grade >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> letterGrades\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade >= 4.0f) {\n                letterGrades.Add(\"A+\");\n        \
    \    } else if (grade >= 3.7f) {\n                letterGrades.Add(\"A\");\n \
    \           } else if (grade >= 3.3f) {\n                letterGrades.Add(\"A-\"\
    );\n            } else if (grade >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> letterGrades\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade >= 4.0f) {\n                letterGrades.Add(\"A+\");\n        \
    \    } else if (grade >= 3.7f) {\n                letterGrades.Add(\"A\");\n \
    \           } else if (grade >= 3.3f) {\n                letterGrades.Add(\"A-\"\
    );\n            } else if (grade >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> letterGrades\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade >= 4.0f) {\n                letterGrades.Add(\"A+\");\n        \
    \    } else if (grade >= 3.7f) {\n                letterGrades.Add(\"A\");\n \
    \           } else if (grade >= 3.3f) {\n                letterGrades.Add(\"A-\"\
    );\n            } else if (grade >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> letterGrades\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade >= 4.0f) {\n                letterGrades.Add(\"A+\");\n        \
    \    } else if (grade >= 3.7f) {\n                letterGrades.Add(\"A\");\n \
    \           } else if (grade >= 3.3f) {\n                letterGrades.Add(\"A-\"\
    );\n            } else if (grade >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> result\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade >= 4.0f) {\n                result.Add(\"A+\");\n            } else\
    \ if (grade >= 3.7f) {\n                result.Add(\"A\");\n            } else\
    \ if (grade >= 3.3f) {\n                result.Add(\"A-\");\n            } else\
    \ if (grade >= 3.0f) {\n                result.Add(\"B+\");\n            } else\
    \ if (grade >= 2.7f) {\n                result.Add(\"B\");\n            } else\
    \ if (grade >= 2.3f) {\n                result.Add(\"B-\");\n            } else\
    \ if (grade >= 2.0f) {\n                result.Add(\"C+\");\n            } else\
    \ if (grade >= 1.7f) {\n                result.Add(\"C\");\n            } else\
    \ if (grade >= 1.3f) {\n                result.Add(\"C-\");\n            } else\
    \ if (grade >= 1.0f) {\n                result.Add(\"D+\");\n            } else\
    \ if (grade >= 0.7f) {\n                result.Add(\"D\");\n            } else\
    \ if (grade >= 0.0f) {\n                result.Add(\"D-\");\n            } else\
    \ {\n                result.Add(\"E\");\n            }\n        }\n        return\
    \ result;", "        List<string> result = new List<string>();\n        foreach\
    \ (float grade in grades) {\n            if (grade >= 4.0f) {\n              \
    \  result.Add(\"A+\");\n            } else if (grade >= 3.7f) {\n            \
    \    result.Add(\"A\");\n            } else if (grade >= 3.3f) {\n           \
    \     result.Add(\"A-\");\n            } else if (grade >= 3.0f) {\n         \
    \       result.Add(\"B+\");\n            } else if (grade >= 2.7f) {\n       \
    \         result.Add(\"B\");\n            } else if (grade >= 2.3f) {\n      \
    \          result.Add(\"B-\");\n            } else if (grade >= 2.0f) {\n    \
    \            result.Add(\"C+\");\n            } else if (grade >= 1.7f) {\n  \
    \              result.Add(\"C\");\n            } else if (grade >= 1.3f) {\n \
    \               result.Add(\"C-\");\n            } else if (grade >= 1.0f) {\n\
    \                result.Add(\"D+\");\n            } else if (grade >= 0.7f) {\n\
    \                result.Add(\"D\");\n            } else if (grade >= 0.0f) {\n\
    \                result.Add(\"D-\");\n            } else {\n                result.Add(\"\
    E\");\n            }\n        }\n        return result;", "        List<string>\
    \ result = new List<string>();\n        foreach (float grade in grades) {\n  \
    \          if (grade >= 4.0f) {\n                result.Add(\"A+\");\n       \
    \     } else if (grade >= 3.7f) {\n                result.Add(\"A\");\n      \
    \      } else if (grade >= 3.3f) {\n                result.Add(\"A-\");\n    \
    \        } else if (grade >= 3.0f) {\n                result.Add(\"B+\");\n  \
    \          } else if (grade >= 2.7f) {\n                result.Add(\"B\");\n \
    \           } else if (grade >= 2.3f) {\n                result.Add(\"B-\");\n\
    \            } else if (grade >= 2.0f) {\n                result.Add(\"C+\");\n\
    \            } else if (grade >= 1.7f) {\n                result.Add(\"C\");\n\
    \            } else if (grade >= 1.3f) {\n                result.Add(\"C-\");\n\
    \            } else if (grade >= 1.0f) {\n                result.Add(\"D+\");\n\
    \            } else if (grade >= 0.7f) {\n                result.Add(\"D\");\n\
    \            } else if (grade >= 0.0f) {\n                result.Add(\"D-\");\n\
    \            } else {\n                result.Add(\"E\");\n            }\n   \
    \     }\n        return result;", "        List<string> result = new List<string>();\n\
    \        foreach (float grade in grades) {\n            if (grade >= 4.0f) {\n\
    \                result.Add(\"A+\");\n            } else if (grade >= 3.7f) {\n\
    \                result.Add(\"A\");\n            } else if (grade >= 3.3f) {\n\
    \                result.Add(\"A-\");\n            } else if (grade >= 3.0f) {\n\
    \                result.Add(\"B+\");\n            } else if (grade >= 2.7f) {\n\
    \                result.Add(\"B\");\n            } else if (grade >= 2.3f) {\n\
    \                result.Add(\"B-\");\n            } else if (grade >= 2.0f) {\n\
    \                result.Add(\"C+\");\n            } else if (grade >= 1.7f) {\n\
    \                result.Add(\"C\");\n            } else if (grade >= 1.3f) {\n\
    \                result.Add(\"C-\");\n            } else if (grade >= 1.0f) {\n\
    \                result.Add(\"D+\");\n            } else if (grade >= 0.7f) {\n\
    \                result.Add(\"D\");\n            } else if (grade >= 0.0f) {\n\
    \                result.Add(\"D-\");\n            } else {\n                result.Add(\"\
    E\");\n            }\n        }\n        return result;", "        List<string>\
    \ letterGrades = new List<string>();\n        foreach (float grade in grades)\
    \ {\n            if (grade >= 4.0f) {\n                letterGrades.Add(\"A+\"\
    );\n            } else if (grade >= 3.7f) {\n                letterGrades.Add(\"\
    A\");\n            } else if (grade >= 3.3f) {\n                letterGrades.Add(\"\
    A-\");\n            } else if (grade >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;", "        List<string> letterGrades\
    \ = new List<string>();\n        foreach (float grade in grades) {\n         \
    \   if (grade >= 4.0f) {\n                letterGrades.Add(\"A+\");\n        \
    \    } else if (grade >= 3.7f) {\n                letterGrades.Add(\"A\");\n \
    \           } else if (grade >= 3.3f) {\n                letterGrades.Add(\"A-\"\
    );\n            } else if (grade >= 3.0f) {\n                letterGrades.Add(\"\
    B+\");\n            } else if (grade >= 2.7f) {\n                letterGrades.Add(\"\
    B\");\n            } else if (grade >= 2.3f) {\n                letterGrades.Add(\"\
    B-\");\n            } else if (grade >= 2.0f) {\n                letterGrades.Add(\"\
    C+\");\n            } else if (grade >= 1.7f) {\n                letterGrades.Add(\"\
    C\");\n            } else if (grade >= 1.3f) {\n                letterGrades.Add(\"\
    C-\");\n            } else if (grade >= 1.0f) {\n                letterGrades.Add(\"\
    D+\");\n            } else if (grade >= 0.7f) {\n                letterGrades.Add(\"\
    D\");\n            } else if (grade >= 0.0f) {\n                letterGrades.Add(\"\
    D-\");\n            } else {\n                letterGrades.Add(\"E\");\n     \
    \       }\n        }\n        return letterGrades;"]
stop_tokens:
- "\n    }\n"
