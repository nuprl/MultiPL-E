name: HumanEval_47_median
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return median of elements in the list l.\n    // >>> Median((new\
  \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L})))\n \
  \   // (float)3L\n    // >>> Median((new List<long>(new long[]{(long)-10L, (long)4L,\
  \ (long)6L, (long)1000L, (long)10L, (long)20L})))\n    // (15.0f)\n    public static\
  \ float Median(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)3L, (long)1L, (long)2L, (long)4L, (long)5L}))) ==\
  \ (float)3L);\n    Debug.Assert(Median((new List<long>(new long[]{(long)-10L, (long)4L,\
  \ (long)6L, (long)1000L, (long)10L, (long)20L}))) == (8.0f));\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)5L}))) == (float)5L);\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)6L, (long)5L}))) == (5.5f));\n    Debug.Assert(Median((new\
  \ List<long>(new long[]{(long)8L, (long)1L, (long)3L, (long)9L, (long)9L, (long)2L,\
  \ (long)7L}))) == (float)7L);\n    }\n\n}\n"
completions: ["        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1)\
    \ {\n            return (float)l[n / 2];\n        }\n        else {\n        \
    \    return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] +\
    \ l[n / 2]) / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n \
    \       if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n  \
    \      else {\n            return (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n\
    \        }", "        l.Sort();\n        int n = l.Count;\n        if (n % 2 ==\
    \ 1) {\n            return (float)l[n / 2];\n        }\n        else {\n     \
    \       return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n\
    \        if (l.Count % 2 == 1) {\n            return (float)l[l.Count / 2];\n\
    \        } else {\n            return (float)(l[l.Count / 2 - 1] + l[l.Count /\
    \ 2]) / 2;\n        }", "        l.Sort();\n        int len = l.Count;\n     \
    \   if (len % 2 == 1) {\n            return (float)l[len / 2];\n        }\n  \
    \      else {\n            return (float)((l[len / 2] + l[len / 2 - 1]) / 2.0);\n\
    \        }", "        l.Sort();\n        int mid = l.Count / 2;\n        if (l.Count\
    \ % 2 == 1) {\n            return (float)l[mid];\n        }\n        else {\n\
    \            return (float)(l[mid - 1] + l[mid]) / 2;\n        }", "        l.Sort();\n\
    \        int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] +\
    \ l[n / 2]) / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n \
    \       if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n  \
    \      else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n    \
    \    }", "        l.Sort();\n        if (l.Count % 2 == 1) {\n            return\
    \ (float)l[l.Count / 2];\n        } else {\n            return (float)((l[l.Count\
    \ / 2] + l[l.Count / 2 - 1]) / 2.0);\n        }", "        l.Sort();\n       \
    \ int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n /\
    \ 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] + l[n\
    \ / 2]) / 2;\n        }", "        int n = l.Count;\n        if (n % 2 == 1) {\n\
    \            return (float)l[n / 2];\n        }\n        else {\n            return\
    \ (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }", "        l.Sort();\n    \
    \    int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n\
    \ / 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] +\
    \ l[n / 2]) / 2;\n        }", "        if (l.Count == 0) {\n            return\
    \ 0;\n        }\n        l.Sort();\n        if (l.Count % 2 == 1) {\n        \
    \    return l[l.Count / 2];\n        }\n        else {\n            return (l[l.Count\
    \ / 2 - 1] + l[l.Count / 2]) / 2.0f;\n        }", "        l.Sort();\n       \
    \ int n = l.Count;\n        if (n % 2 == 1) {\n            return (float)l[n /\
    \ 2];\n        }\n        else {\n            return (float)(l[n / 2 - 1] + l[n\
    \ / 2]) / 2;\n        }", "        l.Sort();\n        int n = l.Count;\n     \
    \   if (n % 2 == 1) {\n            return (float)l[n / 2];\n        }\n      \
    \  else {\n            return (float)(l[n / 2 - 1] + l[n / 2]) / 2;\n        }",
  "        l.Sort();\n        int n = l.Count;\n        if (n % 2 == 1) {\n      \
    \      return (float)l[n / 2];\n        }\n        else {\n            return\
    \ (float)((l[n / 2 - 1] + l[n / 2]) / 2.0);\n        }", "        int n = l.Count;\n\
    \        if (n == 0) {\n            return 0;\n        }\n        l.Sort();\n\
    \        if (n % 2 == 1) {\n            return l[n / 2];\n        }\n        else\
    \ {\n            return (l[n / 2 - 1] + l[n / 2]) / 2.0f;\n        }", "     \
    \   l.Sort();\n        if ((l.Count % 2L) == 0L) {\n            return ((float)((l[(l.Count\
    \ / 2L) - 1L] + l[l.Count / 2L])) / 2f);\n        }\n\n        return (float)l[l.Count\
    \ / 2L];\n", "        int n = l.Count;\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        l.Sort();\n        if (n % 2 == 1) {\n            return\
    \ l[n / 2];\n        }\n        else {\n            return (l[n / 2 - 1] + l[n\
    \ / 2]) / 2.0f;\n        }"]
stop_tokens:
- "\n    }\n"
