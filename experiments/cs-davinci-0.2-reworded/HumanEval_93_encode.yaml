name: HumanEval_93_encode
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that takes a message, and encodes in such a\
  \ \n    // way that it swaps case of all letters, replaces all vowels in \n    //\
  \ the message with the letter that appears 2 places ahead of that \n    // vowel\
  \ in the english alphabet. \n    // Assume only letters. \n    // Examples:\n  \
  \  // >>> Encode((\"test\"))\n    // (\"TGST\")\n    // >>> Encode((\"This is a\
  \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static string Encode(string\
  \ message) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
  TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
  mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
  This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
  I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
  \n}\n"
completions: ["        string encoded = \"\";\n        for (int i = 0; i < message.Length;\
    \ i++) {\n            char c = message[i];\n            if (c >= 'a' && c <= 'z')\
    \ {\n                encoded += (char)(c - 'a' + 'A');\n            } else if\
    \ (c >= 'A' && c <= 'Z') {\n                encoded += (char)(c - 'A' + 'a');\n\
    \            } else {\n                encoded += c;\n            }\n        }\n\
    \        return encoded;", "        string result = \"\";\n        foreach (char\
    \ c in message) {\n            if (c >= 'a' && c <= 'z') {\n                result\
    \ += (char)(c - 32);\n            } else if (c >= 'A' && c <= 'Z') {\n       \
    \         result += (char)(c + 32);\n            } else {\n                result\
    \ += c;\n            }\n        }\n        string vowels = \"aeiou\";\n      \
    \  string result2 = \"\";\n        foreach (char c in result) {\n            if\
    \ (vowels.Contains(c)) {\n                int index = vowels.IndexOf(c);\n   \
    \             index = (index + 2) % 5;\n                result2 += vowels[index];\n\
    \            } else {\n                result2 += c;\n            }\n        }\n\
    \        return result2;", "        string encoded = \"\";\n        string vowels\
    \ = \"aeiou\";\n        foreach (char c in message) {\n            if (vowels.Contains(c))\
    \ {\n                int index = vowels.IndexOf(c);\n                index = (index\
    \ + 2) % 5;\n                encoded += vowels[index];\n            } else {\n\
    \                encoded += c;\n            }\n        }\n        return encoded;",
  "        // TODO: Implement this function\n        return \"\";", '        return
    "";', "        string result = \"\";\n        foreach (char c in message) {\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += (char)(c -\
    \ 'a' + 'A');\n            } else if (c >= 'A' && c <= 'Z') {\n              \
    \  result += (char)(c - 'A' + 'a');\n            } else {\n                result\
    \ += c;\n            }\n        }\n        return result;", '        return "";',
  "        string result = \"\";\n        foreach (char c in message) {\n        \
    \    if (c >= 'a' && c <= 'z') {\n                result += (char)(c - 'a' + 'A');\n\
    \            } else if (c >= 'A' && c <= 'Z') {\n                result += (char)(c\
    \ - 'A' + 'a');\n            } else {\n                result += c;\n        \
    \    }\n        }\n        return result;", "        string result = \"\";\n \
    \       string vowels = \"aeiou\";\n        for (int i = 0; i < message.Length;\
    \ i++) {\n            if (vowels.Contains(message[i])) {\n                result\
    \ += (char)(message[i] + 2);\n            } else {\n                result +=\
    \ (char)(message[i] - 2);\n            }\n        }\n        return result;",
  "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ sb = new StringBuilder();\n        foreach (var c in message) {\n          \
    \  if (vowels.Contains(c)) {\n                sb.Append((char)(c + 2));\n    \
    \        } else {\n                sb.Append(c);\n            }\n        }\n \
    \       return sb.ToString();", "        // TODO: Implement this function\n  \
    \      return \"\";", '        return "";', "        string vowels = \"aeiou\"\
    ;\n        string result = \"\";\n        for (int i = 0; i < message.Length;\
    \ i++) {\n            char c = message[i];\n            if (vowels.Contains(c))\
    \ {\n                int index = vowels.IndexOf(c);\n                index = (index\
    \ + 2) % vowels.Length;\n                result += vowels[index];\n          \
    \  } else {\n                result += c;\n            }\n        }\n        return\
    \ result;", "        // TODO: Implement this function\n        return \"\";",
  "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ sb = new StringBuilder();\n        foreach (var c in message) {\n          \
    \  if (vowels.Contains(c)) {\n                sb.Append((char)(c + 2));\n    \
    \        } else {\n                sb.Append(c);\n            }\n        }\n \
    \       return sb.ToString();", "        string result = \"\";\n        for (int\
    \ i = 0; i < message.Length; i++) {\n            char c = message[i];\n      \
    \      if (c >= 'a' && c <= 'z') {\n                result += (char)(c - 'a' +\
    \ 'A');\n            } else if (c >= 'A' && c <= 'Z') {\n                result\
    \ += (char)(c - 'A' + 'a');\n            } else {\n                result += c;\n\
    \            }\n        }\n        return result;", "        string encoded =\
    \ \"\";\n        for (int i = 0; i < message.Length; i++) {\n            char\
    \ c = message[i];\n            if (c >= 'a' && c <= 'z') {\n                c\
    \ = (char)(c - 'a' + 'A');\n            } else if (c >= 'A' && c <= 'Z') {\n \
    \               c = (char)(c - 'A' + 'a');\n            }\n            if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                c =\
    \ (char)(c + 2);\n            }\n            encoded += c;\n        }\n      \
    \  return encoded;", "        string result = \"\";\n        foreach (char c in\
    \ message) {\n            if (c >= 'a' && c <= 'z') {\n                result\
    \ += (char)(c - 'a' + 'A');\n            } else if (c >= 'A' && c <= 'Z') {\n\
    \                result += (char)(c - 'A' + 'a');\n            } else {\n    \
    \            result += c;\n            }\n        }\n        return result;",
  "        // TODO: Implement this function\n        return \"\";", '        return
    "";']
stop_tokens:
- "\n    }\n"
