language: cs
name: HumanEval_130_tri
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> res = new List<long>();\n\
    \        res.Add(1);\n        res.Add(3);\n        res.Add(2);\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.Add(1\
    \ + i / 2);\n            } else {\n                res.Add(res[i - 1] + res[i\
    \ - 2] + res[i + 1]);\n            }\n        }\n        return res;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (long i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n        \
    \        result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        if (n == 0) return result;\n        result.Add(3);\n\
    \        if (n == 1) return result;\n        result.Add(2);\n        if (n ==\
    \ 2) return result;\n        for (int i = 3; i <= n; i++) {\n            result.Add(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68c953ec18d949d0b2000b25c69dfec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68c953ec18d949d0b2000b25c69dfec8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        for (long i = 2; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[(int)i - 1] + result[(int)i\
    \ - 2] + result[(int)i + 1]);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00053] in <217d774ca08b4d26b5e6beff9c1a6f7a>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <217d774ca08b4d26b5e6beff9c1a6f7a>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00053] in <217d774ca08b4d26b5e6beff9c1a6f7a>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <217d774ca08b4d26b5e6beff9c1a6f7a>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.Add(TriRec(i));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpedlad0wz.cs(28,24): error CS0103: The name ''TriRec'' does not exist in
    the current context

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> res = new List<long>();\n\
    \        res.Add(1);\n        res.Add(3);\n        res.Add(2);\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.Add(1\
    \ + i / 2);\n            } else {\n                res.Add(res[i - 1] + res[i\
    \ - 2] + res[i + 1]);\n            }\n        }\n        return res;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        if (n == 0) {\n            return result;\n \
    \       }\n        result.Add(3);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(2);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        long a = 1;\n        long b = 3;\n        long c\
    \ = 2;\n        for (long i = 3; i <= n; i++) {\n            long d = a + b +\
    \ c;\n            result.Add(d);\n            a = b;\n            b = c;\n   \
    \         c = d;\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5e5c2a1de77b4b598c6f6e546d6161ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5e5c2a1de77b4b598c6f6e546d6161ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        for (int i = 0; i <= n; i++) {\n            result.Add(tri(i));\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbv1150gw.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        if (n == 0) {\n            return result;\n \
    \       }\n        result.Add(3);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(2);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long a = 1;\n        long b = 3;\n        long c = 2;\n        result.Add(a);\n\
    \        result.Add(b);\n        result.Add(c);\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00063] in <ba52fac31d524aa1aaf474c56e8fff33>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ba52fac31d524aa1aaf474c56e8fff33>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00063] in <ba52fac31d524aa1aaf474c56e8fff33>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ba52fac31d524aa1aaf474c56e8fff33>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        if (n > 0) {\n            result.Add(3);\n  \
    \          if (n > 1) {\n                result.Add(2);\n                for (long\
    \ i = 3; i <= n; i++) {\n                    result.Add(i % 2 == 0 ? 1 + i / 2\
    \ : result[(int)i - 1] + result[(int)i - 2] + result[(int)i + 1]);\n         \
    \       }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <d7c574a75aed4526b8ac13f03f2fb2d3>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <d7c574a75aed4526b8ac13f03f2fb2d3>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00057] in <d7c574a75aed4526b8ac13f03f2fb2d3>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <d7c574a75aed4526b8ac13f03f2fb2d3>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        if (n == 0) {\n            return result;\n \
    \       }\n        result.Add(3);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(2);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        if (n == 0) {\n            return result;\n \
    \       }\n        result.Add(3);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(2);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (long i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[(int)i - 1] + result[(int)i - 2] + result[(int)i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00095] in <7decf756dae540a1b4bc8e643f900502>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <7decf756dae540a1b4bc8e643f900502>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00095] in <7decf756dae540a1b4bc8e643f900502>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <7decf756dae540a1b4bc8e643f900502>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (long i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n        \
    \        result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.Add(tri(i));\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb0to3yoq.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long a = 1;\n        long b = 3;\n        long c = 2;\n        long d\
    \ = 0;\n        result.Add(a);\n        result.Add(b);\n        result.Add(c);\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           d = 1 + i / 2;\n            } else {\n                d = a + b +\
    \ c;\n            }\n            a = b;\n            b = c;\n            c = d;\n\
    \            result.Add(d);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2859861b8ba4c058d2e813ec1cf0279>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2859861b8ba4c058d2e813ec1cf0279>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        // Your code goes here\n\
    \        return null;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <98f649c9ab55400dadefcdb6b0cadf02>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <98f649c9ab55400dadefcdb6b0cadf02>:0\
    \ \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long a = 1;\n        long b = 3;\n        long c = 2;\n        long d\
    \ = 0;\n        result.Add(a);\n        result.Add(b);\n        result.Add(c);\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           d = 1 + i / 2;\n            } else {\n                d = a + b +\
    \ c;\n            }\n            a = b;\n            b = c;\n            c = d;\n\
    \            result.Add(d);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2859861b8ba4c058d2e813ec1cf0279>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d2859861b8ba4c058d2e813ec1cf0279>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> list = new List<long>();\n\
    \        list.Add(1);\n        list.Add(3);\n        list.Add(2);\n        for\
    \ (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.Add(1\
    \ + i / 2);\n            } else {\n                list.Add(list[i - 1] + list[i\
    \ - 2] + list[i + 1]);\n            }\n        }\n        return list;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        // Your code goes here.\n\
    \        return null;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0\
    \ \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        long[] tri = new long[n +\
    \ 1];\n        tri[0] = 1;\n        tri[1] = 3;\n        for (int i = 2; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                tri[i] = 1 + i / 2;\n\
    \            } else {\n                tri[i] = tri[i - 1] + tri[i - 2] + tri[i\
    \ + 1];\n            }\n        }\n        return new List<long>(tri);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.Tri (System.Int64 n) [0x00033] in <97f6523b42d3430ba7dd291a872efed5>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00001] in <97f6523b42d3430ba7dd291a872efed5>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index\
    \ was outside the bounds of the array.\n  at Problem.Tri (System.Int64 n) [0x00033]\
    \ in <97f6523b42d3430ba7dd291a872efed5>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <97f6523b42d3430ba7dd291a872efed5>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        if (n == 0) {\n            return result;\n \
    \       }\n        result.Add(3);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(2);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> list = new List<long>();\n\
    \        list.Add(1);\n        list.Add(3);\n        list.Add(2);\n        for\
    \ (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.Add(1\
    \ + i / 2);\n            } else {\n                list.Add(list[i - 1] + list[i\
    \ - 2] + list[i + 1]);\n            }\n        }\n        return list;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.Add(Tri(i));\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpll60q6j0.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> res = new List<long>();\n\
    \        res.Add(1);\n        if (n == 0) {\n            return res;\n       \
    \ }\n        res.Add(3);\n        if (n == 1) {\n            return res;\n   \
    \     }\n        res.Add(2);\n        if (n == 2) {\n            return res;\n\
    \        }\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0)\
    \ {\n                res.Add(1 + i / 2);\n            } else {\n             \
    \   res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n        }\n\
    \        return res;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <32a09e09a17749acb203739779686977>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <32a09e09a17749acb203739779686977>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <32a09e09a17749acb203739779686977>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <32a09e09a17749acb203739779686977>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (long i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n        \
    \        result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <7b22c08098674620a3bec71960c4799b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <7b22c08098674620a3bec71960c4799b>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <7b22c08098674620a3bec71960c4799b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <7b22c08098674620a3bec71960c4799b>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        if (n == 0) {\n            return result;\n \
    \       }\n        result.Add(3);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(2);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> list = new List<long>();\n\
    \        list.Add(1);\n        list.Add(3);\n        list.Add(2);\n        for\
    \ (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.Add(1\
    \ + i / 2);\n            } else {\n                list.Add(list[i - 1] + list[i\
    \ - 2] + list[i + 1]);\n            }\n        }\n        return list;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        for (int i = 0; i <= n; i++) {\n            result.Add(Tri(i));\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjd08juvo.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        // Your code goes here.\n\
    \        return null;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0\
    \ \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var list = new List<long>();\n\
    \        list.Add(1);\n        list.Add(3);\n        list.Add(2);\n        for\
    \ (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.Add(1\
    \ + i / 2);\n            } else {\n                list.Add(list[i - 1] + list[i\
    \ - 2] + list[i + 1]);\n            }\n        }\n        return list;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <59be167f81a24edda45393b6bba6c306>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <59be167f81a24edda45393b6bba6c306>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <59be167f81a24edda45393b6bba6c306>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <59be167f81a24edda45393b6bba6c306>:0 \n"
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> res = new List<long>();\n\
    \        res.Add(1);\n        res.Add(3);\n        res.Add(2);\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.Add(1\
    \ + i / 2);\n            } else {\n                res.Add(res[i - 1] + res[i\
    \ - 2] + res[i + 1]);\n            }\n        }\n        return res;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        long a = 1;\n        long b = 3;\n        long c = 2;\n        result.Add(a);\n\
    \        result.Add(b);\n        result.Add(c);\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00063] in <ba52fac31d524aa1aaf474c56e8fff33>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ba52fac31d524aa1aaf474c56e8fff33>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00063] in <ba52fac31d524aa1aaf474c56e8fff33>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ba52fac31d524aa1aaf474c56e8fff33>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> res = new List<long>();\n\
    \        res.Add(1);\n        res.Add(3);\n        res.Add(2);\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.Add(1\
    \ + i / 2);\n            } else {\n                res.Add(res[i - 1] + res[i\
    \ - 2] + res[i + 1]);\n            }\n        }\n        return res;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        for (long i = 0; i <= n; i++) {\n            if (i == 0) {\n        \
    \        result.Add(1);\n            } else if (i == 1) {\n                result.Add(3);\n\
    \            } else if (i == 2) {\n                result.Add(2);\n          \
    \  } else if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n        \
    \    } else {\n                result.Add(result[(int)i - 1] + result[(int)i -\
    \ 2] + result[(int)i + 1]);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008a] in <867ed3d2a54b4e4c9d90a3cf3bb37dab>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <867ed3d2a54b4e4c9d90a3cf3bb37dab>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008a] in <867ed3d2a54b4e4c9d90a3cf3bb37dab>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <867ed3d2a54b4e4c9d90a3cf3bb37dab>:0 \n"
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> l = new List<long>();\n\
    \        l.Add(1);\n        l.Add(3);\n        l.Add(2);\n        for (int i =\
    \ 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                l.Add(1 +\
    \ i / 2);\n            } else {\n                l.Add(l[i - 1] + l[i - 2] + l[i\
    \ + 1]);\n            }\n        }\n        return l;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <9e5cb9c152324bf99608f26ec7c68e68>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <9e5cb9c152324bf99608f26ec7c68e68>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <9e5cb9c152324bf99608f26ec7c68e68>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <9e5cb9c152324bf99608f26ec7c68e68>:0 \n"
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            result.Add(result[i - 1] + result[i\
    \ - 2] + result[i - 3]);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2ff63317ca94c5b8291aedc98688305>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2ff63317ca94c5b8291aedc98688305>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        // Your code goes here.\n\
    \        return null;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0\
    \ \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        for (long i = 0; i <= n; i++) {\n            if (i == 0) {\n        \
    \        result.Add(1);\n            } else if (i == 1) {\n                result.Add(3);\n\
    \            } else if (i == 2) {\n                result.Add(2);\n          \
    \  } else if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n        \
    \    } else {\n                result.Add(result[(int)i - 1] + result[(int)i -\
    \ 2] + result[(int)i + 1]);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008a] in <44cdebece803434c9ab450eb0f8ea6cc>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <44cdebece803434c9ab450eb0f8ea6cc>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008a] in <44cdebece803434c9ab450eb0f8ea6cc>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <44cdebece803434c9ab450eb0f8ea6cc>:0 \n"
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (long i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n        \
    \        result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> res = new List<long>();\n\
    \        res.Add(1);\n        res.Add(3);\n        res.Add(2);\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.Add(1\
    \ + i / 2);\n            } else {\n                res.Add(res[i - 1] + res[i\
    \ - 2] + res[i + 1]);\n            }\n        }\n        return res;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (long i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n        \
    \        result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <7b22c08098674620a3bec71960c4799b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <7b22c08098674620a3bec71960c4799b>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <7b22c08098674620a3bec71960c4799b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <7b22c08098674620a3bec71960c4799b>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i <= n; i++) {\n            result.Add(TriRec(i));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6pfugnpl.cs(28,24): error CS0103: The name ''TriRec'' does not exist in
    the current context

    '
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        long a = 1;\n        long b = 3;\n        long c = 2;\n        result.Add(a);\n\
    \        result.Add(b);\n        result.Add(c);\n        for (long i = 0; i <\
    \ n - 2; i++) {\n            long d = a + b + c;\n            result.Add(d);\n\
    \            a = b;\n            b = c;\n            c = d;\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <599a5e2c218f464e8e7e0ba03b24124f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <599a5e2c218f464e8e7e0ba03b24124f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (long i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n        \
    \        result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <7b22c08098674620a3bec71960c4799b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <7b22c08098674620a3bec71960c4799b>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <7b22c08098674620a3bec71960c4799b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <7b22c08098674620a3bec71960c4799b>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var list = new List<long>();\n\
    \        list.Add(1);\n        list.Add(3);\n        list.Add(2);\n        for\
    \ (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.Add(1\
    \ + i / 2);\n            } else {\n                list.Add(list[i - 1] + list[i\
    \ - 2] + list[i + 1]);\n            }\n        }\n        return list;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <59be167f81a24edda45393b6bba6c306>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <59be167f81a24edda45393b6bba6c306>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <59be167f81a24edda45393b6bba6c306>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <59be167f81a24edda45393b6bba6c306>:0 \n"
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.Add(TriRec(i));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpedlad0wz.cs(28,24): error CS0103: The name ''TriRec'' does not exist in
    the current context

    '
  timestamp: 1659794409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    long a = 1;\n        long b = 3;\n        long c = 2;\n        for (int i\
    \ = 3; i <= n; i++) {\n            long d = 0;\n            if (i % 2 == 0) {\n\
    \                d = 1 + i / 2;\n            } else {\n                d = a +\
    \ b + c;\n            }\n            result.Add(d);\n            a = b;\n    \
    \        b = c;\n            c = d;\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <25ef25e3be82408cb526ab783322c897>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <25ef25e3be82408cb526ab783322c897>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794410
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        // Your code goes here\n\
    \        return new List<long>();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b1d3965b64948de8114d65be06f43a8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b1d3965b64948de8114d65be06f43a8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        if (n == 0) {\n            return result;\n \
    \       }\n        result.Add(3);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(2);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.Add(tri(i));\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb0to3yoq.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        if (n == 0) {\n            return result;\n \
    \       }\n        result.Add(3);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(2);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <69e67ae047304f1ebbe4ca31bafc7185>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <69e67ae047304f1ebbe4ca31bafc7185>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <69e67ae047304f1ebbe4ca31bafc7185>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <69e67ae047304f1ebbe4ca31bafc7185>:0 \n"
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        if (n == 0) {\n            return result;\n \
    \       }\n        result.Add(3);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(2);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.Add(Tri(i));\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpll60q6j0.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (long i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n        \
    \        result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <566055eca28847398f6cd07a7cecd8ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <566055eca28847398f6cd07a7cecd8ff>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.Tri (System.Int64 n) [0x00047] in <566055"
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b03609ce3f9f4ccf86833df88ee5e2b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b03609ce3f9f4ccf86833df88ee5e2b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        for (int i = 0; i <= n; i++) {\n            result.Add(tri(i));\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbv1150gw.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        return new List<long>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b03609ce3f9f4ccf86833df88ee5e2b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b03609ce3f9f4ccf86833df88ee5e2b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.Add(Tri(i));\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpll60q6j0.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.Add(tri(i));\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb0to3yoq.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        if (n == 0) {\n            return result;\n \
    \       }\n        result.Add(3);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(2);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        // Your code goes here\n\
    \        List<long> result = new List<long>();\n        result.Add(1);\n     \
    \   result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n \
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <acbf193d899e42ef9154e2e7fbbc7d78>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <acbf193d899e42ef9154e2e7fbbc7d78>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <acbf193d899e42ef9154e2e7fbbc7d78>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <acbf193d899e42ef9154e2e7fbbc7d78>:0 \n"
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        for (int i = 0; i <= n; i++) {\n            result.Add(Tri(i));\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjd08juvo.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        // Your code here\n     \
    \   return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <31eee5ba00a0403c98adb0cb0dedc6ef>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <31eee5ba00a0403c98adb0cb0dedc6ef>:0\
    \ \n"
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> res = new List<long>();\n\
    \        res.Add(1);\n        res.Add(3);\n        res.Add(2);\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.Add(1\
    \ + i / 2);\n            } else {\n                res.Add(res[i - 1] + res[i\
    \ - 2] + res[i + 1]);\n            }\n        }\n        return res;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.Add(TriRec(i));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpedlad0wz.cs(28,24): error CS0103: The name ''TriRec'' does not exist in
    the current context

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        for (long i = 1; i <= n + 1; i++) {\n            result.Add(tri(i));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpztlnk0jq.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        if (n == 0) {\n            return result;\n \
    \       }\n        result.Add(3);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(2);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        // Your code here.\n    \
    \    return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <42345da1679e41e285c6a9a56a2744e4>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <42345da1679e41e285c6a9a56a2744e4>:0\
    \ \n"
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        // Your code goes here.\n\
    \        return null;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0\
    \ \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var res = new List<long>();\n\
    \        for (int i = 0; i <= n; i++) {\n            res.Add(tri(i));\n      \
    \  }\n        return res;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw8w4fmpx.cs(28,21): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        for (int i = 0; i <= n; i++) {\n            result.Add(Tri(i));\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjd08juvo.cs(28,24): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''long''

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        if (n == 0) {\n            return result;\n \
    \       }\n        result.Add(3);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(2);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <69e67ae047304f1ebbe4ca31bafc7185>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <69e67ae047304f1ebbe4ca31bafc7185>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <69e67ae047304f1ebbe4ca31bafc7185>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <69e67ae047304f1ebbe4ca31bafc7185>:0 \n"
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> res = new List<long>();\n\
    \        res.Add(1);\n        res.Add(3);\n        res.Add(2);\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.Add(1\
    \ + i / 2);\n            } else {\n                res.Add(res[i - 1] + res[i\
    \ - 2] + res[i + 1]);\n            }\n        }\n        return res;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (long i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n        \
    \        result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var res = new List<long>();\n\
    \        res.Add(1);\n        if (n == 0) {\n            return res;\n       \
    \ }\n        res.Add(3);\n        if (n == 1) {\n            return res;\n   \
    \     }\n        res.Add(2);\n        if (n == 2) {\n            return res;\n\
    \        }\n        for (long i = 3; i <= n; i++) {\n            if (i % 2 ==\
    \ 0) {\n                res.Add(1 + i / 2);\n            } else {\n          \
    \      res.Add(res[(int)i - 1] + res[(int)i - 2] + res[(int)i + 1]);\n       \
    \     }\n        }\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00095] in <03eb71fbfb2b467e95db6877a9202c90>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <03eb71fbfb2b467e95db6877a9202c90>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00095] in <03eb71fbfb2b467e95db6877a9202c90>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <03eb71fbfb2b467e95db6877a9202c90>:0 \n"
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        if (n == 0) {\n            return result;\n \
    \       }\n        result.Add(3);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(2);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (long i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n        \
    \        result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (long i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n        \
    \        result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <7b22c08098674620a3bec71960c4799b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <7b22c08098674620a3bec71960c4799b>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <7b22c08098674620a3bec71960c4799b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <7b22c08098674620a3bec71960c4799b>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.Add(TriRec(i));\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpedlad0wz.cs(28,24): error CS0103: The name ''TriRec'' does not exist in
    the current context

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.Add(tri(i));\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb0to3yoq.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> res = new List<long>();\n\
    \        res.Add(1);\n        res.Add(3);\n        res.Add(2);\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.Add(1\
    \ + i / 2);\n            } else {\n                res.Add(res[i - 1] + res[i\
    \ - 2] + res[i + 1]);\n            }\n        }\n        return res;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        if (n == 0) {\n            return result;\n \
    \       }\n        result.Add(3);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(2);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        return null;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <04b59fe06f184e21bd0c7157838a0aff>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <04b59fe06f184e21bd0c7157838a0aff>:0\
    \ \n"
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        // Your code goes here.\n\
    \        return null;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0\
    \ \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        // Your code goes here.\n\
    \        return null;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0\
    \ \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        // Your code goes here\n\
    \        return null;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <98f649c9ab55400dadefcdb6b0cadf02>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <98f649c9ab55400dadefcdb6b0cadf02>:0\
    \ \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        if (n == 0) {\n            return result;\n \
    \       }\n        result.Add(3);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(2);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (long i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[(int)i - 1] + result[(int)i - 2] + result[(int)i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00095] in <7decf756dae540a1b4bc8e643f900502>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <7decf756dae540a1b4bc8e643f900502>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00095] in <7decf756dae540a1b4bc8e643f900502>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <7decf756dae540a1b4bc8e643f900502>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> list = new List<long>();\n\
    \        list.Add(1);\n        list.Add(3);\n        list.Add(2);\n        for\
    \ (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                list.Add(1\
    \ + i / 2);\n            } else {\n                list.Add(list[i - 1] + list[i\
    \ - 2] + list[i + 1]);\n            }\n        }\n        return list;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ee9d28307d7840838ae0d4d077ee084b>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> res = new List<long>();\n\
    \        res.Add(1);\n        res.Add(3);\n        res.Add(2);\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.Add(1\
    \ + i / 2);\n            } else {\n                res.Add(res[i - 1] + res[i\
    \ - 2] + res[i + 1]);\n            }\n        }\n        return res;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        // Your code goes here\n\
    \        return null;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <98f649c9ab55400dadefcdb6b0cadf02>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <98f649c9ab55400dadefcdb6b0cadf02>:0\
    \ \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            return result;\n        }\n        result.Add(1);\n\
    \        if (n == 1) {\n            return result;\n        }\n        result.Add(3);\n\
    \        if (n == 2) {\n            return result;\n        }\n        result.Add(2);\n\
    \        if (n == 3) {\n            return result;\n        }\n        for (long\
    \ i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)(i -\
    \ 1)] + result[(int)(i - 2)] + result[(int)(i + 1)]);\n            }\n       \
    \ }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <542c3a02c8ce45ff80cfd97eb9e6931c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <542c3a02c8ce45ff80cfd97eb9e6931c>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.Tri (System.Int64 n) [0x00091] in <542c3a"
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> res = new List<long>();\n\
    \        res.Add(1);\n        res.Add(3);\n        res.Add(2);\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.Add(1\
    \ + i / 2);\n            } else {\n                res.Add(res[i - 1] + res[i\
    \ - 2] + res[i + 1]);\n            }\n        }\n        return res;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <4aa45dc1d867442fa4d9d6abef465857>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        if (n == 0) {\n            return result;\n \
    \       }\n        result.Add(3);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(2);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        if (n == 0) {\n            return result;\n \
    \       }\n        result.Add(3);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(2);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008f] in <a3da1019b9594b12a50e381c322639dd>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <a3da1019b9594b12a50e381c322639dd>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        // Your code goes here.\n\
    \        return null;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0\
    \ \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> res = new List<long>();\n\
    \        res.Add(1);\n        if (n == 0) return res;\n        res.Add(3);\n \
    \       if (n == 1) return res;\n        res.Add(2);\n        if (n == 2) return\
    \ res;\n        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n\
    \                res.Add(1 + i / 2);\n            } else {\n                res.Add(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n            }\n        }\n        return res;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008c] in <ad8a42111c1a45f092e5381d6380b313>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ad8a42111c1a45f092e5381d6380b313>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0008c] in <ad8a42111c1a45f092e5381d6380b313>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <ad8a42111c1a45f092e5381d6380b313>:0 \n"
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        long a = 1;\n        long b = 3;\n        long c = 2;\n        long d\
    \ = 0;\n        result.Add(a);\n        result.Add(b);\n        result.Add(c);\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           d = 1 + i / 2;\n            } else {\n                d = a + b +\
    \ c;\n            }\n            a = b;\n            b = c;\n            c = d;\n\
    \            result.Add(d);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c25b0b96bc244e3d907771c021af0002>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c25b0b96bc244e3d907771c021af0002>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            result.Add(i % 2 == 0 ? 1 + i\
    \ / 2 : result[i - 1] + result[i - 2] + result[i + 1]);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003f] in <50b6eada2be742968d59158cd5ec2dc7>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <50b6eada2be742968d59158cd5ec2dc7>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0003f] in <50b6eada2be742968d59158cd5ec2dc7>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <50b6eada2be742968d59158cd5ec2dc7>:0 \n"
  stdout: ''
  timestamp: 1659794410
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (long i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n        \
    \        result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <dfb4feb452f0440194a0304ffdfea0ec>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        if (n == 0) {\n            return result;\n        }\n        result.Add(1);\n\
    \        if (n == 1) {\n            return result;\n        }\n        result.Add(3);\n\
    \        if (n == 2) {\n            return result;\n        }\n        result.Add(2);\n\
    \        if (n == 3) {\n            return result;\n        }\n        for (int\
    \ i = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[i - 1] +\
    \ result[i - 2] + result[i - 4]);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <090d89665a6944cbbdea06676ba45beb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <090d89665a6944cbbdea06676ba45beb>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.Tri (System.Int64 n) [0x0008d] in <090d89"
  stdout: ''
  timestamp: 1659794411
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        // Your code goes here.\n\
    \        return null;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0001e] in <5f3cbc4f56204d9383a447e499a20022>:0\
    \ \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <b33b849be81444b4bb6e2b2960074ada>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <b33b849be81444b4bb6e2b2960074ada>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        for (int i = 0; i <= n; i++) {\n            result.Add(tri(i));\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbv1150gw.cs(28,24): error CS0103: The name ''tri'' does not exist in the
    current context

    '
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (long i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n        \
    \        result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Tri((3L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n    Debug.Assert(Tri((5L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L}))));\n\
    \    Debug.Assert(Tri((6L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L}))));\n    Debug.Assert(Tri((8L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L}))));\n    Debug.Assert(Tri((9L)).Equals((new List<long>(new\
    \ long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L,\
    \ (long)24L, (long)5L, (long)35L}))));\n    Debug.Assert(Tri((20L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L, (long)24L, (long)5L, (long)35L, (long)6L, (long)48L, (long)7L, (long)63L,\
    \ (long)8L, (long)80L, (long)9L, (long)99L, (long)10L, (long)120L, (long)11L}))));\n\
    \    Debug.Assert(Tri((0L)).Equals((new List<long>(new long[]{(long)1L}))));\n\
    \    Debug.Assert(Tri((1L)).Equals((new List<long>(new long[]{(long)1L, (long)3L}))));\n\
    \    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <7b22c08098674620a3bec71960c4799b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <7b22c08098674620a3bec71960c4799b>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x0005c] in <7b22c08098674620a3bec71960c4799b>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <7b22c08098674620a3bec71960c4799b>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply\
    \ by mathematicians in \n    // the last couple centuries. However, what people\
    \ don't know is Tribonacci sequence.\n    // Tribonacci sequence is defined by\
    \ the recurrence:\n    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n\
    \    // tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For\
    \ example:\n    // tri(2) = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3)\
    \ = tri(2) + tri(1) + tri(4)\n    // = 2 + 3 + 3 = 8 \n    // You are given a\
    \ non-negative integer number n, you have to a return a list of the \n    // first\
    \ n + 1 numbers of the Tribonacci sequence.\n    // Examples:\n    // >>> Tri((3L))\n\
    \    // (new List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n\
    \    public static List<long> Tri(long n) {\n        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
    \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
    \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
    \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
    \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
    \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
    \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
    \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
    \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
    \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
    \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new\
    \ List<long>(new long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out\
    \ of range. Must be non-negative and less than the size of the collection.\nParameter\
    \ name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was\
    \ out of range. Must be non-negative and less than the size of the collection.\n\
    Parameter name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32\
    \ index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.Tri\
    \ (System.Int64 n) [0x00056] in <8812a55774e5435f875189e3af591dbe>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00001] in <8812a55774e5435f875189e3af591dbe>:0 \n"
  stdout: ''
  timestamp: 1659794409
