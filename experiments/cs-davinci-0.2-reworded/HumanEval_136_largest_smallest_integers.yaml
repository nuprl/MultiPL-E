name: HumanEval_136_largest_smallest_integers
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that returns a tuple (a, b), where 'a' is\n\
  \    // the largest of negative integers, and 'b' is the smallest\n    // of positive\
  \ integers in a list.\n    // If there is no negative or positive integers, return\
  \ them as null.\n    // Examples:\n    // >>> LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L})))\n    //\
  \ Tuple.Create((Nullable<long>)null, 1L)\n    // >>> LargestSmallestIntegers((new\
  \ List<long>()))\n    // Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n\
  \    // >>> LargestSmallestIntegers((new List<long>(new long[]{(long)0L})))\n  \
  \  // Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n    public static\
  \ Tuple<Nullable<long>, Nullable<long>> LargestSmallestIntegers(List<long> lst)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestSmallestIntegers((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L,\
  \ (long)4L, (long)1L, (long)3L, (long)5L, (long)7L, (long)0L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)-2L}))).Equals(Tuple.Create(-2L,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)4L,\
  \ (long)5L, (long)3L, (long)6L, (long)2L, (long)7L, (long)-7L}))).Equals(Tuple.Create(-7L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)7L,\
  \ (long)3L, (long)8L, (long)4L, (long)9L, (long)2L, (long)5L, (long)-9L}))).Equals(Tuple.Create(-9L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>())).Equals(Tuple.Create((Nullable<long>)null,\
  \ (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)0L}))).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L, (long)0L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)-100L, (long)1L}))).Equals(Tuple.Create(-3L,\
  \ 1L)));\n    }\n\n}\n"
completions: ['        return Tuple.Create(lst.Where(x => x < 0).DefaultIfEmpty().Max(),
    lst.Where(x => x > 0).DefaultIfEmpty().Min());', "        long? largestNegative\
    \ = null;\n        long? smallestPositive = null;\n        foreach (long item\
    \ in lst) {\n            if (item < 0) {\n                if (largestNegative\
    \ == null || item > largestNegative) {\n                    largestNegative =\
    \ item;\n                }\n            } else if (item > 0) {\n             \
    \   if (smallestPositive == null || item < smallestPositive) {\n             \
    \       smallestPositive = item;\n                }\n            }\n        }\n\
    \        return Tuple.Create(largestNegative, smallestPositive);", "        long\
    \ max = 0;\n        long min = 0;\n        bool maxSet = false;\n        bool\
    \ minSet = false;\n        foreach (long i in lst) {\n            if (i < 0) {\n\
    \                if (!maxSet) {\n                    max = i;\n              \
    \      maxSet = true;\n                } else if (i > max) {\n               \
    \     max = i;\n                }\n            } else if (i > 0) {\n         \
    \       if (!minSet) {\n                    min = i;\n                    minSet\
    \ = true;\n                } else if (i < min) {\n                    min = i;\n\
    \                }\n            }\n        }\n        if (maxSet) {\n        \
    \    if (minSet) {\n                return Tuple.Create((Nullable<long>)max, min);\n\
    \            } else {\n                return Tuple.Create((Nullable<long>)max,\
    \ (Nullable<long>)null);\n            }\n        } else {\n            if (minSet)\
    \ {\n                return Tuple.Create((Nullable<long>)null, min);\n       \
    \     } else {\n                return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \            }\n        }", "        // Write your code here\n        return null;",
  "        Nullable<long> largest = null;\n        Nullable<long> smallest = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largest == null || i > largest) {\n                    largest = i;\n  \
    \              }\n            } else if (i > 0) {\n                if (smallest\
    \ == null || i < smallest) {\n                    smallest = i;\n            \
    \    }\n            }\n        }\n        return Tuple.Create(largest, smallest);",
  "        var negative = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n        var\
    \ positive = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n        return Tuple.Create(negative,\
    \ positive);", "        // Your code goes here\n        return null;", "     \
    \   var min = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n        var max =\
    \ lst.Where(x => x < 0).DefaultIfEmpty().Max();\n        return Tuple.Create(max,\
    \ min);", "        long? largest = null;\n        long? smallest = null;\n   \
    \     foreach (long i in lst) {\n            if (i < 0) {\n                if\
    \ (largest == null || i > largest) {\n                    largest = i;\n     \
    \           }\n            } else if (i > 0) {\n                if (smallest ==\
    \ null || i < smallest) {\n                    smallest = i;\n               \
    \ }\n            }\n        }\n        return Tuple.Create(largest, smallest);",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallestPositive == null || i < smallestPositive) {\n                    smallestPositive\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        long? min = null;\n        long? max = null;\n\
    \        foreach (long i in lst) {\n            if (i > 0) {\n               \
    \ if (min == null || i < min) {\n                    min = i;\n              \
    \  }\n            } else if (i < 0) {\n                if (max == null || i >\
    \ max) {\n                    max = i;\n                }\n            }\n   \
    \     }\n        return Tuple.Create(max, min);", "        long? largestNegative\
    \ = null;\n        long? smallestPositive = null;\n        foreach (long item\
    \ in lst) {\n            if (item < 0) {\n                if (largestNegative\
    \ == null || item > largestNegative) {\n                    largestNegative =\
    \ item;\n                }\n            } else if (item > 0) {\n             \
    \   if (smallestPositive == null || item < smallestPositive) {\n             \
    \       smallestPositive = item;\n                }\n            }\n        }\n\
    \        return Tuple.Create(largestNegative, smallestPositive);", "        long?\
    \ largestNegative = null;\n        long? smallestPositive = null;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (largestNegative\
    \ == null || i > largestNegative) {\n                    largestNegative = i;\n\
    \                }\n            } else if (i > 0) {\n                if (smallestPositive\
    \ == null || i < smallestPositive) {\n                    smallestPositive = i;\n\
    \                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        long? largestNegative = null;\n        long? smallestPositive\
    \ = null;\n        foreach (long item in lst) {\n            if (item < 0) {\n\
    \                if (largestNegative == null || item > largestNegative) {\n  \
    \                  largestNegative = item;\n                }\n            } else\
    \ if (item > 0) {\n                if (smallestPositive == null || item < smallestPositive)\
    \ {\n                    smallestPositive = item;\n                }\n       \
    \     }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallestPositive == null || i < smallestPositive) {\n                    smallestPositive\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        // Your code goes here\n        return null;",
  "        // Your code goes here\n        return null;", "        long? min = null;\n\
    \        long? max = null;\n        foreach (long i in lst) {\n            if\
    \ (i > 0) {\n                if (min == null || i < min) {\n                 \
    \   min = i;\n                }\n            } else if (i < 0) {\n           \
    \     if (max == null || i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return Tuple.Create(max, min);", " \
    \       long? min = null;\n        long? max = null;\n        foreach (long i\
    \ in lst) {\n            if (i > 0) {\n                if (min == null || i <\
    \ min) {\n                    min = i;\n                }\n            } else\
    \ if (i < 0) {\n                if (max == null || i > max) {\n              \
    \      max = i;\n                }\n            }\n        }\n        return Tuple.Create(max,\
    \ min);", "        // your code here\n        return null;", "        // Your\
    \ code goes here\n        return null;", "        // Your code here\n        return\
    \ null;", "        long? max = null;\n        long? min = null;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (max == null\
    \ || i > max) {\n                    max = i;\n                }\n           \
    \ } else if (i > 0) {\n                if (min == null || i < min) {\n       \
    \             min = i;\n                }\n            }\n        }\n        return\
    \ Tuple.Create(max, min);", "        long? min = null;\n        long? max = null;\n\
    \        foreach (long i in lst) {\n            if (i > 0) {\n               \
    \ if (min == null || i < min) {\n                    min = i;\n              \
    \  }\n            } else if (i < 0) {\n                if (max == null || i >\
    \ max) {\n                    max = i;\n                }\n            }\n   \
    \     }\n        return Tuple.Create(max, min);", "        // Your code goes here.\n\
    \        return null;", "        // Your code goes here.\n        return null;",
  "        // Your code goes here.\n        return null;", "        long? maxNeg =\
    \ null;\n        long? minPos = null;\n        foreach (long n in lst) {\n   \
    \         if (n < 0) {\n                if (maxNeg == null || n > maxNeg) {\n\
    \                    maxNeg = n;\n                }\n            } else if (n\
    \ > 0) {\n                if (minPos == null || n < minPos) {\n              \
    \      minPos = n;\n                }\n            }\n        }\n        return\
    \ Tuple.Create(maxNeg, minPos);", "        // Your code goes here\n        long\
    \ max = 0;\n        long min = 0;\n        bool maxSet = false;\n        bool\
    \ minSet = false;\n        foreach (long i in lst) {\n            if (i < 0) {\n\
    \                if (!maxSet) {\n                    max = i;\n              \
    \      maxSet = true;\n                } else if (i > max) {\n               \
    \     max = i;\n                }\n            } else if (i > 0) {\n         \
    \       if (!minSet) {\n                    min = i;\n                    minSet\
    \ = true;\n                } else if (i < min) {\n                    min = i;\n\
    \                }\n            }\n        }\n        return Tuple.Create(maxSet\
    \ ? (Nullable<long>)max : (Nullable<long>)null, minSet ? (Nullable<long>)min :\
    \ (Nullable<long>)null);", "        // Your code goes here\n        return null;",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallestPositive == null || i < smallestPositive) {\n                    smallestPositive\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        // Your code goes here\n        return null;",
  "        // Your code goes here\n        return null;", "        // Write your code\
    \ here\n        return null;", "        // Your code here\n        return null;",
  "        // Your code goes here\n        return null;", "        long? largestNegative\
    \ = null;\n        long? smallestPositive = null;\n        foreach (long i in\
    \ lst) {\n            if (i < 0) {\n                if (largestNegative == null\
    \ || i > largestNegative) {\n                    largestNegative = i;\n      \
    \          }\n            } else if (i > 0) {\n                if (smallestPositive\
    \ == null || i < smallestPositive) {\n                    smallestPositive = i;\n\
    \                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        // Your code here\n        return null;", "  \
    \      long? maxNeg = null;\n        long? minPos = null;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (maxNeg == null ||\
    \ i > maxNeg) {\n                    maxNeg = i;\n                }\n        \
    \    } else if (i > 0) {\n                if (minPos == null || i < minPos) {\n\
    \                    minPos = i;\n                }\n            }\n        }\n\
    \        return Tuple.Create(maxNeg, minPos);", "        long? max = null;\n \
    \       long? min = null;\n        foreach (long i in lst) {\n            if (i\
    \ < 0) {\n                if (max == null || i > max) {\n                    max\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (min == null || i < min) {\n                    min = i;\n                }\n\
    \            }\n        }\n        return Tuple.Create(max, min);", "        //\
    \ Your code goes here\n        return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);",
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here\n        return null;", "        long? maxNeg = null;\n        long? minPos\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (maxNeg == null || i > maxNeg) {\n                    maxNeg =\
    \ i;\n                }\n            } else if (i > 0) {\n                if (minPos\
    \ == null || i < minPos) {\n                    minPos = i;\n                }\n\
    \            }\n        }\n        return Tuple.Create(maxNeg, minPos);", "  \
    \      var min = lst.Where(x => x > 0).Min();\n        var max = lst.Where(x =>\
    \ x < 0).Max();\n        return Tuple.Create(max, min);", "        // Your code\
    \ goes here\n        return null;", "        long? largestNegative = null;\n \
    \       long? smallestPositive = null;\n        foreach (long item in lst) {\n\
    \            if (item < 0) {\n                if (largestNegative == null || item\
    \ > largestNegative) {\n                    largestNegative = item;\n        \
    \        }\n            } else if (item > 0) {\n                if (smallestPositive\
    \ == null || item < smallestPositive) {\n                    smallestPositive\
    \ = item;\n                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        long? maxNeg = null;\n        long? minPos = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (maxNeg == null || i > maxNeg) {\n                    maxNeg = i;\n     \
    \           }\n            } else if (i > 0) {\n                if (minPos ==\
    \ null || i < minPos) {\n                    minPos = i;\n                }\n\
    \            }\n        }\n        return Tuple.Create(maxNeg, minPos);", "  \
    \      // your code here\n        return null;", "        long largestNegative\
    \ = 0;\n        long smallestPositive = 0;\n        bool foundNegative = false;\n\
    \        bool foundPositive = false;\n        foreach (long i in lst) {\n    \
    \        if (i < 0) {\n                if (!foundNegative) {\n               \
    \     largestNegative = i;\n                    foundNegative = true;\n      \
    \          } else if (i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (!foundPositive) {\n                    smallestPositive = i;\n            \
    \        foundPositive = true;\n                } else if (i < smallestPositive)\
    \ {\n                    smallestPositive = i;\n                }\n          \
    \  }\n        }\n        return Tuple.Create((Nullable<long>)largestNegative,\
    \ (Nullable<long>)smallestPositive);", "        long? min = null;\n        long?\
    \ max = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n \
    \               if (max == null || i > max) {\n                    max = i;\n\
    \                }\n            } else if (i > 0) {\n                if (min ==\
    \ null || i < min) {\n                    min = i;\n                }\n      \
    \      }\n        }\n        return Tuple.Create(max, min);", "        var positive\
    \ = lst.Where(x => x > 0).OrderBy(x => x).ToList();\n        var negative = lst.Where(x\
    \ => x < 0).OrderByDescending(x => x).ToList();\n        return Tuple.Create(negative.Count\
    \ > 0 ? (Nullable<long>)negative[0] : (Nullable<long>)null, positive.Count > 0\
    \ ? (Nullable<long>)positive[0] : (Nullable<long>)null);", "        // Your code\
    \ goes here\n        return null;", "        long? maxNeg = null;\n        long?\
    \ minPos = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n\
    \                if (maxNeg == null || i > maxNeg) {\n                    maxNeg\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (minPos == null || i < minPos) {\n                    minPos = i;\n        \
    \        }\n            }\n        }\n        return Tuple.Create(maxNeg, minPos);",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long item in lst) {\n            if (item < 0) {\n         \
    \       if (largestNegative == null || item > largestNegative) {\n           \
    \         largestNegative = item;\n                }\n            } else if (item\
    \ > 0) {\n                if (smallestPositive == null || item < smallestPositive)\
    \ {\n                    smallestPositive = item;\n                }\n       \
    \     }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        // Write your code here\n        return null;", "        // Your code goes\
    \ here\n        return null;", "        long? largestNegative = null;\n      \
    \  long? smallestPositive = null;\n        foreach (long i in lst) {\n       \
    \     if (i < 0) {\n                if (largestNegative == null || i > largestNegative)\
    \ {\n                    largestNegative = i;\n                }\n           \
    \ } else if (i > 0) {\n                if (smallestPositive == null || i < smallestPositive)\
    \ {\n                    smallestPositive = i;\n                }\n          \
    \  }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        // Your code goes here\n        return null;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here\n        long\
    \ max = 0;\n        long min = 0;\n        bool maxSet = false;\n        bool\
    \ minSet = false;\n        foreach (long i in lst) {\n            if (i < 0) {\n\
    \                if (!maxSet) {\n                    max = i;\n              \
    \      maxSet = true;\n                } else if (i > max) {\n               \
    \     max = i;\n                }\n            } else if (i > 0) {\n         \
    \       if (!minSet) {\n                    min = i;\n                    minSet\
    \ = true;\n                } else if (i < min) {\n                    min = i;\n\
    \                }\n            }\n        }\n        return Tuple.Create((Nullable<long>)max,\
    \ (Nullable<long>)min);", "        Nullable<long> largest = null;\n        Nullable<long>\
    \ smallest = null;\n        foreach (long i in lst) {\n            if (i < 0)\
    \ {\n                if (largest == null || i > largest) {\n                 \
    \   largest = i;\n                }\n            } else if (i > 0) {\n       \
    \         if (smallest == null || i < smallest) {\n                    smallest\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(largest,\
    \ smallest);", "        // Your code here\n        return null;", "        long?\
    \ maxNeg = null;\n        long? minPos = null;\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                if (maxNeg == null || i > maxNeg)\
    \ {\n                    maxNeg = i;\n                }\n            } else if\
    \ (i > 0) {\n                if (minPos == null || i < minPos) {\n           \
    \         minPos = i;\n                }\n            }\n        }\n        return\
    \ Tuple.Create(maxNeg, minPos);", "        // Your code goes here.\n        return\
    \ null;", "        // Your code here\n        return null;", '        return Tuple.Create(lst.Where(x
    => x < 0).DefaultIfEmpty().Max(), lst.Where(x => x > 0).DefaultIfEmpty().Min());',
  "        // Your code goes here\n        return null;", "        // Your code here\n\
    \        return null;", "        long? largestNegative = null;\n        long?\
    \ smallestPositive = null;\n        foreach (long num in lst) {\n            if\
    \ (num < 0) {\n                if (largestNegative == null || num > largestNegative)\
    \ {\n                    largestNegative = num;\n                }\n         \
    \   } else if (num > 0) {\n                if (smallestPositive == null || num\
    \ < smallestPositive) {\n                    smallestPositive = num;\n       \
    \         }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        long? largestNegative = null;\n        long? smallestPositive\
    \ = null;\n        foreach (long l in lst) {\n            if (l < 0) {\n     \
    \           if (largestNegative == null || l > largestNegative) {\n          \
    \          largestNegative = l;\n                }\n            } else if (l >\
    \ 0) {\n                if (smallestPositive == null || l < smallestPositive)\
    \ {\n                    smallestPositive = l;\n                }\n          \
    \  }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        // Your code goes here.\n        return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);", "        // Your code goes here\n        return null;",
  "        var min = lst.Where(x => x > 0).Min();\n        var max = lst.Where(x =>\
    \ x < 0).Max();\n        return Tuple.Create(max, min);", "        // Your code\
    \ here\n        return null;", "        // Your code goes here.\n        return\
    \ null;", "        long? largestNegative = null;\n        long? smallestPositive\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (largestNegative == null || i > largestNegative) {\n          \
    \          largestNegative = i;\n                }\n            } else if (i >\
    \ 0) {\n                if (smallestPositive == null || i < smallestPositive)\
    \ {\n                    smallestPositive = i;\n                }\n          \
    \  }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        long? largest = null;\n        long? smallest = null;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (largest ==\
    \ null || i > largest) {\n                    largest = i;\n                }\n\
    \            } else if (i > 0) {\n                if (smallest == null || i <\
    \ smallest) {\n                    smallest = i;\n                }\n        \
    \    }\n        }\n        return Tuple.Create(largest, smallest);", "       \
    \ long? max = null;\n        long? min = null;\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                if (max == null || i > max) {\n\
    \                    max = i;\n                }\n            } else if (i > 0)\
    \ {\n                if (min == null || i < min) {\n                    min =\
    \ i;\n                }\n            }\n        }\n        return Tuple.Create(max,\
    \ min);", "        Nullable<long> largest = null;\n        Nullable<long> smallest\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (largest == null || i > largest) {\n                    largest\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallest == null || i < smallest) {\n                    smallest = i;\n  \
    \              }\n            }\n        }\n        return Tuple.Create(largest,\
    \ smallest);", '        return Tuple.Create(lst.Where(x => x < 0).DefaultIfEmpty().Max(),
    lst.Where(x => x > 0).DefaultIfEmpty().Min());', "        if (lst.Count == 0)\
    \ {\n            return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        }\n        long maxNeg = long.MinValue;\n        long minPos = long.MaxValue;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (i > maxNeg) {\n                    maxNeg = i;\n                }\n    \
    \        } else if (i > 0) {\n                if (i < minPos) {\n            \
    \        minPos = i;\n                }\n            }\n        }\n        if\
    \ (maxNeg == long.MinValue) {\n            maxNeg = (Nullable<long>)null;\n  \
    \      }\n        if (minPos == long.MaxValue) {\n            minPos = (Nullable<long>)null;\n\
    \        }\n        return Tuple.Create(maxNeg, minPos);", "        // Your code\
    \ goes here\n        long max = long.MinValue;\n        long min = long.MaxValue;\n\
    \        bool hasNeg = false;\n        bool hasPos = false;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                hasNeg = true;\n    \
    \            if (i > max) {\n                    max = i;\n                }\n\
    \            } else if (i > 0) {\n                hasPos = true;\n           \
    \     if (i < min) {\n                    min = i;\n                }\n      \
    \      }\n        }\n        if (hasNeg) {\n            if (hasPos) {\n      \
    \          return Tuple.Create((Nullable<long>)max, (Nullable<long>)min);\n  \
    \          } else {\n                return Tuple.Create((Nullable<long>)max,\
    \ (Nullable<long>)null);\n            }\n        } else {\n            if (hasPos)\
    \ {\n                return Tuple.Create((Nullable<long>)null, (Nullable<long>)min);\n\
    \            } else {\n                return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);\n            }\n        }", "        // Your code goes\
    \ here.\n        return null;", "        long? min = null;\n        long? max\
    \ = null;\n        foreach (long i in lst) {\n            if (i > 0) {\n     \
    \           if (min == null || i < min) {\n                    min = i;\n    \
    \            }\n            } else if (i < 0) {\n                if (max == null\
    \ || i > max) {\n                    max = i;\n                }\n           \
    \ }\n        }\n        return Tuple.Create(max, min);", "        long? largest\
    \ = null;\n        long? smallest = null;\n        foreach (long i in lst) {\n\
    \            if (i < 0) {\n                if (largest == null || i > largest)\
    \ {\n                    largest = i;\n                }\n            } else if\
    \ (i > 0) {\n                if (smallest == null || i < smallest) {\n       \
    \             smallest = i;\n                }\n            }\n        }\n   \
    \     return Tuple.Create(largest, smallest);", "        // Your code goes here\n\
    \        return null;", "        long? min = null;\n        long? max = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (max == null || i > max) {\n                    max = i;\n              \
    \  }\n            } else if (i > 0) {\n                if (min == null || i <\
    \ min) {\n                    min = i;\n                }\n            }\n   \
    \     }\n        return Tuple.Create(max, min);", "        // Your code goes here\n\
    \        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallestPositive == null || i < smallestPositive) {\n                    smallestPositive\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        // Your code goes here\n        long? largestNegative\
    \ = null;\n        long? smallestPositive = null;\n        foreach (long i in\
    \ lst) {\n            if (i < 0) {\n                if (largestNegative == null\
    \ || i > largestNegative) {\n                    largestNegative = i;\n      \
    \          }\n            } else if (i > 0) {\n                if (smallestPositive\
    \ == null || i < smallestPositive) {\n                    smallestPositive = i;\n\
    \                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        // Your code goes here\n        return null;",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallestPositive == null || i < smallestPositive) {\n                    smallestPositive\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        long? a = null;\n        long? b = null;\n   \
    \     foreach (long x in lst) {\n            if (x < 0) {\n                if\
    \ (a == null || x > a) {\n                    a = x;\n                }\n    \
    \        } else if (x > 0) {\n                if (b == null || x < b) {\n    \
    \                b = x;\n                }\n            }\n        }\n       \
    \ return Tuple.Create(a, b);", "        long? largest = null;\n        long? smallest\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (largest == null || i > largest) {\n                    largest\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallest == null || i < smallest) {\n                    smallest = i;\n  \
    \              }\n            }\n        }\n        return Tuple.Create(largest,\
    \ smallest);", "        // Your code goes here\n        return null;", "     \
    \   // Write your code here\n        return null;", "        long? maxNeg = null;\n\
    \        long? minPos = null;\n        foreach (long i in lst) {\n           \
    \ if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n        \
    \            maxNeg = i;\n                }\n            } else if (i > 0) {\n\
    \                if (minPos == null || i < minPos) {\n                    minPos\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(maxNeg,\
    \ minPos);", "        // Write your code here\n        return null;", "      \
    \  // your code here\n        return null;", "        long max = long.MinValue;\n\
    \        long min = long.MaxValue;\n        foreach (long i in lst) {\n      \
    \      if (i > 0 && i < min) {\n                min = i;\n            }\n    \
    \        if (i < 0 && i > max) {\n                max = i;\n            }\n  \
    \      }\n        if (min == long.MaxValue) {\n            min = (Nullable<long>)null;\n\
    \        }\n        if (max == long.MinValue) {\n            max = (Nullable<long>)null;\n\
    \        }\n        return Tuple.Create(max, min);", "        // Write your code\
    \ here\n        return null;", "        // Your code goes here\n        long?\
    \ max = null;\n        long? min = null;\n        foreach (long i in lst) {\n\
    \            if (i < 0) {\n                if (max == null || i > max) {\n   \
    \                 max = i;\n                }\n            } else if (i > 0) {\n\
    \                if (min == null || i < min) {\n                    min = i;\n\
    \                }\n            }\n        }\n        return Tuple.Create(max,\
    \ min);", "        // Your code goes here.\n        long maxNeg = long.MinValue;\n\
    \        long minPos = long.MaxValue;\n        foreach (long i in lst) {\n   \
    \         if (i < 0 && i > maxNeg) {\n                maxNeg = i;\n          \
    \  }\n            if (i > 0 && i < minPos) {\n                minPos = i;\n  \
    \          }\n        }\n        if (maxNeg == long.MinValue) {\n            maxNeg\
    \ = (Nullable<long>)null;\n        }\n        if (minPos == long.MaxValue) {\n\
    \            minPos = (Nullable<long>)null;\n        }\n        return Tuple.Create(maxNeg,\
    \ minPos);", "        long? max = null;\n        long? min = null;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (max == null\
    \ || i > max) {\n                    max = i;\n                }\n           \
    \ } else if (i > 0) {\n                if (min == null || i < min) {\n       \
    \             min = i;\n                }\n            }\n        }\n        return\
    \ Tuple.Create(max, min);", "        long? maxNeg = null;\n        long? minPos\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (maxNeg == null || i > maxNeg) {\n                    maxNeg =\
    \ i;\n                }\n            } else if (i > 0) {\n                if (minPos\
    \ == null || i < minPos) {\n                    minPos = i;\n                }\n\
    \            }\n        }\n        return Tuple.Create(maxNeg, minPos);", "  \
    \      // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return null;", "        long? maxNegative = null;\n        long?\
    \ minPositive = null;\n        foreach (long i in lst) {\n            if (i <\
    \ 0) {\n                if (maxNegative == null || i > maxNegative) {\n      \
    \              maxNegative = i;\n                }\n            } else if (i >\
    \ 0) {\n                if (minPositive == null || i < minPositive) {\n      \
    \              minPositive = i;\n                }\n            }\n        }\n\
    \        return Tuple.Create(maxNegative, minPositive);", "        // Your code\
    \ goes here\n        return null;", "        long? maxNeg = null;\n        long?\
    \ minPos = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n\
    \                if (maxNeg == null || i > maxNeg) {\n                    maxNeg\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (minPos == null || i < minPos) {\n                    minPos = i;\n        \
    \        }\n            }\n        }\n        return Tuple.Create(maxNeg, minPos);",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallestPositive == null || i < smallestPositive) {\n                    smallestPositive\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        long? maxNegative = null;\n        long? minPositive\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (maxNegative == null || i > maxNegative) {\n                  \
    \  maxNegative = i;\n                }\n            } else if (i > 0) {\n    \
    \            if (minPositive == null || i < minPositive) {\n                 \
    \   minPositive = i;\n                }\n            }\n        }\n        return\
    \ Tuple.Create(maxNegative, minPositive);", "        long? largestNegative = null;\n\
    \        long? smallestPositive = null;\n        foreach (long i in lst) {\n \
    \           if (i < 0) {\n                if (largestNegative == null || i > largestNegative)\
    \ {\n                    largestNegative = i;\n                }\n           \
    \ } else if (i > 0) {\n                if (smallestPositive == null || i < smallestPositive)\
    \ {\n                    smallestPositive = i;\n                }\n          \
    \  }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        // Your code goes here.\n        return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);", "        var min = lst.Where(x => x > 0).Min();\n \
    \       var max = lst.Where(x => x < 0).Max();\n        return Tuple.Create(max,\
    \ min);", "        // Your code goes here\n        return null;", "        //\
    \ Your code goes here\n        long max = 0;\n        long min = 0;\n        bool\
    \ max_set = false;\n        bool min_set = false;\n        foreach (long i in\
    \ lst) {\n            if (i < 0) {\n                if (!max_set) {\n        \
    \            max = i;\n                    max_set = true;\n                }\
    \ else if (i > max) {\n                    max = i;\n                }\n     \
    \       } else if (i > 0) {\n                if (!min_set) {\n               \
    \     min = i;\n                    min_set = true;\n                } else if\
    \ (i < min) {\n                    min = i;\n                }\n            }\n\
    \        }\n        return Tuple.Create((Nullable<long>)max, (Nullable<long>)min);",
  "        long? min = null;\n        long? max = null;\n        foreach (long i in\
    \ lst) {\n            if (i > 0) {\n                if (min == null || i < min)\
    \ {\n                    min = i;\n                }\n            } else if (i\
    \ < 0) {\n                if (max == null || i > max) {\n                    max\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(max,\
    \ min);", "        // your code here\n        long? maxNeg = null;\n        long?\
    \ minPos = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n\
    \                if (maxNeg == null || i > maxNeg) {\n                    maxNeg\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (minPos == null || i < minPos) {\n                    minPos = i;\n        \
    \        }\n            }\n        }\n        return Tuple.Create(maxNeg, minPos);",
  "        var max = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n        var min\
    \ = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n        return Tuple.Create(max,\
    \ min);", "        Nullable<long> a = null;\n        Nullable<long> b = null;\n\
    \        foreach (long x in lst) {\n            if (x < 0) {\n               \
    \ if (a == null || x > a) {\n                    a = x;\n                }\n \
    \           } else if (x > 0) {\n                if (b == null || x < b) {\n \
    \                   b = x;\n                }\n            }\n        }\n    \
    \    return Tuple.Create(a, b);", "        long? min = null;\n        long? max\
    \ = null;\n        foreach (long i in lst) {\n            if (i > 0) {\n     \
    \           if (min == null || i < min) {\n                    min = i;\n    \
    \            }\n            } else if (i < 0) {\n                if (max == null\
    \ || i > max) {\n                    max = i;\n                }\n           \
    \ }\n        }\n        return Tuple.Create(max, min);", "        long? largestNegative\
    \ = null;\n        long? smallestPositive = null;\n        foreach (long i in\
    \ lst) {\n            if (i < 0) {\n                if (largestNegative == null\
    \ || i > largestNegative) {\n                    largestNegative = i;\n      \
    \          }\n            } else if (i > 0) {\n                if (smallestPositive\
    \ == null || i < smallestPositive) {\n                    smallestPositive = i;\n\
    \                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        long? maxNeg = null;\n        long? minPos = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (maxNeg == null || i > maxNeg) {\n                    maxNeg = i;\n     \
    \           }\n            } else if (i > 0) {\n                if (minPos ==\
    \ null || i < minPos) {\n                    minPos = i;\n                }\n\
    \            }\n        }\n        return Tuple.Create(maxNeg, minPos);", "  \
    \      // Your code goes here.\n        return null;", "        // Your code goes\
    \ here\n        return null;", "        long? min = null;\n        long? max =\
    \ null;\n        foreach (long i in lst) {\n            if (i > 0) {\n       \
    \         if (min == null || i < min) {\n                    min = i;\n      \
    \          }\n            } else if (i < 0) {\n                if (max == null\
    \ || i > max) {\n                    max = i;\n                }\n           \
    \ }\n        }\n        return Tuple.Create(max, min);", "        var min = lst.Where(x\
    \ => x > 0).DefaultIfEmpty().Min();\n        var max = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n\
    \        return Tuple.Create(max, min);", "        long? maxNeg = null;\n    \
    \    long? minPos = null;\n        foreach (long i in lst) {\n            if (i\
    \ < 0) {\n                if (maxNeg == null || i > maxNeg) {\n              \
    \      maxNeg = i;\n                }\n            } else if (i > 0) {\n     \
    \           if (minPos == null || i < minPos) {\n                    minPos =\
    \ i;\n                }\n            }\n        }\n        return Tuple.Create(maxNeg,\
    \ minPos);", "        // Your code goes here\n        long maxNeg = long.MinValue;\n\
    \        long minPos = long.MaxValue;\n        foreach (long i in lst) {\n   \
    \         if (i < 0 && i > maxNeg) {\n                maxNeg = i;\n          \
    \  }\n            if (i > 0 && i < minPos) {\n                minPos = i;\n  \
    \          }\n        }\n        return Tuple.Create((Nullable<long>)maxNeg, (Nullable<long>)minPos);",
  "        // Your code goes here.\n        // You can add more classes to this project.\n\
    \        long min = long.MaxValue;\n        long max = long.MinValue;\n      \
    \  bool hasPositive = false;\n        bool hasNegative = false;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                hasNegative = true;\n\
    \                if (i > max) {\n                    max = i;\n              \
    \  }\n            } else if (i > 0) {\n                hasPositive = true;\n \
    \               if (i < min) {\n                    min = i;\n               \
    \ }\n            }\n        }\n        if (hasPositive) {\n            return\
    \ Tuple.Create((Nullable<long>)max, (Nullable<long>)min);\n        } else {\n\
    \            return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        }", "        // Your code here\n        return null;", "        // Your\
    \ code goes here\n        return null;", "        long? largest = null;\n    \
    \    long? smallest = null;\n        foreach (long i in lst) {\n            if\
    \ (i < 0) {\n                if (largest == null || i > largest) {\n         \
    \           largest = i;\n                }\n            } else if (i > 0) {\n\
    \                if (smallest == null || i < smallest) {\n                   \
    \ smallest = i;\n                }\n            }\n        }\n        return Tuple.Create(largest,\
    \ smallest);", '        throw new NotImplementedException();', "        // Your\
    \ code goes here\n        long? max = null;\n        long? min = null;\n     \
    \   foreach (long i in lst) {\n            if (i < 0) {\n                if (max\
    \ == null || i > max) {\n                    max = i;\n                }\n   \
    \         } else if (i > 0) {\n                if (min == null || i < min) {\n\
    \                    min = i;\n                }\n            }\n        }\n \
    \       return Tuple.Create(max, min);", "        // Your code goes here.\n  \
    \      return null;", "        var a = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n\
    \        var b = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n        return\
    \ Tuple.Create(a, b);", "        // Your code goes here.\n        return null;",
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here\n        return null;", '        return null;', "        long? maxNeg =\
    \ null;\n        long? minPos = null;\n        foreach (long i in lst) {\n   \
    \         if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n\
    \                    maxNeg = i;\n                }\n            } else if (i\
    \ > 0) {\n                if (minPos == null || i < minPos) {\n              \
    \      minPos = i;\n                }\n            }\n        }\n        return\
    \ Tuple.Create(maxNeg, minPos);", "        long max = long.MinValue;\n       \
    \ long min = long.MaxValue;\n        bool hasPositive = false;\n        bool hasNegative\
    \ = false;\n        foreach (long i in lst) {\n            if (i > 0) {\n    \
    \            hasPositive = true;\n                if (i < min) {\n           \
    \         min = i;\n                }\n            } else if (i < 0) {\n     \
    \           hasNegative = true;\n                if (i > max) {\n            \
    \        max = i;\n                }\n            }\n        }\n        if (hasPositive\
    \ && hasNegative) {\n            return Tuple.Create((Nullable<long>)max, (Nullable<long>)min);\n\
    \        } else if (hasPositive) {\n            return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)min);\n        } else if (hasNegative) {\n            return\
    \ Tuple.Create((Nullable<long>)max, (Nullable<long>)null);\n        } else {\n\
    \            return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \        }", "        // Your code goes here\n        return null;", "       \
    \ long? maxNeg = null;\n        long? minPos = null;\n        foreach (long i\
    \ in lst) {\n            if (i < 0) {\n                if (maxNeg == null || i\
    \ > maxNeg) {\n                    maxNeg = i;\n                }\n          \
    \  } else if (i > 0) {\n                if (minPos == null || i < minPos) {\n\
    \                    minPos = i;\n                }\n            }\n        }\n\
    \        return Tuple.Create(maxNeg, minPos);", "        long? maxNeg = null;\n\
    \        long? minPos = null;\n        foreach (long i in lst) {\n           \
    \ if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n        \
    \            maxNeg = i;\n                }\n            } else if (i > 0) {\n\
    \                if (minPos == null || i < minPos) {\n                    minPos\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(maxNeg,\
    \ minPos);", "        long? largestNegative = null;\n        long? smallestPositive\
    \ = null;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i]\
    \ < 0) {\n                if (largestNegative == null || lst[i] > largestNegative)\
    \ {\n                    largestNegative = lst[i];\n                }\n      \
    \      } else if (lst[i] > 0) {\n                if (smallestPositive == null\
    \ || lst[i] < smallestPositive) {\n                    smallestPositive = lst[i];\n\
    \                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        // Your code goes here.\n        return Tuple.Create((Nullable<long>)null,\
    \ (Nullable<long>)null);", '        return Tuple.Create((Nullable<long>)null,
    (Nullable<long>)null);', "        long? largestNegative = null;\n        long?\
    \ smallestPositive = null;\n        foreach (long l in lst) {\n            if\
    \ (l < 0) {\n                if (largestNegative == null || l > largestNegative)\
    \ {\n                    largestNegative = l;\n                }\n           \
    \ } else if (l > 0) {\n                if (smallestPositive == null || l < smallestPositive)\
    \ {\n                    smallestPositive = l;\n                }\n          \
    \  }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        // Your code goes here\n        return null;", "        // Your code here\n\
    \        return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);", " \
    \       // Your code goes here\n        return null;", "        // Your code goes\
    \ here\n        return null;", "        long? largest = null;\n        long? smallest\
    \ = null;\n        foreach (long item in lst) {\n            if (item < 0) {\n\
    \                if (largest == null || item > largest) {\n                  \
    \  largest = item;\n                }\n            } else if (item > 0) {\n  \
    \              if (smallest == null || item < smallest) {\n                  \
    \  smallest = item;\n                }\n            }\n        }\n        return\
    \ Tuple.Create(largest, smallest);", '        return new Tuple<Nullable<long>,
    Nullable<long>>(null, null);', '        return Tuple.Create((Nullable<long>)null,
    (Nullable<long>)null);', "        // Your code goes here.\n        long? largest\
    \ = null;\n        long? smallest = null;\n        foreach (long i in lst) {\n\
    \            if (i < 0) {\n                if (largest == null || i > largest)\
    \ {\n                    largest = i;\n                }\n            } else if\
    \ (i > 0) {\n                if (smallest == null || i < smallest) {\n       \
    \             smallest = i;\n                }\n            }\n        }\n   \
    \     return Tuple.Create(largest, smallest);", "        // Your code goes here\n\
    \        return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);", " \
    \       // Your code goes here.\n        // You can add additional classes/methods.\n\
    \        return null;", "        long? largestNegative = null;\n        long?\
    \ smallestPositive = null;\n        foreach (long i in lst) {\n            if\
    \ (i < 0) {\n                if (largestNegative == null || i > largestNegative)\
    \ {\n                    largestNegative = i;\n                }\n           \
    \ } else if (i > 0) {\n                if (smallestPositive == null || i < smallestPositive)\
    \ {\n                    smallestPositive = i;\n                }\n          \
    \  }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  '        return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);', "  \
    \      long? maxNeg = null;\n        long? minPos = null;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (maxNeg == null ||\
    \ i > maxNeg) {\n                    maxNeg = i;\n                }\n        \
    \    } else if (i > 0) {\n                if (minPos == null || i < minPos) {\n\
    \                    minPos = i;\n                }\n            }\n        }\n\
    \        return Tuple.Create(maxNeg, minPos);", '        throw new NotImplementedException();',
  "        long? maxNeg = null;\n        long? minPos = null;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) {\n                if (maxNeg == null ||\
    \ i > maxNeg) {\n                    maxNeg = i;\n                }\n        \
    \    } else if (i > 0) {\n                if (minPos == null || i < minPos) {\n\
    \                    minPos = i;\n                }\n            }\n        }\n\
    \        return Tuple.Create(maxNeg, minPos);", "        // Your code goes here.\n\
    \        return null;", "        // Write your code here.\n        Nullable<long>\
    \ largestNegative = null;\n        Nullable<long> smallestPositive = null;\n \
    \       foreach (long i in lst) {\n            if (i < 0) {\n                if\
    \ (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallestPositive == null || i < smallestPositive) {\n                    smallestPositive\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        long? largestNegative = null;\n        long? smallestPositive\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (largestNegative == null || i > largestNegative) {\n          \
    \          largestNegative = i;\n                }\n            } else if (i >\
    \ 0) {\n                if (smallestPositive == null || i < smallestPositive)\
    \ {\n                    smallestPositive = i;\n                }\n          \
    \  }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  '        return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);', "  \
    \      // Write your code here\n        long max = long.MinValue;\n        long\
    \ min = long.MaxValue;\n        foreach (long i in lst) {\n            if (i >\
    \ 0 && i < min) {\n                min = i;\n            }\n            if (i\
    \ < 0 && i > max) {\n                max = i;\n            }\n        }\n    \
    \    if (max == long.MinValue) {\n            max = (long)null;\n        }\n \
    \       if (min == long.MaxValue) {\n            min = (long)null;\n        }\n\
    \        return Tuple.Create((Nullable<long>)max, (Nullable<long>)min);", "  \
    \      long? min = null;\n        long? max = null;\n        foreach (long i in\
    \ lst) {\n            if (i < 0) {\n                if (max == null || i > max)\
    \ {\n                    max = i;\n                }\n            } else if (i\
    \ > 0) {\n                if (min == null || i < min) {\n                    min\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(max,\
    \ min);", '        throw new NotImplementedException();', "        long? min =\
    \ null;\n        long? max = null;\n        foreach (long i in lst) {\n      \
    \      if (i > 0) {\n                if (min == null || i < min) {\n         \
    \           min = i;\n                }\n            } else if (i < 0) {\n   \
    \             if (max == null || i > max) {\n                    max = i;\n  \
    \              }\n            }\n        }\n        return Tuple.Create(max, min);",
  "        // Your code here\n        long max = long.MinValue;\n        long min\
    \ = long.MaxValue;\n        bool hasNegative = false;\n        bool hasPositive\
    \ = false;\n        foreach (long i in lst) {\n            if (i < 0) {\n    \
    \            hasNegative = true;\n                if (i > max) {\n           \
    \         max = i;\n                }\n            } else if (i > 0) {\n     \
    \           hasPositive = true;\n                if (i < min) {\n            \
    \        min = i;\n                }\n            }\n        }\n        if (!hasNegative)\
    \ {\n            max = long.MinValue;\n        }\n        if (!hasPositive) {\n\
    \            min = long.MaxValue;\n        }\n        return Tuple.Create((Nullable<long>)max,\
    \ (Nullable<long>)min);", "        // Your code goes here\n        return null;",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallestPositive == null || i < smallestPositive) {\n                    smallestPositive\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        // Write your code here\n        return null;",
  "        var a = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n        var b =\
    \ lst.Where(x => x > 0).DefaultIfEmpty().Min();\n        return Tuple.Create(a,\
    \ b);", "        // Your code here\n        return null;", "        long? min\
    \ = null;\n        long? max = null;\n        foreach (long i in lst) {\n    \
    \        if (i > 0) {\n                if (min == null || i < min) {\n       \
    \             min = i;\n                }\n            } else if (i < 0) {\n \
    \               if (max == null || i > max) {\n                    max = i;\n\
    \                }\n            }\n        }\n        return Tuple.Create(max,\
    \ min);", "        long? largestNegative = null;\n        long? smallestPositive\
    \ = null;\n        foreach (long i in lst) {\n            if (i < 0) {\n     \
    \           if (largestNegative == null || i > largestNegative) {\n          \
    \          largestNegative = i;\n                }\n            } else if (i >\
    \ 0) {\n                if (smallestPositive == null || i < smallestPositive)\
    \ {\n                    smallestPositive = i;\n                }\n          \
    \  }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        // Write your code here\n        return null;", "        long? largestNegative\
    \ = null;\n        long? smallestPositive = null;\n        foreach (long item\
    \ in lst) {\n            if (item < 0) {\n                if (largestNegative\
    \ == null || item > largestNegative) {\n                    largestNegative =\
    \ item;\n                }\n            } else if (item > 0) {\n             \
    \   if (smallestPositive == null || item < smallestPositive) {\n             \
    \       smallestPositive = item;\n                }\n            }\n        }\n\
    \        return Tuple.Create(largestNegative, smallestPositive);", "        //\
    \ Your code goes here.\n        return null;", "        long? maxNeg = null;\n\
    \        long? minPos = null;\n        foreach (long i in lst) {\n           \
    \ if (i < 0) {\n                if (maxNeg == null || i > maxNeg) {\n        \
    \            maxNeg = i;\n                }\n            } else if (i > 0) {\n\
    \                if (minPos == null || i < minPos) {\n                    minPos\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(maxNeg,\
    \ minPos);", '        return Tuple.Create(lst.Where(x => x < 0).DefaultIfEmpty().Max(),
    lst.Where(x => x > 0).DefaultIfEmpty().Min());', "        long? a = null;\n  \
    \      long? b = null;\n        foreach (long x in lst) {\n            if (x <\
    \ 0) {\n                if (a == null || x > a) {\n                    a = x;\n\
    \                }\n            } else if (x > 0) {\n                if (b ==\
    \ null || x < b) {\n                    b = x;\n                }\n          \
    \  }\n        }\n        return Tuple.Create(a, b);"]
stop_tokens:
- "\n    }\n"
