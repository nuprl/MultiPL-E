name: HumanEval_136_largest_smallest_integers
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that returns a tuple (a, b), where 'a' is\n\
  \    // the largest of negative integers, and 'b' is the smallest\n    // of positive\
  \ integers in a list.\n    // If there is no negative or positive integers, return\
  \ them as null.\n    // Examples:\n    // >>> LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L})))\n    //\
  \ Tuple.Create((Nullable<long>)null, 1L)\n    // >>> LargestSmallestIntegers((new\
  \ List<long>()))\n    // Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n\
  \    // >>> LargestSmallestIntegers((new List<long>(new long[]{(long)0L})))\n  \
  \  // Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n    public static\
  \ Tuple<Nullable<long>, Nullable<long>> LargestSmallestIntegers(List<long> lst)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestSmallestIntegers((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L,\
  \ (long)4L, (long)1L, (long)3L, (long)5L, (long)7L, (long)0L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)-2L}))).Equals(Tuple.Create(-2L,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)4L,\
  \ (long)5L, (long)3L, (long)6L, (long)2L, (long)7L, (long)-7L}))).Equals(Tuple.Create(-7L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)7L,\
  \ (long)3L, (long)8L, (long)4L, (long)9L, (long)2L, (long)5L, (long)-9L}))).Equals(Tuple.Create(-9L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>())).Equals(Tuple.Create((Nullable<long>)null,\
  \ (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)0L}))).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L, (long)0L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)-100L, (long)1L}))).Equals(Tuple.Create(-3L,\
  \ 1L)));\n    }\n\n}\n"
completions: ['        return Tuple.Create(lst.Where(x => x < 0).DefaultIfEmpty().Max(),
    lst.Where(x => x > 0).DefaultIfEmpty().Min());', "        long? largestNegative\
    \ = null;\n        long? smallestPositive = null;\n        foreach (long item\
    \ in lst) {\n            if (item < 0) {\n                if (largestNegative\
    \ == null || item > largestNegative) {\n                    largestNegative =\
    \ item;\n                }\n            } else if (item > 0) {\n             \
    \   if (smallestPositive == null || item < smallestPositive) {\n             \
    \       smallestPositive = item;\n                }\n            }\n        }\n\
    \        return Tuple.Create(largestNegative, smallestPositive);", "        long\
    \ max = 0;\n        long min = 0;\n        bool maxSet = false;\n        bool\
    \ minSet = false;\n        foreach (long i in lst) {\n            if (i < 0) {\n\
    \                if (!maxSet) {\n                    max = i;\n              \
    \      maxSet = true;\n                } else if (i > max) {\n               \
    \     max = i;\n                }\n            } else if (i > 0) {\n         \
    \       if (!minSet) {\n                    min = i;\n                    minSet\
    \ = true;\n                } else if (i < min) {\n                    min = i;\n\
    \                }\n            }\n        }\n        if (maxSet) {\n        \
    \    if (minSet) {\n                return Tuple.Create((Nullable<long>)max, min);\n\
    \            } else {\n                return Tuple.Create((Nullable<long>)max,\
    \ (Nullable<long>)null);\n            }\n        } else {\n            if (minSet)\
    \ {\n                return Tuple.Create((Nullable<long>)null, min);\n       \
    \     } else {\n                return Tuple.Create((Nullable<long>)null, (Nullable<long>)null);\n\
    \            }\n        }", "        // Write your code here\n        return null;",
  "        Nullable<long> largest = null;\n        Nullable<long> smallest = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largest == null || i > largest) {\n                    largest = i;\n  \
    \              }\n            } else if (i > 0) {\n                if (smallest\
    \ == null || i < smallest) {\n                    smallest = i;\n            \
    \    }\n            }\n        }\n        return Tuple.Create(largest, smallest);",
  "        var negative = lst.Where(x => x < 0).DefaultIfEmpty().Max();\n        var\
    \ positive = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n        return Tuple.Create(negative,\
    \ positive);", "        // Your code goes here\n        return null;", "     \
    \   var min = lst.Where(x => x > 0).DefaultIfEmpty().Min();\n        var max =\
    \ lst.Where(x => x < 0).DefaultIfEmpty().Max();\n        return Tuple.Create(max,\
    \ min);", "        long? largest = null;\n        long? smallest = null;\n   \
    \     foreach (long i in lst) {\n            if (i < 0) {\n                if\
    \ (largest == null || i > largest) {\n                    largest = i;\n     \
    \           }\n            } else if (i > 0) {\n                if (smallest ==\
    \ null || i < smallest) {\n                    smallest = i;\n               \
    \ }\n            }\n        }\n        return Tuple.Create(largest, smallest);",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallestPositive == null || i < smallestPositive) {\n                    smallestPositive\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        long? min = null;\n        long? max = null;\n\
    \        foreach (long i in lst) {\n            if (i > 0) {\n               \
    \ if (min == null || i < min) {\n                    min = i;\n              \
    \  }\n            } else if (i < 0) {\n                if (max == null || i >\
    \ max) {\n                    max = i;\n                }\n            }\n   \
    \     }\n        return Tuple.Create(max, min);", "        long? largestNegative\
    \ = null;\n        long? smallestPositive = null;\n        foreach (long item\
    \ in lst) {\n            if (item < 0) {\n                if (largestNegative\
    \ == null || item > largestNegative) {\n                    largestNegative =\
    \ item;\n                }\n            } else if (item > 0) {\n             \
    \   if (smallestPositive == null || item < smallestPositive) {\n             \
    \       smallestPositive = item;\n                }\n            }\n        }\n\
    \        return Tuple.Create(largestNegative, smallestPositive);", "        long?\
    \ largestNegative = null;\n        long? smallestPositive = null;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (largestNegative\
    \ == null || i > largestNegative) {\n                    largestNegative = i;\n\
    \                }\n            } else if (i > 0) {\n                if (smallestPositive\
    \ == null || i < smallestPositive) {\n                    smallestPositive = i;\n\
    \                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        long? largestNegative = null;\n        long? smallestPositive\
    \ = null;\n        foreach (long item in lst) {\n            if (item < 0) {\n\
    \                if (largestNegative == null || item > largestNegative) {\n  \
    \                  largestNegative = item;\n                }\n            } else\
    \ if (item > 0) {\n                if (smallestPositive == null || item < smallestPositive)\
    \ {\n                    smallestPositive = item;\n                }\n       \
    \     }\n        }\n        return Tuple.Create(largestNegative, smallestPositive);",
  "        long? largestNegative = null;\n        long? smallestPositive = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largestNegative == null || i > largestNegative) {\n                    largestNegative\
    \ = i;\n                }\n            } else if (i > 0) {\n                if\
    \ (smallestPositive == null || i < smallestPositive) {\n                    smallestPositive\
    \ = i;\n                }\n            }\n        }\n        return Tuple.Create(largestNegative,\
    \ smallestPositive);", "        // Your code goes here\n        return null;",
  "        // Your code goes here\n        return null;", "        long? min = null;\n\
    \        long? max = null;\n        foreach (long i in lst) {\n            if\
    \ (i > 0) {\n                if (min == null || i < min) {\n                 \
    \   min = i;\n                }\n            } else if (i < 0) {\n           \
    \     if (max == null || i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return Tuple.Create(max, min);", " \
    \       long? min = null;\n        long? max = null;\n        foreach (long i\
    \ in lst) {\n            if (i > 0) {\n                if (min == null || i <\
    \ min) {\n                    min = i;\n                }\n            } else\
    \ if (i < 0) {\n                if (max == null || i > max) {\n              \
    \      max = i;\n                }\n            }\n        }\n        return Tuple.Create(max,\
    \ min);", "        // your code here\n        return null;"]
stop_tokens:
- "\n    }\n"
