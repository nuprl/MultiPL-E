language: cs
name: HumanEval_105_by_length
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   foreach (var item in arr) {\n            if (item >= 1 && item <= 9) {\n \
    \               result.Add(item.ToString());\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        for (int i = 0; i < result.Count;\
    \ i++) {\n            switch (result[i]) {\n                case \"1\":\n    \
    \                result[i] = \"One\";\n                    break;\n          \
    \      case \"2\":\n                    result[i] = \"Two\";\n               \
    \     break;\n                case \"3\":\n                    result[i] = \"\
    Three\";\n                    break;\n                case \"4\":\n          \
    \          result[i] = \"Four\";\n                    break;\n               \
    \ case \"5\":\n                    result[i] = \"Five\";\n                   \
    \ break;\n                case \"6\":\n                    result[i] = \"Six\"\
    ;\n                    break;\n                case \"7\":\n                 \
    \   result[i] = \"Seven\";\n                    break;\n                case \"\
    8\":\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case \"9\":\n                    result[i] = \"Nine\";\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e855c9daa978402bb038ab47fa2582e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e855c9daa978402bb038ab47fa2582e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            result.Add(i.ToString());\n            }\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n\
    \            switch (result[i]) {\n                case \"1\":\n             \
    \       result[i] = \"One\";\n                    break;\n                case\
    \ \"2\":\n                    result[i] = \"Two\";\n                    break;\n\
    \                case \"3\":\n                    result[i] = \"Three\";\n   \
    \                 break;\n                case \"4\":\n                    result[i]\
    \ = \"Four\";\n                    break;\n                case \"5\":\n     \
    \               result[i] = \"Five\";\n                    break;\n          \
    \      case \"6\":\n                    result[i] = \"Six\";\n               \
    \     break;\n                case \"7\":\n                    result[i] = \"\
    Seven\";\n                    break;\n                case \"8\":\n          \
    \          result[i] = \"Eight\";\n                    break;\n              \
    \  case \"9\":\n                    result[i] = \"Nine\";\n                  \
    \  break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19f2c10259444af4a8936079a15b4b56>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19f2c10259444af4a8936079a15b4b56>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // TODO: Implement this function\n     \
    \   return new List<string>();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d71004f3023e43f3a28791e0e842f9ca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d71004f3023e43f3a28791e0e842f9ca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var numbers = new List<long>();\n        foreach (var item in arr) {\n   \
    \         if (item >= 1 && item <= 9) {\n                numbers.Add(item);\n\
    \            }\n        }\n        numbers.Sort();\n        numbers.Reverse();\n\
    \        foreach (var item in numbers) {\n            switch (item) {\n      \
    \          case 1:\n                    result.Add(\"One\");\n               \
    \     break;\n                case 2:\n                    result.Add(\"Two\"\
    );\n                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4cf29884ab934fd59e84dbad1bcc4771>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4cf29884ab934fd59e84dbad1bcc4771>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   foreach (var item in arr) {\n            if (item > 0 && item < 10) {\n  \
    \              switch (item) {\n                    case 1:\n                \
    \        result.Add(\"One\");\n                        break;\n              \
    \      case 2:\n                        result.Add(\"Two\");\n               \
    \         break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Sort();\n        result.Reverse();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00b9f2f437d94583b16c899868498623>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <00b9f2f437d94583b16c899868498623>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var sorted = arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).Reverse();\n\
    \        foreach (var item in sorted) {\n            switch (item) {\n       \
    \         case 1:\n                    result.Add(\"One\");\n                \
    \    break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ef2ef07d67943748d1f1a43061ee324>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ef2ef07d67943748d1f1a43061ee324>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <912a667dda29476d8f148898abb013d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <912a667dda29476d8f148898abb013d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here.\n        // You\
    \ can add additional classes to this project.\n        return new List<string>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94cf2caf092d412a8b3fef39a0ea0a87>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94cf2caf092d412a8b3fef39a0ea0a87>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long item in arr) {\n            if (item < 1 || item > 9) {\n\
    \                continue;\n            }\n            switch (item) {\n     \
    \           case 1:\n                    result.Add(\"One\");\n              \
    \      break;\n                case 2:\n                    result.Add(\"Two\"\
    );\n                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        result.Sort();\n        result.Reverse();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68a78598c9874665b0bbae4ab0f50811>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68a78598c9874665b0bbae4ab0f50811>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            switch (i) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Reverse();\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <912a667dda29476d8f148898abb013d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <912a667dda29476d8f148898abb013d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            switch (i) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Reverse();\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 &&\
    \ arr[i] <= 9) {\n                result.Add(arr[i].ToString());\n           \
    \ }\n        }\n        result.Sort();\n        result.Reverse();\n        for\
    \ (int i = 0; i < result.Count; i++) {\n            switch (result[i]) {\n   \
    \             case \"1\":\n                    result[i] = \"One\";\n        \
    \            break;\n                case \"2\":\n                    result[i]\
    \ = \"Two\";\n                    break;\n                case \"3\":\n      \
    \              result[i] = \"Three\";\n                    break;\n          \
    \      case \"4\":\n                    result[i] = \"Four\";\n              \
    \      break;\n                case \"5\":\n                    result[i] = \"\
    Five\";\n                    break;\n                case \"6\":\n           \
    \         result[i] = \"Six\";\n                    break;\n                case\
    \ \"7\":\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case \"8\":\n                    result[i] = \"Eight\";\n   \
    \                 break;\n                case \"9\":\n                    result[i]\
    \ = \"Nine\";\n                    break;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b5902b36ca84666b401f4f5ea58c445>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b5902b36ca84666b401f4f5ea58c445>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        return arr.Where(x => x >= 1 && x <= 9).OrderBy(x\
    \ => x).Reverse().Select(x => {\n            switch (x) {\n                case\
    \ 1: return \"One\";\n                case 2: return \"Two\";\n              \
    \  case 3: return \"Three\";\n                case 4: return \"Four\";\n     \
    \           case 5: return \"Five\";\n                case 6: return \"Six\";\n\
    \                case 7: return \"Seven\";\n                case 8: return \"\
    Eight\";\n                case 9: return \"Nine\";\n                default: throw\
    \ new Exception(\"Should not happen\");\n            }\n        }).ToList();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <757f650bef954c44b01c241e4535f51f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <757f650bef954c44b01c241e4535f51f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var numbers = new List<long>();\n        foreach (var item in arr) {\n   \
    \         if (item > 0 && item < 10) {\n                numbers.Add(item);\n \
    \           }\n        }\n        numbers.Sort();\n        numbers.Reverse();\n\
    \        foreach (var item in numbers) {\n            switch (item) {\n      \
    \          case 1:\n                    result.Add(\"One\");\n               \
    \     break;\n                case 2:\n                    result.Add(\"Two\"\
    );\n                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1fe83405e61747c7b2b7390c2c4f64ce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1fe83405e61747c7b2b7390c2c4f64ce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i > 0 && i < 10) {\n     \
    \           result.Add(i.ToString());\n            }\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n\
    \            switch (result[i]) {\n                case \"1\":\n             \
    \       result[i] = \"One\";\n                    break;\n                case\
    \ \"2\":\n                    result[i] = \"Two\";\n                    break;\n\
    \                case \"3\":\n                    result[i] = \"Three\";\n   \
    \                 break;\n                case \"4\":\n                    result[i]\
    \ = \"Four\";\n                    break;\n                case \"5\":\n     \
    \               result[i] = \"Five\";\n                    break;\n          \
    \      case \"6\":\n                    result[i] = \"Six\";\n               \
    \     break;\n                case \"7\":\n                    result[i] = \"\
    Seven\";\n                    break;\n                case \"8\":\n          \
    \          result[i] = \"Eight\";\n                    break;\n              \
    \  case \"9\":\n                    result[i] = \"Nine\";\n                  \
    \  break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26fa1bec08b84608b468792397ac76f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26fa1bec08b84608b468792397ac76f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var numbers = new List<long>();\n        foreach (var item in arr) {\n   \
    \         if (item >= 1 && item <= 9) {\n                numbers.Add(item);\n\
    \            }\n        }\n        numbers.Sort();\n        numbers.Reverse();\n\
    \        foreach (var item in numbers) {\n            switch (item) {\n      \
    \          case 1:\n                    result.Add(\"One\");\n               \
    \     break;\n                case 2:\n                    result.Add(\"Two\"\
    );\n                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4cf29884ab934fd59e84dbad1bcc4771>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4cf29884ab934fd59e84dbad1bcc4771>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i > 0 && i < 10) {\n     \
    \           switch (i) {\n                    case 1:\n                      \
    \  result.Add(\"One\");\n                        break;\n                    case\
    \ 2:\n                        result.Add(\"Two\");\n                        break;\n\
    \                    case 3:\n                        result.Add(\"Three\");\n\
    \                        break;\n                    case 4:\n               \
    \         result.Add(\"Four\");\n                        break;\n            \
    \        case 5:\n                        result.Add(\"Five\");\n            \
    \            break;\n                    case 6:\n                        result.Add(\"\
    Six\");\n                        break;\n                    case 7:\n       \
    \                 result.Add(\"Seven\");\n                        break;\n   \
    \                 case 8:\n                        result.Add(\"Eight\");\n  \
    \                      break;\n                    case 9:\n                 \
    \       result.Add(\"Nine\");\n                        break;\n              \
    \  }\n            }\n        }\n        result.Sort();\n        result.Reverse();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4c678a63e774797a6f7b935e80fffca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4c678a63e774797a6f7b935e80fffca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item > 0 &&\
    \ item < 10) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57844d72044b46069ec3807978612d35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57844d72044b46069ec3807978612d35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        return arr.Where(x => x >= 1 && x <= 9).OrderBy(x\
    \ => x).Reverse().Select(x => x.ToString()).ToList();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e59c6dc2ecea4462a6da1df28ed34c9c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e59c6dc2ecea4462a6da1df28ed34c9c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        Dictionary<long, string> dict = new Dictionary<long, string>();\n   \
    \     dict.Add(1, \"One\");\n        dict.Add(2, \"Two\");\n        dict.Add(3,\
    \ \"Three\");\n        dict.Add(4, \"Four\");\n        dict.Add(5, \"Five\");\n\
    \        dict.Add(6, \"Six\");\n        dict.Add(7, \"Seven\");\n        dict.Add(8,\
    \ \"Eight\");\n        dict.Add(9, \"Nine\");\n        arr.Sort();\n        arr.Reverse();\n\
    \        foreach (long i in arr) {\n            if (dict.ContainsKey(i)) {\n \
    \               result.Add(dict[i]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2cb781c695b6491bbde1865f02e5954c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2cb781c695b6491bbde1865f02e5954c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   if (arr.Count == 0) {\n            return result;\n        }\n        var\
    \ sorted = arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n      \
    \  sorted.Reverse();\n        foreach (var x in sorted) {\n            switch\
    \ (x) {\n                case 1:\n                    result.Add(\"One\");\n \
    \                   break;\n                case 2:\n                    result.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.Add(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.Add(\"Five\");\n        \
    \            break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae4dfb07828d40e7831fce2fc8235c36>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae4dfb07828d40e7831fce2fc8235c36>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var sorted = arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n\
    \        sorted.Reverse();\n        foreach (var item in sorted) {\n         \
    \   switch (item) {\n                case 1:\n                    result.Add(\"\
    One\");\n                    break;\n                case 2:\n               \
    \     result.Add(\"Two\");\n                    break;\n                case 3:\n\
    \                    result.Add(\"Three\");\n                    break;\n    \
    \            case 4:\n                    result.Add(\"Four\");\n            \
    \        break;\n                case 5:\n                    result.Add(\"Five\"\
    );\n                    break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a86ecec76344caea4205fd59f9890fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a86ecec76344caea4205fd59f9890fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here.\n        // You\
    \ can add additional classes and methods.\n        // You can also add additional\
    \ functions and call them from here.\n        // You can also modify the return\
    \ type of this function.\n        // You can also modify the parameters of this\
    \ function.\n        // You can also use the 'var' keyword.\n        // You can\
    \ also use LINQ.\n        // You can also use 'ref' or 'out' keywords.\n     \
    \   // You can also modify the access modifiers of this function.\n        //\
    \ You can also modify the access modifiers of the parameters of this function.\n\
    \        // You can also modify the access modifiers of the classes and methods.\n\
    \        // You can also modify the access modifiers of the additional classes\
    \ and methods.\n        // You can also modify the access modifiers of the additional\
    \ functions and call them from here.\n        // You can also modify the access\
    \ modifiers of the additional functions' parameters.\n        // You can also\
    \ use the 'params' keyword.\n        // You can also use the 'dynamic' keyword.\n\
    \        // You can also use the 'yield' keyword.\n        // You can also use\
    \ the 'unsafe' keyword.\n        // You can also use the 'fixed' keyword.\n  \
    \      // You can also use the 'stackalloc' keyword.\n        // You can also\
    \ use the 'checked' and 'unchecked' keywords.\n        // You can also use the\
    \ 'using' keyword.\n        // You can also use the '#region' and '#endregion'\
    \ keywords.\n        // You can also use the '#if', '#else', '#elif', '#endif',\
    \ '#define', '#undef', '#warning', '#error', '#line', '#pragma', '#region', '#endregion',\
    \ '#pragma warning', '#pragma checksum', '#nullable', '#notnull', '#nullable enable',\
    \ '#nullable disable', '#nullable restore', '#nullable restore all', '#nullable\
    \ context', '#nullable restore context', '#nullable disable all', '#nullable enable\
    \ all', '#nullable restore all', '#nullable context all', '#nullable restore context\
    \ all', '#nullable disable annotations', '#nullable enable annotations', '#nullable\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2bj1t_16.cs(21,32): error CS0161: ''Problem.ByLength(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659803466
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <381ec13520094aabb70fa85176688203>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <381ec13520094aabb70fa85176688203>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        Dictionary<long, string> dict = new Dictionary<long, string>();\n   \
    \     dict.Add(1, \"One\");\n        dict.Add(2, \"Two\");\n        dict.Add(3,\
    \ \"Three\");\n        dict.Add(4, \"Four\");\n        dict.Add(5, \"Five\");\n\
    \        dict.Add(6, \"Six\");\n        dict.Add(7, \"Seven\");\n        dict.Add(8,\
    \ \"Eight\");\n        dict.Add(9, \"Nine\");\n        arr.Sort();\n        arr.Reverse();\n\
    \        foreach (long num in arr) {\n            if (dict.ContainsKey(num)) {\n\
    \                result.Add(dict[num]);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8b11861d1b34c93a67362ebdd189611>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c8b11861d1b34c93a67362ebdd189611>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item >= 1 &&\
    \ item <= 9) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <1712159b4314434299931b2344668da1>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <1712159b4314434299931b2344668da1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<int, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item >= 1 &&\
    \ item <= 9) {\n                result.Add(dict[(int)item]);\n            }\n\
    \        }\n        result.Sort();\n        result.Reverse();\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b02bc3a6ceb448a7bea97319c750627b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b02bc3a6ceb448a7bea97319c750627b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <1712159b4314434299931b2344668da1>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <1712159b4314434299931b2344668da1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return new\
    \ List<string>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3768559711f8467e96352aadfaae72d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3768559711f8467e96352aadfaae72d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // TODO: Implement ByLength\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <a2e0684e037d485394e33a1e58a4f5e9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <a2e0684e037d485394e33a1e58a4f5e9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            switch (i) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Reverse();\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item > 0 &&\
    \ item < 10) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57844d72044b46069ec3807978612d35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57844d72044b46069ec3807978612d35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            switch (i) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Reverse();\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var sorted = arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).Reverse();\n\
    \        foreach (var item in sorted) {\n            switch (item) {\n       \
    \         case 1:\n                    result.Add(\"One\");\n                \
    \    break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ef2ef07d67943748d1f1a43061ee324>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ef2ef07d67943748d1f1a43061ee324>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var numbers = new List<long>();\n        foreach (var item in arr) {\n   \
    \         if (item >= 1 && item <= 9) {\n                numbers.Add(item);\n\
    \            }\n        }\n        numbers.Sort();\n        numbers.Reverse();\n\
    \        foreach (var item in numbers) {\n            switch (item) {\n      \
    \          case 1:\n                    result.Add(\"One\");\n               \
    \     break;\n                case 2:\n                    result.Add(\"Two\"\
    );\n                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4cf29884ab934fd59e84dbad1bcc4771>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4cf29884ab934fd59e84dbad1bcc4771>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long x in arr) {\n            if (x >= 1 && x <= 9) {\n    \
    \            switch (x) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Sort();\n        result.Reverse();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a666b9eefae4ac9be1e10ad751cdc77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a666b9eefae4ac9be1e10ad751cdc77>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            switch (i) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Sort();\n        result.Reverse();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f61fbe576f594edd88f88123d759e0b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f61fbe576f594edd88f88123d759e0b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here.\n        // You\
    \ can add additional classes/methods as needed.\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b20b8b32630a42389ed435da030a644c>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b20b8b32630a42389ed435da030a644c>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long item in arr) {\n            if (item >= 1 && item <= 9)\
    \ {\n                switch (item) {\n                    case 1:\n          \
    \              result.Add(\"One\");\n                        break;\n        \
    \            case 2:\n                        result.Add(\"Two\");\n         \
    \               break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Sort();\n        result.Reverse();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d74ea93d391145b388b687688980c7fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d74ea93d391145b388b687688980c7fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var sorted = arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n\
    \        sorted.Reverse();\n        foreach (var item in sorted) {\n         \
    \   switch (item) {\n                case 1:\n                    result.Add(\"\
    One\");\n                    break;\n                case 2:\n               \
    \     result.Add(\"Two\");\n                    break;\n                case 3:\n\
    \                    result.Add(\"Three\");\n                    break;\n    \
    \            case 4:\n                    result.Add(\"Four\");\n            \
    \        break;\n                case 5:\n                    result.Add(\"Five\"\
    );\n                    break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a86ecec76344caea4205fd59f9890fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a86ecec76344caea4205fd59f9890fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var sorted = arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).Reverse();\n\
    \        foreach (var item in sorted) {\n            switch (item) {\n       \
    \         case 1:\n                    result.Add(\"One\");\n                \
    \    break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ef2ef07d67943748d1f1a43061ee324>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ef2ef07d67943748d1f1a43061ee324>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <912a667dda29476d8f148898abb013d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <912a667dda29476d8f148898abb013d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <912a667dda29476d8f148898abb013d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <912a667dda29476d8f148898abb013d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i > 0 && i < 10) {\n     \
    \           result.Add(i.ToString());\n            }\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n\
    \            switch (result[i]) {\n                case \"1\":\n             \
    \       result[i] = \"One\";\n                    break;\n                case\
    \ \"2\":\n                    result[i] = \"Two\";\n                    break;\n\
    \                case \"3\":\n                    result[i] = \"Three\";\n   \
    \                 break;\n                case \"4\":\n                    result[i]\
    \ = \"Four\";\n                    break;\n                case \"5\":\n     \
    \               result[i] = \"Five\";\n                    break;\n          \
    \      case \"6\":\n                    result[i] = \"Six\";\n               \
    \     break;\n                case \"7\":\n                    result[i] = \"\
    Seven\";\n                    break;\n                case \"8\":\n          \
    \          result[i] = \"Eight\";\n                    break;\n              \
    \  case \"9\":\n                    result[i] = \"Nine\";\n                  \
    \  break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26fa1bec08b84608b468792397ac76f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26fa1bec08b84608b468792397ac76f9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Write your code here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <a1c3ce6973284c27905959caed7eca84>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <a1c3ce6973284c27905959caed7eca84>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here.\n        // You\
    \ can add additional classes/methods.\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <265c3ffe519e450cb5a797799194d13b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <265c3ffe519e450cb5a797799194d13b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        return arr.Where(x => x >= 1 && x <= 9).OrderBy(x\
    \ => x).Reverse().Select(x => {\n            switch (x) {\n                case\
    \ 1: return \"One\";\n                case 2: return \"Two\";\n              \
    \  case 3: return \"Three\";\n                case 4: return \"Four\";\n     \
    \           case 5: return \"Five\";\n                case 6: return \"Six\";\n\
    \                case 7: return \"Seven\";\n                case 8: return \"\
    Eight\";\n                case 9: return \"Nine\";\n                default: return\
    \ \"\";\n            }\n        }).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d16e6d3c848a43e1ac19703f75e92bab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d16e6d3c848a43e1ac19703f75e92bab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var numbers = new List<long>();\n        foreach (var item in arr) {\n   \
    \         if (item >= 1 && item <= 9) {\n                numbers.Add(item);\n\
    \            }\n        }\n        numbers.Sort();\n        numbers.Reverse();\n\
    \        foreach (var item in numbers) {\n            switch (item) {\n      \
    \          case 1:\n                    result.Add(\"One\");\n               \
    \     break;\n                case 2:\n                    result.Add(\"Two\"\
    );\n                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4cf29884ab934fd59e84dbad1bcc4771>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4cf29884ab934fd59e84dbad1bcc4771>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // TODO: Implement ByLength\n        return\
    \ new List<string>();\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f943627068347e8b4d8885220e5c1ad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1f943627068347e8b4d8885220e5c1ad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var res = new List<string>();\n        var\
    \ map = new Dictionary<long, string>();\n        map[1] = \"One\";\n        map[2]\
    \ = \"Two\";\n        map[3] = \"Three\";\n        map[4] = \"Four\";\n      \
    \  map[5] = \"Five\";\n        map[6] = \"Six\";\n        map[7] = \"Seven\";\n\
    \        map[8] = \"Eight\";\n        map[9] = \"Nine\";\n        foreach (var\
    \ item in arr) {\n            if (item >= 1 && item <= 9) {\n                res.Add(map[item]);\n\
    \            }\n        }\n        res.Sort();\n        res.Reverse();\n     \
    \   return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e9e98ce801f4f40af160c9f24d75678>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e9e98ce801f4f40af160c9f24d75678>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // TODO: Implement this function\n     \
    \   return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <4ef88e41c1984921a62f318979ae324f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <4ef88e41c1984921a62f318979ae324f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var digits = new List<long>();\n        foreach (var item in arr) {\n    \
    \        if (item >= 1 && item <= 9) {\n                digits.Add(item);\n  \
    \          }\n        }\n        digits.Sort();\n        digits.Reverse();\n \
    \       foreach (var item in digits) {\n            switch (item) {\n        \
    \        case 1:\n                    result.Add(\"One\");\n                 \
    \   break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf263bb2f1fa4c24ada75bbc7ba643a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bf263bb2f1fa4c24ada75bbc7ba643a7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var sorted = arr.Where(x => x > 0 && x < 10).OrderBy(x => x).ToList();\n \
    \       sorted.Reverse();\n        foreach (var item in sorted) {\n          \
    \  switch (item) {\n                case 1:\n                    result.Add(\"\
    One\");\n                    break;\n                case 2:\n               \
    \     result.Add(\"Two\");\n                    break;\n                case 3:\n\
    \                    result.Add(\"Three\");\n                    break;\n    \
    \            case 4:\n                    result.Add(\"Four\");\n            \
    \        break;\n                case 5:\n                    result.Add(\"Five\"\
    );\n                    break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <81c26bb155b442aca5edab67c94dfcea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <81c26bb155b442aca5edab67c94dfcea>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var list = new List<string>();\n       \
    \ foreach (var item in arr) {\n            if (item > 0 && item < 10) {\n    \
    \            list.Add(item.ToString());\n            }\n        }\n        list.Sort();\n\
    \        list.Reverse();\n        var result = new List<string>();\n        foreach\
    \ (var item in list) {\n            switch (item) {\n                case \"1\"\
    :\n                    result.Add(\"One\");\n                    break;\n    \
    \            case \"2\":\n                    result.Add(\"Two\");\n         \
    \           break;\n                case \"3\":\n                    result.Add(\"\
    Three\");\n                    break;\n                case \"4\":\n         \
    \           result.Add(\"Four\");\n                    break;\n              \
    \  case \"5\":\n                    result.Add(\"Five\");\n                  \
    \  break;\n                case \"6\":\n                    result.Add(\"Six\"\
    );\n                    break;\n                case \"7\":\n                \
    \    result.Add(\"Seven\");\n                    break;\n                case\
    \ \"8\":\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case \"9\":\n                    result.Add(\"Nine\");\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <072f2cb82f60452196712e4383173dbc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <072f2cb82f60452196712e4383173dbc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   foreach (var item in arr) {\n            if (item >= 1 && item <= 9) {\n \
    \               result.Add(item.ToString());\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        for (int i = 0; i < result.Count;\
    \ i++) {\n            switch (result[i]) {\n                case \"1\":\n    \
    \                result[i] = \"One\";\n                    break;\n          \
    \      case \"2\":\n                    result[i] = \"Two\";\n               \
    \     break;\n                case \"3\":\n                    result[i] = \"\
    Three\";\n                    break;\n                case \"4\":\n          \
    \          result[i] = \"Four\";\n                    break;\n               \
    \ case \"5\":\n                    result[i] = \"Five\";\n                   \
    \ break;\n                case \"6\":\n                    result[i] = \"Six\"\
    ;\n                    break;\n                case \"7\":\n                 \
    \   result[i] = \"Seven\";\n                    break;\n                case \"\
    8\":\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case \"9\":\n                    result[i] = \"Nine\";\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e855c9daa978402bb038ab47fa2582e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e855c9daa978402bb038ab47fa2582e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here.\n        // You\
    \ can add additional classes/methods.\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <265c3ffe519e450cb5a797799194d13b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <265c3ffe519e450cb5a797799194d13b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here.\n        // You\
    \ can add functions to this file too.\n        return new List<string>();\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b69ac52e25a74370b0af629bc10b85a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b69ac52e25a74370b0af629bc10b85a3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var sorted = arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n\
    \        sorted.Reverse();\n        foreach (var item in sorted) {\n         \
    \   switch (item) {\n                case 1:\n                    result.Add(\"\
    One\");\n                    break;\n                case 2:\n               \
    \     result.Add(\"Two\");\n                    break;\n                case 3:\n\
    \                    result.Add(\"Three\");\n                    break;\n    \
    \            case 4:\n                    result.Add(\"Four\");\n            \
    \        break;\n                case 5:\n                    result.Add(\"Five\"\
    );\n                    break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a86ecec76344caea4205fd59f9890fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a86ecec76344caea4205fd59f9890fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long l in arr) {\n            if (l > 0 && l < 10) {\n     \
    \           result.Add(l.ToString());\n            }\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n\
    \            switch (result[i]) {\n                case \"1\":\n             \
    \       result[i] = \"One\";\n                    break;\n                case\
    \ \"2\":\n                    result[i] = \"Two\";\n                    break;\n\
    \                case \"3\":\n                    result[i] = \"Three\";\n   \
    \                 break;\n                case \"4\":\n                    result[i]\
    \ = \"Four\";\n                    break;\n                case \"5\":\n     \
    \               result[i] = \"Five\";\n                    break;\n          \
    \      case \"6\":\n                    result[i] = \"Six\";\n               \
    \     break;\n                case \"7\":\n                    result[i] = \"\
    Seven\";\n                    break;\n                case \"8\":\n          \
    \          result[i] = \"Eight\";\n                    break;\n              \
    \  case \"9\":\n                    result[i] = \"Nine\";\n                  \
    \  break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c1a94efc5414491b68ca2f13a84db06>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c1a94efc5414491b68ca2f13a84db06>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item > 0 &&\
    \ item < 10) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57844d72044b46069ec3807978612d35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57844d72044b46069ec3807978612d35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item >= 1 &&\
    \ item <= 9) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 &&\
    \ arr[i] <= 9) {\n                result.Add(arr[i].ToString());\n           \
    \ }\n        }\n        result.Sort();\n        result.Reverse();\n        for\
    \ (int i = 0; i < result.Count; i++) {\n            switch (result[i]) {\n   \
    \             case \"1\":\n                    result[i] = \"One\";\n        \
    \            break;\n                case \"2\":\n                    result[i]\
    \ = \"Two\";\n                    break;\n                case \"3\":\n      \
    \              result[i] = \"Three\";\n                    break;\n          \
    \      case \"4\":\n                    result[i] = \"Four\";\n              \
    \      break;\n                case \"5\":\n                    result[i] = \"\
    Five\";\n                    break;\n                case \"6\":\n           \
    \         result[i] = \"Six\";\n                    break;\n                case\
    \ \"7\":\n                    result[i] = \"Seven\";\n                    break;\n\
    \                case \"8\":\n                    result[i] = \"Eight\";\n   \
    \                 break;\n                case \"9\":\n                    result[i]\
    \ = \"Nine\";\n                    break;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b5902b36ca84666b401f4f5ea58c445>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7b5902b36ca84666b401f4f5ea58c445>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <912a667dda29476d8f148898abb013d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <912a667dda29476d8f148898abb013d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item >= 1 &&\
    \ item <= 9) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            switch (i) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Reverse();\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            result.Add(i.ToString());\n            }\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n\
    \            switch (result[i]) {\n                case \"1\":\n             \
    \       result[i] = \"One\";\n                    break;\n                case\
    \ \"2\":\n                    result[i] = \"Two\";\n                    break;\n\
    \                case \"3\":\n                    result[i] = \"Three\";\n   \
    \                 break;\n                case \"4\":\n                    result[i]\
    \ = \"Four\";\n                    break;\n                case \"5\":\n     \
    \               result[i] = \"Five\";\n                    break;\n          \
    \      case \"6\":\n                    result[i] = \"Six\";\n               \
    \     break;\n                case \"7\":\n                    result[i] = \"\
    Seven\";\n                    break;\n                case \"8\":\n          \
    \          result[i] = \"Eight\";\n                    break;\n              \
    \  case \"9\":\n                    result[i] = \"Nine\";\n                  \
    \  break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19f2c10259444af4a8936079a15b4b56>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19f2c10259444af4a8936079a15b4b56>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>() {\n            {1, \"One\"},\n \
    \           {2, \"Two\"},\n            {3, \"Three\"},\n            {4, \"Four\"\
    },\n            {5, \"Five\"},\n            {6, \"Six\"},\n            {7, \"\
    Seven\"},\n            {8, \"Eight\"},\n            {9, \"Nine\"}\n        };\n\
    \        foreach (var item in arr) {\n            if (item >= 1 && item <= 9)\
    \ {\n                result.Add(dict[item]);\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c81a0d3fa8ea48beb4e041999794ac31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c81a0d3fa8ea48beb4e041999794ac31>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var sorted = arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).Reverse();\n\
    \        foreach (var x in sorted) {\n            switch (x) {\n             \
    \   case 1:\n                    result.Add(\"One\");\n                    break;\n\
    \                case 2:\n                    result.Add(\"Two\");\n         \
    \           break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9f85903d68c4e4cbc0b717aa899d2f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9f85903d68c4e4cbc0b717aa899d2f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here.\n        // You\
    \ can add additional classes.\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <2c040a54fae24b458b1c7609057dfe67>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <2c040a54fae24b458b1c7609057dfe67>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long item in arr) {\n            if (item >= 1 && item <= 9)\
    \ {\n                result.Add(item.ToString());\n            }\n        }\n\
    \        result.Sort();\n        result.Reverse();\n        for (int i = 0; i\
    \ < result.Count; i++) {\n            switch (result[i]) {\n                case\
    \ \"1\":\n                    result[i] = \"One\";\n                    break;\n\
    \                case \"2\":\n                    result[i] = \"Two\";\n     \
    \               break;\n                case \"3\":\n                    result[i]\
    \ = \"Three\";\n                    break;\n                case \"4\":\n    \
    \                result[i] = \"Four\";\n                    break;\n         \
    \       case \"5\":\n                    result[i] = \"Five\";\n             \
    \       break;\n                case \"6\":\n                    result[i] = \"\
    Six\";\n                    break;\n                case \"7\":\n            \
    \        result[i] = \"Seven\";\n                    break;\n                case\
    \ \"8\":\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case \"9\":\n                    result[i] = \"Nine\";\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9e2a3056c094b58a9344e27aee96a0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9e2a3056c094b58a9344e27aee96a0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var sorted = arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n\
    \        sorted.Reverse();\n        foreach (var i in sorted) {\n            switch\
    \ (i) {\n                case 1:\n                    result.Add(\"One\");\n \
    \                   break;\n                case 2:\n                    result.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.Add(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.Add(\"Five\");\n        \
    \            break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f795c5f9a794a4782420b0938e45864>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5f795c5f9a794a4782420b0938e45864>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            switch (i) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Reverse();\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item >= 1 &&\
    \ item <= 9) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        return arr.Where(x => x >= 1 && x <= 9).OrderBy(x\
    \ => x).Reverse().Select(x => {\n            switch (x) {\n                case\
    \ 1: return \"One\";\n                case 2: return \"Two\";\n              \
    \  case 3: return \"Three\";\n                case 4: return \"Four\";\n     \
    \           case 5: return \"Five\";\n                case 6: return \"Six\";\n\
    \                case 7: return \"Seven\";\n                case 8: return \"\
    Eight\";\n                case 9: return \"Nine\";\n                default: throw\
    \ new Exception();\n            }\n        }).ToList();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <213147b280dd470ebc855f771edd80b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <213147b280dd470ebc855f771edd80b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dic = new Dictionary<int, string>();\n        dic.Add(1, \"One\");\n \
    \       dic.Add(2, \"Two\");\n        dic.Add(3, \"Three\");\n        dic.Add(4,\
    \ \"Four\");\n        dic.Add(5, \"Five\");\n        dic.Add(6, \"Six\");\n  \
    \      dic.Add(7, \"Seven\");\n        dic.Add(8, \"Eight\");\n        dic.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item >= 1 &&\
    \ item <= 9) {\n                result.Add(dic[(int)item]);\n            }\n \
    \       }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7c51af47acd244ecb086bd59a7a25318>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7c51af47acd244ecb086bd59a7a25318>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item >= 1 &&\
    \ item <= 9) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        return arr.Where(x => x >= 1 && x <= 9).OrderBy(x\
    \ => x).Reverse().Select(x => {\n            switch (x) {\n                case\
    \ 1: return \"One\";\n                case 2: return \"Two\";\n              \
    \  case 3: return \"Three\";\n                case 4: return \"Four\";\n     \
    \           case 5: return \"Five\";\n                case 6: return \"Six\";\n\
    \                case 7: return \"Seven\";\n                case 8: return \"\
    Eight\";\n                case 9: return \"Nine\";\n                default: return\
    \ \"\";\n            }\n        }).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d16e6d3c848a43e1ac19703f75e92bab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d16e6d3c848a43e1ac19703f75e92bab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        List<string>\
    \ result = new List<string>();\n        foreach (long l in arr) {\n          \
    \  if (l >= 1 && l <= 9) {\n                switch (l) {\n                   \
    \ case 1:\n                        result.Add(\"One\");\n                    \
    \    break;\n                    case 2:\n                        result.Add(\"\
    Two\");\n                        break;\n                    case 3:\n       \
    \                 result.Add(\"Three\");\n                        break;\n   \
    \                 case 4:\n                        result.Add(\"Four\");\n   \
    \                     break;\n                    case 5:\n                  \
    \      result.Add(\"Five\");\n                        break;\n               \
    \     case 6:\n                        result.Add(\"Six\");\n                \
    \        break;\n                    case 7:\n                        result.Add(\"\
    Seven\");\n                        break;\n                    case 8:\n     \
    \                   result.Add(\"Eight\");\n                        break;\n \
    \                   case 9:\n                        result.Add(\"Nine\");\n \
    \                       break;\n                }\n            }\n        }\n\
    \        result.Reverse();\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <754cc09c2c07479f8e545a0637dad401>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <754cc09c2c07479f8e545a0637dad401>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   foreach (var item in arr) {\n            if (item >= 1 && item <= 9) {\n \
    \               result.Add(item.ToString());\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        for (int i = 0; i < result.Count;\
    \ i++) {\n            switch (result[i]) {\n                case \"1\":\n    \
    \                result[i] = \"One\";\n                    break;\n          \
    \      case \"2\":\n                    result[i] = \"Two\";\n               \
    \     break;\n                case \"3\":\n                    result[i] = \"\
    Three\";\n                    break;\n                case \"4\":\n          \
    \          result[i] = \"Four\";\n                    break;\n               \
    \ case \"5\":\n                    result[i] = \"Five\";\n                   \
    \ break;\n                case \"6\":\n                    result[i] = \"Six\"\
    ;\n                    break;\n                case \"7\":\n                 \
    \   result[i] = \"Seven\";\n                    break;\n                case \"\
    8\":\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case \"9\":\n                    result[i] = \"Nine\";\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e855c9daa978402bb038ab47fa2582e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e855c9daa978402bb038ab47fa2582e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   foreach (var item in arr) {\n            if (item > 0 && item < 10) {\n  \
    \              result.Add(item.ToString());\n            }\n        }\n      \
    \  result.Sort();\n        result.Reverse();\n        for (int i = 0; i < result.Count;\
    \ i++) {\n            switch (result[i]) {\n                case \"1\":\n    \
    \                result[i] = \"One\";\n                    break;\n          \
    \      case \"2\":\n                    result[i] = \"Two\";\n               \
    \     break;\n                case \"3\":\n                    result[i] = \"\
    Three\";\n                    break;\n                case \"4\":\n          \
    \          result[i] = \"Four\";\n                    break;\n               \
    \ case \"5\":\n                    result[i] = \"Five\";\n                   \
    \ break;\n                case \"6\":\n                    result[i] = \"Six\"\
    ;\n                    break;\n                case \"7\":\n                 \
    \   result[i] = \"Seven\";\n                    break;\n                case \"\
    8\":\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case \"9\":\n                    result[i] = \"Nine\";\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7b5872f87e34e0e97953a309e905008>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7b5872f87e34e0e97953a309e905008>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var sorted = arr.Where(x => x > 0 && x < 10).OrderBy(x => x).Reverse();\n\
    \        foreach (var x in sorted) {\n            switch (x) {\n             \
    \   case 1:\n                    result.Add(\"One\");\n                    break;\n\
    \                case 2:\n                    result.Add(\"Two\");\n         \
    \           break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca0504a2c65e45c1a278b1662ef93e56>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ca0504a2c65e45c1a278b1662ef93e56>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Write your code here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <a1c3ce6973284c27905959caed7eca84>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <a1c3ce6973284c27905959caed7eca84>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <912a667dda29476d8f148898abb013d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <912a667dda29476d8f148898abb013d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long item in arr) {\n            if (item > 0 && item < 10)\
    \ {\n                switch (item) {\n                    case 1:\n          \
    \              result.Add(\"One\");\n                        break;\n        \
    \            case 2:\n                        result.Add(\"Two\");\n         \
    \               break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Sort();\n        result.Reverse();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75a64828d5bf4ac2bd5d409631597293>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75a64828d5bf4ac2bd5d409631597293>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var dict = new Dictionary<long, string>()\
    \ {\n            {1, \"One\"},\n            {2, \"Two\"},\n            {3, \"\
    Three\"},\n            {4, \"Four\"},\n            {5, \"Five\"},\n          \
    \  {6, \"Six\"},\n            {7, \"Seven\"},\n            {8, \"Eight\"},\n \
    \           {9, \"Nine\"}\n        };\n        return arr.Where(x => x >= 1 &&\
    \ x <= 9).OrderBy(x => x).Reverse().Select(x => dict[x]).ToList();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5a70a89006ae40dc8f34bf83ff2b084f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5a70a89006ae40dc8f34bf83ff2b084f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return new\
    \ List<string>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3768559711f8467e96352aadfaae72d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3768559711f8467e96352aadfaae72d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item >= 1 &&\
    \ item <= 9) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // your code here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <1712159b4314434299931b2344668da1>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <1712159b4314434299931b2344668da1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <912a667dda29476d8f148898abb013d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <912a667dda29476d8f148898abb013d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            switch (i) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Reverse();\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item >= 1 &&\
    \ item <= 9) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item >= 1 &&\
    \ item <= 9) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <912a667dda29476d8f148898abb013d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <912a667dda29476d8f148898abb013d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        arr.Sort();\n        arr.Reverse();\n  \
    \      List<string> result = new List<string>();\n        foreach (long num in\
    \ arr) {\n            if (num >= 1 && num <= 9) {\n                result.Add(num.ToString());\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d96df76fc4a3404bab4ce97e4eccce61>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d96df76fc4a3404bab4ce97e4eccce61>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        List<string>\
    \ result = new List<string>();\n        foreach (long i in arr) {\n          \
    \  if (i >= 1 && i <= 9) {\n                switch (i) {\n                   \
    \ case 1:\n                        result.Add(\"One\");\n                    \
    \    break;\n                    case 2:\n                        result.Add(\"\
    Two\");\n                        break;\n                    case 3:\n       \
    \                 result.Add(\"Three\");\n                        break;\n   \
    \                 case 4:\n                        result.Add(\"Four\");\n   \
    \                     break;\n                    case 5:\n                  \
    \      result.Add(\"Five\");\n                        break;\n               \
    \     case 6:\n                        result.Add(\"Six\");\n                \
    \        break;\n                    case 7:\n                        result.Add(\"\
    Seven\");\n                        break;\n                    case 8:\n     \
    \                   result.Add(\"Eight\");\n                        break;\n \
    \                   case 9:\n                        result.Add(\"Nine\");\n \
    \                       break;\n                }\n            }\n        }\n\
    \        result.Reverse();\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14ec9ba58955478da5eb1b7f09848b04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14ec9ba58955478da5eb1b7f09848b04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here.\n        // You\
    \ can add additional classes/methods.\n        return new List<string>();\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc466572b5d2476cb37a6374fe9b49c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cc466572b5d2476cb37a6374fe9b49c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long item in arr) {\n            if (item > 0 && item < 10)\
    \ {\n                switch (item) {\n                    case 1:\n          \
    \              result.Add(\"One\");\n                        break;\n        \
    \            case 2:\n                        result.Add(\"Two\");\n         \
    \               break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Sort();\n        result.Reverse();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75a64828d5bf4ac2bd5d409631597293>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75a64828d5bf4ac2bd5d409631597293>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <912a667dda29476d8f148898abb013d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <912a667dda29476d8f148898abb013d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Write your code here\n        // To print\
    \ results to the standard output you can use Console.WriteLine()\n        // Example:\
    \ Console.WriteLine(\"Hello world!\");\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            switch (i) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Sort();\n        result.Reverse();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad94c2436f2945f99b523af692d95038>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad94c2436f2945f99b523af692d95038>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var res = new List<string>();\n        foreach\
    \ (var x in arr) {\n            if (x >= 1 && x <= 9) {\n                res.Add(x.ToString());\n\
    \            }\n        }\n        res.Sort();\n        res.Reverse();\n     \
    \   var res2 = new List<string>();\n        foreach (var x in res) {\n       \
    \     switch (x) {\n                case \"1\":\n                    res2.Add(\"\
    One\");\n                    break;\n                case \"2\":\n           \
    \         res2.Add(\"Two\");\n                    break;\n                case\
    \ \"3\":\n                    res2.Add(\"Three\");\n                    break;\n\
    \                case \"4\":\n                    res2.Add(\"Four\");\n      \
    \              break;\n                case \"5\":\n                    res2.Add(\"\
    Five\");\n                    break;\n                case \"6\":\n          \
    \          res2.Add(\"Six\");\n                    break;\n                case\
    \ \"7\":\n                    res2.Add(\"Seven\");\n                    break;\n\
    \                case \"8\":\n                    res2.Add(\"Eight\");\n     \
    \               break;\n                case \"9\":\n                    res2.Add(\"\
    Nine\");\n                    break;\n            }\n        }\n        return\
    \ res2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <29f5263f09914db09e43ed9c09ff2639>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <29f5263f09914db09e43ed9c09ff2639>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        List<string>\
    \ result = new List<string>();\n        foreach (long num in arr) {\n        \
    \    if (num > 0 && num < 10) {\n                switch (num) {\n            \
    \        case 1:\n                        result.Add(\"One\");\n             \
    \           break;\n                    case 2:\n                        result.Add(\"\
    Two\");\n                        break;\n                    case 3:\n       \
    \                 result.Add(\"Three\");\n                        break;\n   \
    \                 case 4:\n                        result.Add(\"Four\");\n   \
    \                     break;\n                    case 5:\n                  \
    \      result.Add(\"Five\");\n                        break;\n               \
    \     case 6:\n                        result.Add(\"Six\");\n                \
    \        break;\n                    case 7:\n                        result.Add(\"\
    Seven\");\n                        break;\n                    case 8:\n     \
    \                   result.Add(\"Eight\");\n                        break;\n \
    \                   case 9:\n                        result.Add(\"Nine\");\n \
    \                       break;\n                }\n            }\n        }\n\
    \        result.Sort();\n        result.Reverse();\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <87564ef34d5d43c09bc08752e7a28b42>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <87564ef34d5d43c09bc08752e7a28b42>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        return arr.Where(x => x > 0 && x < 10).OrderBy(x\
    \ => x).Reverse().Select(x => x.ToString()).ToList();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bf0cd1687546abb32484586744a095>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bf0cd1687546abb32484586744a095>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var map = new Dictionary<long, string>();\n        map[1] = \"One\";\n   \
    \     map[2] = \"Two\";\n        map[3] = \"Three\";\n        map[4] = \"Four\"\
    ;\n        map[5] = \"Five\";\n        map[6] = \"Six\";\n        map[7] = \"\
    Seven\";\n        map[8] = \"Eight\";\n        map[9] = \"Nine\";\n        foreach\
    \ (var item in arr) {\n            if (item >= 1 && item <= 9) {\n           \
    \     result.Add(map[item]);\n            }\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce5ed79d5f4349e2902497649b6f085f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce5ed79d5f4349e2902497649b6f085f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here.\n        // You\
    \ can add additional classes to this project.\n        return new List<string>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94cf2caf092d412a8b3fef39a0ea0a87>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94cf2caf092d412a8b3fef39a0ea0a87>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> res = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            res.Add(i.ToString());\n            }\n        }\n        res.Sort();\n\
    \        res.Reverse();\n        for (int i = 0; i < res.Count; i++) {\n     \
    \       switch (res[i]) {\n                case \"1\":\n                    res[i]\
    \ = \"One\";\n                    break;\n                case \"2\":\n      \
    \              res[i] = \"Two\";\n                    break;\n               \
    \ case \"3\":\n                    res[i] = \"Three\";\n                    break;\n\
    \                case \"4\":\n                    res[i] = \"Four\";\n       \
    \             break;\n                case \"5\":\n                    res[i]\
    \ = \"Five\";\n                    break;\n                case \"6\":\n     \
    \               res[i] = \"Six\";\n                    break;\n              \
    \  case \"7\":\n                    res[i] = \"Seven\";\n                    break;\n\
    \                case \"8\":\n                    res[i] = \"Eight\";\n      \
    \              break;\n                case \"9\":\n                    res[i]\
    \ = \"Nine\";\n                    break;\n            }\n        }\n        return\
    \ res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <92f1b86a3dee4c6bb879981eb823f6de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <92f1b86a3dee4c6bb879981eb823f6de>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long l in arr) {\n            if (l >= 1 && l <= 9) {\n    \
    \            result.Add(l.ToString());\n            }\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n\
    \            switch (result[i]) {\n                case \"1\":\n             \
    \       result[i] = \"One\";\n                    break;\n                case\
    \ \"2\":\n                    result[i] = \"Two\";\n                    break;\n\
    \                case \"3\":\n                    result[i] = \"Three\";\n   \
    \                 break;\n                case \"4\":\n                    result[i]\
    \ = \"Four\";\n                    break;\n                case \"5\":\n     \
    \               result[i] = \"Five\";\n                    break;\n          \
    \      case \"6\":\n                    result[i] = \"Six\";\n               \
    \     break;\n                case \"7\":\n                    result[i] = \"\
    Seven\";\n                    break;\n                case \"8\":\n          \
    \          result[i] = \"Eight\";\n                    break;\n              \
    \  case \"9\":\n                    result[i] = \"Nine\";\n                  \
    \  break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <224a85ff17ba4a7a8696fa51947a9e0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <224a85ff17ba4a7a8696fa51947a9e0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            switch (i) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Sort();\n        result.Reverse();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f61fbe576f594edd88f88123d759e0b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f61fbe576f594edd88f88123d759e0b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (dict.ContainsKey(item))\
    \ {\n                result.Add(dict[item]);\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786920e8c2144c609c10eca2ec788907>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786920e8c2144c609c10eca2ec788907>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code here\n        return new List<string>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6bd54fe320a449a6a67fb50a9edc9b52>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6bd54fe320a449a6a67fb50a9edc9b52>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (dict.ContainsKey(item))\
    \ {\n                result.Add(dict[item]);\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786920e8c2144c609c10eca2ec788907>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786920e8c2144c609c10eca2ec788907>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item >= 1 &&\
    \ item <= 9) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   foreach (var item in arr) {\n            if (item >= 1 && item <= 9) {\n \
    \               result.Add(item.ToString());\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        for (int i = 0; i < result.Count;\
    \ i++) {\n            switch (result[i]) {\n                case \"1\":\n    \
    \                result[i] = \"One\";\n                    break;\n          \
    \      case \"2\":\n                    result[i] = \"Two\";\n               \
    \     break;\n                case \"3\":\n                    result[i] = \"\
    Three\";\n                    break;\n                case \"4\":\n          \
    \          result[i] = \"Four\";\n                    break;\n               \
    \ case \"5\":\n                    result[i] = \"Five\";\n                   \
    \ break;\n                case \"6\":\n                    result[i] = \"Six\"\
    ;\n                    break;\n                case \"7\":\n                 \
    \   result[i] = \"Seven\";\n                    break;\n                case \"\
    8\":\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case \"9\":\n                    result[i] = \"Nine\";\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e855c9daa978402bb038ab47fa2582e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e855c9daa978402bb038ab47fa2582e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var sorted = arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n\
    \        sorted.Reverse();\n        foreach (var item in sorted) {\n         \
    \   switch (item) {\n                case 1:\n                    result.Add(\"\
    One\");\n                    break;\n                case 2:\n               \
    \     result.Add(\"Two\");\n                    break;\n                case 3:\n\
    \                    result.Add(\"Three\");\n                    break;\n    \
    \            case 4:\n                    result.Add(\"Four\");\n            \
    \        break;\n                case 5:\n                    result.Add(\"Five\"\
    );\n                    break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a86ecec76344caea4205fd59f9890fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a86ecec76344caea4205fd59f9890fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var res = new List<string>();\n        var\
    \ dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n    \
    \    dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (dict.ContainsKey(item))\
    \ {\n                res.Add(dict[item]);\n            }\n        }\n        res.Sort();\n\
    \        res.Reverse();\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3b1a59cd998941aa9e79efa8407c36c4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3b1a59cd998941aa9e79efa8407c36c4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i > 0 && i < 10) {\n     \
    \           switch (i) {\n                    case 1:\n                      \
    \  result.Add(\"One\");\n                        break;\n                    case\
    \ 2:\n                        result.Add(\"Two\");\n                        break;\n\
    \                    case 3:\n                        result.Add(\"Three\");\n\
    \                        break;\n                    case 4:\n               \
    \         result.Add(\"Four\");\n                        break;\n            \
    \        case 5:\n                        result.Add(\"Five\");\n            \
    \            break;\n                    case 6:\n                        result.Add(\"\
    Six\");\n                        break;\n                    case 7:\n       \
    \                 result.Add(\"Seven\");\n                        break;\n   \
    \                 case 8:\n                        result.Add(\"Eight\");\n  \
    \                      break;\n                    case 9:\n                 \
    \       result.Add(\"Nine\");\n                        break;\n              \
    \  }\n            }\n        }\n        result.Sort();\n        result.Reverse();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4c678a63e774797a6f7b935e80fffca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4c678a63e774797a6f7b935e80fffca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var map = new Dictionary<long, string>();\n        map[1] = \"One\";\n   \
    \     map[2] = \"Two\";\n        map[3] = \"Three\";\n        map[4] = \"Four\"\
    ;\n        map[5] = \"Five\";\n        map[6] = \"Six\";\n        map[7] = \"\
    Seven\";\n        map[8] = \"Eight\";\n        map[9] = \"Nine\";\n        foreach\
    \ (var item in arr) {\n            if (item >= 1 && item <= 9) {\n           \
    \     result.Add(map[item]);\n            }\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce5ed79d5f4349e2902497649b6f085f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ce5ed79d5f4349e2902497649b6f085f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var sorted = new List<long>();\n        foreach (var item in arr) {\n    \
    \        if (item >= 1 && item <= 9) {\n                sorted.Add(item);\n  \
    \          }\n        }\n        sorted.Sort();\n        sorted.Reverse();\n \
    \       foreach (var item in sorted) {\n            switch (item) {\n        \
    \        case 1:\n                    result.Add(\"One\");\n                 \
    \   break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3041a2354b8843efbe2fa3724563c504>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3041a2354b8843efbe2fa3724563c504>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var numbers = new List<long>();\n        foreach (var item in arr) {\n   \
    \         if (item >= 1 && item <= 9) {\n                numbers.Add(item);\n\
    \            }\n        }\n        numbers.Sort();\n        numbers.Reverse();\n\
    \        foreach (var item in numbers) {\n            switch (item) {\n      \
    \          case 1:\n                    result.Add(\"One\");\n               \
    \     break;\n                case 2:\n                    result.Add(\"Two\"\
    );\n                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4cf29884ab934fd59e84dbad1bcc4771>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4cf29884ab934fd59e84dbad1bcc4771>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var res = new List<string>();\n        foreach\
    \ (var i in arr) {\n            if (i > 0 && i < 10) {\n                res.Add(i.ToString());\n\
    \            }\n        }\n        res.Sort();\n        res.Reverse();\n     \
    \   for (int i = 0; i < res.Count; i++) {\n            switch (res[i]) {\n   \
    \             case \"1\":\n                    res[i] = \"One\";\n           \
    \         break;\n                case \"2\":\n                    res[i] = \"\
    Two\";\n                    break;\n                case \"3\":\n            \
    \        res[i] = \"Three\";\n                    break;\n                case\
    \ \"4\":\n                    res[i] = \"Four\";\n                    break;\n\
    \                case \"5\":\n                    res[i] = \"Five\";\n       \
    \             break;\n                case \"6\":\n                    res[i]\
    \ = \"Six\";\n                    break;\n                case \"7\":\n      \
    \              res[i] = \"Seven\";\n                    break;\n             \
    \   case \"8\":\n                    res[i] = \"Eight\";\n                   \
    \ break;\n                case \"9\":\n                    res[i] = \"Nine\";\n\
    \                    break;\n            }\n        }\n        return res;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3ce08144260d421688437fdb7f6fc59c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3ce08144260d421688437fdb7f6fc59c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <912a667dda29476d8f148898abb013d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <912a667dda29476d8f148898abb013d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var nums = new List<long>();\n        foreach (var num in arr) {\n       \
    \     if (num > 0 && num < 10) {\n                nums.Add(num);\n           \
    \ }\n        }\n        nums.Sort();\n        nums.Reverse();\n        foreach\
    \ (var num in nums) {\n            switch (num) {\n                case 1:\n \
    \                   result.Add(\"One\");\n                    break;\n       \
    \         case 2:\n                    result.Add(\"Two\");\n                \
    \    break;\n                case 3:\n                    result.Add(\"Three\"\
    );\n                    break;\n                case 4:\n                    result.Add(\"\
    Four\");\n                    break;\n                case 5:\n              \
    \      result.Add(\"Five\");\n                    break;\n                case\
    \ 6:\n                    result.Add(\"Six\");\n                    break;\n \
    \               case 7:\n                    result.Add(\"Seven\");\n        \
    \            break;\n                case 8:\n                    result.Add(\"\
    Eight\");\n                    break;\n                case 9:\n             \
    \       result.Add(\"Nine\");\n                    break;\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c32067d34bf04c00bb7d4fbaa3a1a2c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c32067d34bf04c00bb7d4fbaa3a1a2c6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var sorted = arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).Reverse();\n\
    \        foreach (var item in sorted) {\n            switch (item) {\n       \
    \         case 1:\n                    result.Add(\"One\");\n                \
    \    break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ef2ef07d67943748d1f1a43061ee324>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ef2ef07d67943748d1f1a43061ee324>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Write your code here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <a1c3ce6973284c27905959caed7eca84>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <a1c3ce6973284c27905959caed7eca84>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var sorted = arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).Reverse();\n\
    \        foreach (var item in sorted) {\n            switch (item) {\n       \
    \         case 1:\n                    result.Add(\"One\");\n                \
    \    break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ef2ef07d67943748d1f1a43061ee324>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ef2ef07d67943748d1f1a43061ee324>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var sorted = arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).Reverse();\n\
    \        foreach (var item in sorted) {\n            switch (item) {\n       \
    \         case 1:\n                    result.Add(\"One\");\n                \
    \    break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ef2ef07d67943748d1f1a43061ee324>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ef2ef07d67943748d1f1a43061ee324>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   foreach (var item in arr) {\n            if (item > 0 && item < 10) {\n  \
    \              result.Add(item.ToString());\n            }\n        }\n      \
    \  result.Sort();\n        result.Reverse();\n        for (int i = 0; i < result.Count;\
    \ i++) {\n            switch (result[i]) {\n                case \"1\":\n    \
    \                result[i] = \"One\";\n                    break;\n          \
    \      case \"2\":\n                    result[i] = \"Two\";\n               \
    \     break;\n                case \"3\":\n                    result[i] = \"\
    Three\";\n                    break;\n                case \"4\":\n          \
    \          result[i] = \"Four\";\n                    break;\n               \
    \ case \"5\":\n                    result[i] = \"Five\";\n                   \
    \ break;\n                case \"6\":\n                    result[i] = \"Six\"\
    ;\n                    break;\n                case \"7\":\n                 \
    \   result[i] = \"Seven\";\n                    break;\n                case \"\
    8\":\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case \"9\":\n                    result[i] = \"Nine\";\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7b5872f87e34e0e97953a309e905008>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7b5872f87e34e0e97953a309e905008>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item >= 1 &&\
    \ item <= 9) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            result.Add(i.ToString());\n            }\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n\
    \            switch (result[i]) {\n                case \"1\":\n             \
    \       result[i] = \"One\";\n                    break;\n                case\
    \ \"2\":\n                    result[i] = \"Two\";\n                    break;\n\
    \                case \"3\":\n                    result[i] = \"Three\";\n   \
    \                 break;\n                case \"4\":\n                    result[i]\
    \ = \"Four\";\n                    break;\n                case \"5\":\n     \
    \               result[i] = \"Five\";\n                    break;\n          \
    \      case \"6\":\n                    result[i] = \"Six\";\n               \
    \     break;\n                case \"7\":\n                    result[i] = \"\
    Seven\";\n                    break;\n                case \"8\":\n          \
    \          result[i] = \"Eight\";\n                    break;\n              \
    \  case \"9\":\n                    result[i] = \"Nine\";\n                  \
    \  break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19f2c10259444af4a8936079a15b4b56>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19f2c10259444af4a8936079a15b4b56>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var sorted = arr.Where(x => x > 0 && x < 10).OrderBy(x => x).Reverse();\n\
    \        foreach (var item in sorted) {\n            switch (item) {\n       \
    \         case 1:\n                    result.Add(\"One\");\n                \
    \    break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2e939f117744b3ebb6c0c7bdfd15ce7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2e939f117744b3ebb6c0c7bdfd15ce7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var res = new List<string>();\n        var\
    \ dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n    \
    \    dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var i in arr) {\n            if (i >= 1 && i <=\
    \ 9) {\n                res.Add(dict[i]);\n            }\n        }\n        res.Sort();\n\
    \        res.Reverse();\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a718003593a48a8991a4f66d6233355>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a718003593a48a8991a4f66d6233355>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (dict.ContainsKey(item))\
    \ {\n                result.Add(dict[item]);\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786920e8c2144c609c10eca2ec788907>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786920e8c2144c609c10eca2ec788907>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <912a667dda29476d8f148898abb013d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <912a667dda29476d8f148898abb013d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <912a667dda29476d8f148898abb013d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <912a667dda29476d8f148898abb013d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here.\n        // You\
    \ can add additional classes/methods.\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <265c3ffe519e450cb5a797799194d13b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <265c3ffe519e450cb5a797799194d13b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item >= 1 &&\
    \ item <= 9) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (dict.ContainsKey(item))\
    \ {\n                result.Add(dict[item]);\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786920e8c2144c609c10eca2ec788907>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786920e8c2144c609c10eca2ec788907>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            switch (i) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Reverse();\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            switch (i) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Reverse();\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var res = new List<string>();\n        var\
    \ dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n    \
    \    dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item >= 1 &&\
    \ item <= 9) {\n                res.Add(dict[item]);\n            }\n        }\n\
    \        res.Sort();\n        res.Reverse();\n        return res;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14f9af501cc74cb8babbcfed9acbb0e9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14f9af501cc74cb8babbcfed9acbb0e9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item > 0 &&\
    \ item < 10) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57844d72044b46069ec3807978612d35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57844d72044b46069ec3807978612d35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here.\n        // You\
    \ can add new classes, methods and properties to this project.\n        // You\
    \ can also use the IO class to get input from the user or to write output.\n \
    \       // You can use the Debug class to write to the VS output window.\n   \
    \     // You can add new classes, methods and properties to this project.\n  \
    \      // You can also use the IO class to get input from the user or to write\
    \ output.\n        // You can use the Debug class to write to the VS output window.\n\
    \        List<string> result = new List<string>();\n        List<long> temp =\
    \ new List<long>();\n        foreach (long item in arr)\n        {\n         \
    \   if (item >= 1 && item <= 9)\n            {\n                temp.Add(item);\n\
    \            }\n        }\n        temp.Sort();\n        temp.Reverse();\n   \
    \     foreach (long item in temp)\n        {\n            switch (item)\n    \
    \        {\n                case 1:\n                    result.Add(\"One\");\n\
    \                    break;\n                case 2:\n                    result.Add(\"\
    Two\");\n                    break;\n                case 3:\n               \
    \     result.Add(\"Three\");\n                    break;\n                case\
    \ 4:\n                    result.Add(\"Four\");\n                    break;\n\
    \                case 5:\n                    result.Add(\"Five\");\n        \
    \            break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a88c4337881c4392b095b06b440f7be5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a88c4337881c4392b095b06b440f7be5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        List<string>\
    \ result = new List<string>();\n        foreach (long i in arr) {\n          \
    \  if (i >= 1 && i <= 9) {\n                switch (i) {\n                   \
    \ case 1:\n                        result.Add(\"One\");\n                    \
    \    break;\n                    case 2:\n                        result.Add(\"\
    Two\");\n                        break;\n                    case 3:\n       \
    \                 result.Add(\"Three\");\n                        break;\n   \
    \                 case 4:\n                        result.Add(\"Four\");\n   \
    \                     break;\n                    case 5:\n                  \
    \      result.Add(\"Five\");\n                        break;\n               \
    \     case 6:\n                        result.Add(\"Six\");\n                \
    \        break;\n                    case 7:\n                        result.Add(\"\
    Seven\");\n                        break;\n                    case 8:\n     \
    \                   result.Add(\"Eight\");\n                        break;\n \
    \                   case 9:\n                        result.Add(\"Nine\");\n \
    \                       break;\n                }\n            }\n        }\n\
    \        result.Reverse();\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14ec9ba58955478da5eb1b7f09848b04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14ec9ba58955478da5eb1b7f09848b04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>() {\n            {1, \"One\"},\n \
    \           {2, \"Two\"},\n            {3, \"Three\"},\n            {4, \"Four\"\
    },\n            {5, \"Five\"},\n            {6, \"Six\"},\n            {7, \"\
    Seven\"},\n            {8, \"Eight\"},\n            {9, \"Nine\"}\n        };\n\
    \        foreach (var item in arr) {\n            if (item > 0 && item < 10) {\n\
    \                result.Add(dict[item]);\n            }\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1547c4c734844a5ba677401dbd2d782c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1547c4c734844a5ba677401dbd2d782c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            switch (i) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Reverse();\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here.\n        // You\
    \ can add additional classes to this project.\n        return new List<string>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94cf2caf092d412a8b3fef39a0ea0a87>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94cf2caf092d412a8b3fef39a0ea0a87>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item >= 1 &&\
    \ item <= 9) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i > 0 && i < 10) {\n     \
    \           switch (i) {\n                    case 1:\n                      \
    \  result.Add(\"One\");\n                        break;\n                    case\
    \ 2:\n                        result.Add(\"Two\");\n                        break;\n\
    \                    case 3:\n                        result.Add(\"Three\");\n\
    \                        break;\n                    case 4:\n               \
    \         result.Add(\"Four\");\n                        break;\n            \
    \        case 5:\n                        result.Add(\"Five\");\n            \
    \            break;\n                    case 6:\n                        result.Add(\"\
    Six\");\n                        break;\n                    case 7:\n       \
    \                 result.Add(\"Seven\");\n                        break;\n   \
    \                 case 8:\n                        result.Add(\"Eight\");\n  \
    \                      break;\n                    case 9:\n                 \
    \       result.Add(\"Nine\");\n                        break;\n              \
    \  }\n            }\n        }\n        result.Sort();\n        result.Reverse();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4c678a63e774797a6f7b935e80fffca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d4c678a63e774797a6f7b935e80fffca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            switch (i) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Reverse();\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var sorted = arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n\
    \        sorted.Reverse();\n        foreach (var item in sorted) {\n         \
    \   switch (item) {\n                case 1:\n                    result.Add(\"\
    One\");\n                    break;\n                case 2:\n               \
    \     result.Add(\"Two\");\n                    break;\n                case 3:\n\
    \                    result.Add(\"Three\");\n                    break;\n    \
    \            case 4:\n                    result.Add(\"Four\");\n            \
    \        break;\n                case 5:\n                    result.Add(\"Five\"\
    );\n                    break;\n                case 6:\n                    result.Add(\"\
    Six\");\n                    break;\n                case 7:\n               \
    \     result.Add(\"Seven\");\n                    break;\n                case\
    \ 8:\n                    result.Add(\"Eight\");\n                    break;\n\
    \                case 9:\n                    result.Add(\"Nine\");\n        \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a86ecec76344caea4205fd59f9890fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a86ecec76344caea4205fd59f9890fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   foreach (var item in arr) {\n            if (item > 0 && item < 10) {\n  \
    \              result.Add(item.ToString());\n            }\n        }\n      \
    \  result.Sort();\n        result.Reverse();\n        for (int i = 0; i < result.Count;\
    \ i++) {\n            switch (result[i]) {\n                case \"1\":\n    \
    \                result[i] = \"One\";\n                    break;\n          \
    \      case \"2\":\n                    result[i] = \"Two\";\n               \
    \     break;\n                case \"3\":\n                    result[i] = \"\
    Three\";\n                    break;\n                case \"4\":\n          \
    \          result[i] = \"Four\";\n                    break;\n               \
    \ case \"5\":\n                    result[i] = \"Five\";\n                   \
    \ break;\n                case \"6\":\n                    result[i] = \"Six\"\
    ;\n                    break;\n                case \"7\":\n                 \
    \   result[i] = \"Seven\";\n                    break;\n                case \"\
    8\":\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case \"9\":\n                    result[i] = \"Nine\";\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7b5872f87e34e0e97953a309e905008>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7b5872f87e34e0e97953a309e905008>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>() {\n            {1, \"One\"},\n \
    \           {2, \"Two\"},\n            {3, \"Three\"},\n            {4, \"Four\"\
    },\n            {5, \"Five\"},\n            {6, \"Six\"},\n            {7, \"\
    Seven\"},\n            {8, \"Eight\"},\n            {9, \"Nine\"}\n        };\n\
    \        foreach (var item in arr) {\n            if (dict.ContainsKey(item))\
    \ {\n                result.Add(dict[item]);\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f992b89a2dd24b9fab7d66afad27e192>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f992b89a2dd24b9fab7d66afad27e192>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item >= 1 &&\
    \ item <= 9) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item >= 1 &&\
    \ item <= 9) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here.\n        // You\
    \ can add additional classes/methods.\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <265c3ffe519e450cb5a797799194d13b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <265c3ffe519e450cb5a797799194d13b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <912a667dda29476d8f148898abb013d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <912a667dda29476d8f148898abb013d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        Dictionary<long, string> dict = new Dictionary<long,\
    \ string>();\n        dict.Add(1, \"One\");\n        dict.Add(2, \"Two\");\n \
    \       dict.Add(3, \"Three\");\n        dict.Add(4, \"Four\");\n        dict.Add(5,\
    \ \"Five\");\n        dict.Add(6, \"Six\");\n        dict.Add(7, \"Seven\");\n\
    \        dict.Add(8, \"Eight\");\n        dict.Add(9, \"Nine\");\n        List<string>\
    \ result = new List<string>();\n        foreach (long num in arr) {\n        \
    \    if (dict.ContainsKey(num)) {\n                result.Add(dict[num]);\n  \
    \          }\n        }\n        result.Sort();\n        result.Reverse();\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <49102ee046b7449880f3c5045ab25b38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <49102ee046b7449880f3c5045ab25b38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <912a667dda29476d8f148898abb013d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <912a667dda29476d8f148898abb013d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   foreach (var item in arr) {\n            if (item >= 1 && item <= 9) {\n \
    \               result.Add(item.ToString());\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        for (int i = 0; i < result.Count;\
    \ i++) {\n            switch (result[i]) {\n                case \"1\":\n    \
    \                result[i] = \"One\";\n                    break;\n          \
    \      case \"2\":\n                    result[i] = \"Two\";\n               \
    \     break;\n                case \"3\":\n                    result[i] = \"\
    Three\";\n                    break;\n                case \"4\":\n          \
    \          result[i] = \"Four\";\n                    break;\n               \
    \ case \"5\":\n                    result[i] = \"Five\";\n                   \
    \ break;\n                case \"6\":\n                    result[i] = \"Six\"\
    ;\n                    break;\n                case \"7\":\n                 \
    \   result[i] = \"Seven\";\n                    break;\n                case \"\
    8\":\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case \"9\":\n                    result[i] = \"Nine\";\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e855c9daa978402bb038ab47fa2582e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e855c9daa978402bb038ab47fa2582e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here.\n        // You\
    \ can add additional classes.\n        return new List<string>();\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7540d5cfc524050b776054fb665081b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7540d5cfc524050b776054fb665081b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item >= 1 &&\
    \ item <= 9) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   foreach (var item in arr) {\n            if (item >= 1 && item <= 9) {\n \
    \               result.Add(item.ToString());\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        for (int i = 0; i < result.Count;\
    \ i++) {\n            switch (result[i]) {\n                case \"1\":\n    \
    \                result[i] = \"One\";\n                    break;\n          \
    \      case \"2\":\n                    result[i] = \"Two\";\n               \
    \     break;\n                case \"3\":\n                    result[i] = \"\
    Three\";\n                    break;\n                case \"4\":\n          \
    \          result[i] = \"Four\";\n                    break;\n               \
    \ case \"5\":\n                    result[i] = \"Five\";\n                   \
    \ break;\n                case \"6\":\n                    result[i] = \"Six\"\
    ;\n                    break;\n                case \"7\":\n                 \
    \   result[i] = \"Seven\";\n                    break;\n                case \"\
    8\":\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case \"9\":\n                    result[i] = \"Nine\";\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e855c9daa978402bb038ab47fa2582e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e855c9daa978402bb038ab47fa2582e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return new\
    \ List<string>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3768559711f8467e96352aadfaae72d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3768559711f8467e96352aadfaae72d5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        List<long> temp = new List<long>();\n        foreach (long i in arr)\
    \ {\n            if (i >= 1 && i <= 9) {\n                temp.Add(i);\n     \
    \       }\n        }\n        temp.Sort();\n        temp.Reverse();\n        foreach\
    \ (long i in temp) {\n            switch (i) {\n                case 1:\n    \
    \                result.Add(\"One\");\n                    break;\n          \
    \      case 2:\n                    result.Add(\"Two\");\n                   \
    \ break;\n                case 3:\n                    result.Add(\"Three\");\n\
    \                    break;\n                case 4:\n                    result.Add(\"\
    Four\");\n                    break;\n                case 5:\n              \
    \      result.Add(\"Five\");\n                    break;\n                case\
    \ 6:\n                    result.Add(\"Six\");\n                    break;\n \
    \               case 7:\n                    result.Add(\"Seven\");\n        \
    \            break;\n                case 8:\n                    result.Add(\"\
    Eight\");\n                    break;\n                case 9:\n             \
    \       result.Add(\"Nine\");\n                    break;\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c42c908c6c6e469cb02737443d5d21e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c42c908c6c6e469cb02737443d5d21e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <912a667dda29476d8f148898abb013d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <912a667dda29476d8f148898abb013d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <912a667dda29476d8f148898abb013d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <912a667dda29476d8f148898abb013d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        return arr.Where(x => x > 0 && x < 10).OrderBy(x\
    \ => x).Reverse().Select(x => x.ToString()).ToList();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bf0cd1687546abb32484586744a095>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14bf0cd1687546abb32484586744a095>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var sorted = arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).Reverse();\n\
    \        foreach (var item in sorted) {\n            switch (item) {\n       \
    \         case 1:\n                    result.Add(\"One\");\n                \
    \    break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ef2ef07d67943748d1f1a43061ee324>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ef2ef07d67943748d1f1a43061ee324>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long item in arr) {\n            if (item >= 1 && item <= 9)\
    \ {\n                switch (item) {\n                    case 1:\n          \
    \              result.Add(\"One\");\n                        break;\n        \
    \            case 2:\n                        result.Add(\"Two\");\n         \
    \               break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Reverse();\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0155fc2ad34a12b28072b991881c4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa0155fc2ad34a12b28072b991881c4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item >= 1 &&\
    \ item <= 9) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long num in arr) {\n            if (num >= 1 && num <= 9) {\n\
    \                switch (num) {\n                    case 1:\n               \
    \         result.Add(\"One\");\n                        break;\n             \
    \       case 2:\n                        result.Add(\"Two\");\n              \
    \          break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Sort();\n        result.Reverse();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2182cca60d2d4a8fad4b953215235d91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2182cca60d2d4a8fad4b953215235d91>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long l in arr) {\n            if (l > 0 && l < 10) {\n     \
    \           result.Add(l.ToString());\n            }\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        for (int i = 0; i < result.Count; i++) {\n\
    \            switch (result[i]) {\n                case \"1\":\n             \
    \       result[i] = \"One\";\n                    break;\n                case\
    \ \"2\":\n                    result[i] = \"Two\";\n                    break;\n\
    \                case \"3\":\n                    result[i] = \"Three\";\n   \
    \                 break;\n                case \"4\":\n                    result[i]\
    \ = \"Four\";\n                    break;\n                case \"5\":\n     \
    \               result[i] = \"Five\";\n                    break;\n          \
    \      case \"6\":\n                    result[i] = \"Six\";\n               \
    \     break;\n                case \"7\":\n                    result[i] = \"\
    Seven\";\n                    break;\n                case \"8\":\n          \
    \          result[i] = \"Eight\";\n                    break;\n              \
    \  case \"9\":\n                    result[i] = \"Nine\";\n                  \
    \  break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c1a94efc5414491b68ca2f13a84db06>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c1a94efc5414491b68ca2f13a84db06>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // TODO: Implement ByLength\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <a2e0684e037d485394e33a1e58a4f5e9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <a2e0684e037d485394e33a1e58a4f5e9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item > 0 &&\
    \ item < 10) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57844d72044b46069ec3807978612d35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57844d72044b46069ec3807978612d35>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var i in arr) {\n            if (i >= 1 && i <=\
    \ 9) {\n                result.Add(dict[i]);\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2d453a3365174386bb372da81d060ceb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2d453a3365174386bb372da81d060ceb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (dict.ContainsKey(item))\
    \ {\n                result.Add(dict[item]);\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786920e8c2144c609c10eca2ec788907>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786920e8c2144c609c10eca2ec788907>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>() {\n            {1, \"One\"},\n \
    \           {2, \"Two\"},\n            {3, \"Three\"},\n            {4, \"Four\"\
    },\n            {5, \"Five\"},\n            {6, \"Six\"},\n            {7, \"\
    Seven\"},\n            {8, \"Eight\"},\n            {9, \"Nine\"}\n        };\n\
    \        foreach (var item in arr) {\n            if (dict.ContainsKey(item))\
    \ {\n                result.Add(dict[item]);\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f992b89a2dd24b9fab7d66afad27e192>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f992b89a2dd24b9fab7d66afad27e192>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var map = new Dictionary<long, string>() {\n            {1, \"One\"},\n  \
    \          {2, \"Two\"},\n            {3, \"Three\"},\n            {4, \"Four\"\
    },\n            {5, \"Five\"},\n            {6, \"Six\"},\n            {7, \"\
    Seven\"},\n            {8, \"Eight\"},\n            {9, \"Nine\"}\n        };\n\
    \        foreach (var item in arr) {\n            if (item >= 1 && item <= 9)\
    \ {\n                result.Add(map[item]);\n            }\n        }\n      \
    \  result.Sort();\n        result.Reverse();\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a51ab56846a1450d83932a611a3cd172>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a51ab56846a1450d83932a611a3cd172>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <912a667dda29476d8f148898abb013d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <912a667dda29476d8f148898abb013d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <912a667dda29476d8f148898abb013d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <912a667dda29476d8f148898abb013d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <912a667dda29476d8f148898abb013d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <912a667dda29476d8f148898abb013d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            switch (i) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Sort();\n        result.Reverse();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f61fbe576f594edd88f88123d759e0b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f61fbe576f594edd88f88123d759e0b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        return arr.Where(x => x > 0 && x < 10).OrderBy(x\
    \ => x).Reverse().Select(x => {\n            switch (x) {\n                case\
    \ 1: return \"One\";\n                case 2: return \"Two\";\n              \
    \  case 3: return \"Three\";\n                case 4: return \"Four\";\n     \
    \           case 5: return \"Five\";\n                case 6: return \"Six\";\n\
    \                case 7: return \"Seven\";\n                case 8: return \"\
    Eight\";\n                case 9: return \"Nine\";\n                default: return\
    \ \"\";\n            }\n        }).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L,\
    \ (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abffdace0bbf4c0d986b3e2ff6fe0601>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abffdace0bbf4c0d986b3e2ff6fe0601>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long x in arr) {\n            if (x >= 1 && x <= 9) {\n    \
    \            switch (x) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Reverse();\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c45f20ecdf347fd9dd0c8ca5b4d64bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c45f20ecdf347fd9dd0c8ca5b4d64bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var sorted = arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).Reverse();\n\
    \        foreach (var item in sorted) {\n            switch (item) {\n       \
    \         case 1:\n                    result.Add(\"One\");\n                \
    \    break;\n                case 2:\n                    result.Add(\"Two\");\n\
    \                    break;\n                case 3:\n                    result.Add(\"\
    Three\");\n                    break;\n                case 4:\n             \
    \       result.Add(\"Four\");\n                    break;\n                case\
    \ 5:\n                    result.Add(\"Five\");\n                    break;\n\
    \                case 6:\n                    result.Add(\"Six\");\n         \
    \           break;\n                case 7:\n                    result.Add(\"\
    Seven\");\n                    break;\n                case 8:\n             \
    \       result.Add(\"Eight\");\n                    break;\n                case\
    \ 9:\n                    result.Add(\"Nine\");\n                    break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ef2ef07d67943748d1f1a43061ee324>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4ef2ef07d67943748d1f1a43061ee324>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>();\n        dict.Add(1, \"One\");\n\
    \        dict.Add(2, \"Two\");\n        dict.Add(3, \"Three\");\n        dict.Add(4,\
    \ \"Four\");\n        dict.Add(5, \"Five\");\n        dict.Add(6, \"Six\");\n\
    \        dict.Add(7, \"Seven\");\n        dict.Add(8, \"Eight\");\n        dict.Add(9,\
    \ \"Nine\");\n        foreach (var item in arr) {\n            if (item >= 1 &&\
    \ item <= 9) {\n                result.Add(dict[item]);\n            }\n     \
    \   }\n        result.Sort();\n        result.Reverse();\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d375686bccf944429ccad0e406c7f975>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   foreach (var item in arr) {\n            if (item >= 1 && item <= 9) {\n \
    \               result.Add(item.ToString());\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        for (int i = 0; i < result.Count;\
    \ i++) {\n            switch (result[i]) {\n                case \"1\":\n    \
    \                result[i] = \"One\";\n                    break;\n          \
    \      case \"2\":\n                    result[i] = \"Two\";\n               \
    \     break;\n                case \"3\":\n                    result[i] = \"\
    Three\";\n                    break;\n                case \"4\":\n          \
    \          result[i] = \"Four\";\n                    break;\n               \
    \ case \"5\":\n                    result[i] = \"Five\";\n                   \
    \ break;\n                case \"6\":\n                    result[i] = \"Six\"\
    ;\n                    break;\n                case \"7\":\n                 \
    \   result[i] = \"Seven\";\n                    break;\n                case \"\
    8\":\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case \"9\":\n                    result[i] = \"Nine\";\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e855c9daa978402bb038ab47fa2582e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e855c9daa978402bb038ab47fa2582e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   foreach (var item in arr) {\n            if (item >= 1 && item <= 9) {\n \
    \               result.Add(item.ToString());\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        for (int i = 0; i < result.Count;\
    \ i++) {\n            switch (result[i]) {\n                case \"1\":\n    \
    \                result[i] = \"One\";\n                    break;\n          \
    \      case \"2\":\n                    result[i] = \"Two\";\n               \
    \     break;\n                case \"3\":\n                    result[i] = \"\
    Three\";\n                    break;\n                case \"4\":\n          \
    \          result[i] = \"Four\";\n                    break;\n               \
    \ case \"5\":\n                    result[i] = \"Five\";\n                   \
    \ break;\n                case \"6\":\n                    result[i] = \"Six\"\
    ;\n                    break;\n                case \"7\":\n                 \
    \   result[i] = \"Seven\";\n                    break;\n                case \"\
    8\":\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case \"9\":\n                    result[i] = \"Nine\";\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e855c9daa978402bb038ab47fa2582e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e855c9daa978402bb038ab47fa2582e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long num in arr) {\n            if (num >= 1 && num <= 9) {\n\
    \                result.Add(num.ToString());\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        for (int i = 0; i < result.Count;\
    \ i++) {\n            switch (result[i]) {\n                case \"1\":\n    \
    \                result[i] = \"One\";\n                    break;\n          \
    \      case \"2\":\n                    result[i] = \"Two\";\n               \
    \     break;\n                case \"3\":\n                    result[i] = \"\
    Three\";\n                    break;\n                case \"4\":\n          \
    \          result[i] = \"Four\";\n                    break;\n               \
    \ case \"5\":\n                    result[i] = \"Five\";\n                   \
    \ break;\n                case \"6\":\n                    result[i] = \"Six\"\
    ;\n                    break;\n                case \"7\":\n                 \
    \   result[i] = \"Seven\";\n                    break;\n                case \"\
    8\":\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case \"9\":\n                    result[i] = \"Nine\";\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0db7add99487491195dad3ba1dbac48a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0db7add99487491195dad3ba1dbac48a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            switch (i) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Sort();\n        result.Reverse();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f61fbe576f594edd88f88123d759e0b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f61fbe576f594edd88f88123d759e0b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <912a667dda29476d8f148898abb013d5>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <912a667dda29476d8f148898abb013d5>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803466
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   foreach (var item in arr) {\n            if (item > 0 && item < 10) {\n  \
    \              result.Add(item.ToString());\n            }\n        }\n      \
    \  result.Sort();\n        result.Reverse();\n        for (int i = 0; i < result.Count;\
    \ i++) {\n            switch (result[i]) {\n                case \"1\":\n    \
    \                result[i] = \"One\";\n                    break;\n          \
    \      case \"2\":\n                    result[i] = \"Two\";\n               \
    \     break;\n                case \"3\":\n                    result[i] = \"\
    Three\";\n                    break;\n                case \"4\":\n          \
    \          result[i] = \"Four\";\n                    break;\n               \
    \ case \"5\":\n                    result[i] = \"Five\";\n                   \
    \ break;\n                case \"6\":\n                    result[i] = \"Six\"\
    ;\n                    break;\n                case \"7\":\n                 \
    \   result[i] = \"Seven\";\n                    break;\n                case \"\
    8\":\n                    result[i] = \"Eight\";\n                    break;\n\
    \                case \"9\":\n                    result[i] = \"Nine\";\n    \
    \                break;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7b5872f87e34e0e97953a309e905008>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7b5872f87e34e0e97953a309e905008>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803468
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>() {\n            {1, \"One\"},\n \
    \           {2, \"Two\"},\n            {3, \"Three\"},\n            {4, \"Four\"\
    },\n            {5, \"Five\"},\n            {6, \"Six\"},\n            {7, \"\
    Seven\"},\n            {8, \"Eight\"},\n            {9, \"Nine\"}\n        };\n\
    \        foreach (var item in arr) {\n            if (item > 0 && item < 10) {\n\
    \                result.Add(dict[item]);\n            }\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L,\
    \ (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\"\
    , (string)\"Three\", (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"\
    One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1547c4c734844a5ba677401dbd2d782c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1547c4c734844a5ba677401dbd2d782c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        var result = new List<string>();\n     \
    \   var dict = new Dictionary<long, string>() {\n            {1, \"One\"},\n \
    \           {2, \"Two\"},\n            {3, \"Three\"},\n            {4, \"Four\"\
    },\n            {5, \"Five\"},\n            {6, \"Six\"},\n            {7, \"\
    Seven\"},\n            {8, \"Eight\"},\n            {9, \"Nine\"}\n        };\n\
    \        foreach (var item in arr) {\n            if (dict.ContainsKey(item))\
    \ {\n                result.Add(dict[item]);\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f992b89a2dd24b9fab7d66afad27e192>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f992b89a2dd24b9fab7d66afad27e192>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // TODO: Implement this function\n     \
    \   return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <4ef88e41c1984921a62f318979ae324f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <4ef88e41c1984921a62f318979ae324f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // TODO: Implement ByLength\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <a2e0684e037d485394e33a1e58a4f5e9>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <a2e0684e037d485394e33a1e58a4f5e9>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803467
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Your code goes here.\n        // You\
    \ can add additional classes to this project.\n        return null;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L, (long)2L,\
    \ (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\", (string)\"\
    Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"Two\"\
    , (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
    \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
    \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
    \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
    , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
    Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00067] in <b236365a26294bbba93fdf36439e07fc>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00067] in <b236365a26294bbba93fdf36439e07fc>:0\
    \ \n"
  stdout: ''
  timestamp: 1659803469
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            switch (i) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Reverse();\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
    \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
    , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
    Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>())).Equals((new List<string>())));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new List<string>(new\
    \ string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
    \ long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <abeecca99d2c45a3b7be967bf857f734>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803467
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each\
    \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n\
    \    // >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    //\
    \ If the list is empty, return an empty list:\n    // >>> ByLength((new List<long>()))\n\
    \    // (new List<string>())\n    // If the list has any strange number ignore\
    \ it:\n    // >>> ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n\
    \    // (new List<string>(new string[]{(string)\"One\"}))\n    public static List<string>\
    \ ByLength(List<long> arr) {\n        // Write your code here\n        // To print\
    \ results to the standard output you can use Console.WriteLine()\n        // Example:\
    \ Console.WriteLine(\"Hello world!\");\n        List<string> result = new List<string>();\n\
    \        foreach (long l in arr) {\n            if (l >= 1 && l <= 9) {\n    \
    \            switch (l) {\n                    case 1:\n                     \
    \   result.Add(\"One\");\n                        break;\n                   \
    \ case 2:\n                        result.Add(\"Two\");\n                    \
    \    break;\n                    case 3:\n                        result.Add(\"\
    Three\");\n                        break;\n                    case 4:\n     \
    \                   result.Add(\"Four\");\n                        break;\n  \
    \                  case 5:\n                        result.Add(\"Five\");\n  \
    \                      break;\n                    case 6:\n                 \
    \       result.Add(\"Six\");\n                        break;\n               \
    \     case 7:\n                        result.Add(\"Seven\");\n              \
    \          break;\n                    case 8:\n                        result.Add(\"\
    Eight\");\n                        break;\n                    case 9:\n     \
    \                   result.Add(\"Nine\");\n                        break;\n  \
    \              }\n            }\n        }\n        result.Sort();\n        result.Reverse();\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L,\
    \ (long)4L, (long)5L, (long)8L, (long)2L, (long)3L}))).Equals((new List<string>(new\
    \ string[]{(string)\"Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\"\
    , (string)\"Two\", (string)\"Two\", (string)\"One\", (string)\"One\"}))));\n \
    \   Debug.Assert(ByLength((new List<long>())).Equals((new List<string>())));\n\
    \    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L, (long)55L}))).Equals((new\
    \ List<string>(new string[]{(string)\"One\"}))));\n    Debug.Assert(ByLength((new\
    \ List<long>(new long[]{(long)1L, (long)-1L, (long)3L, (long)2L}))).Equals((new\
    \ List<string>(new string[]{(string)\"Three\", (string)\"Two\", (string)\"One\"\
    }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)9L, (long)4L,\
    \ (long)8L}))).Equals((new List<string>(new string[]{(string)\"Nine\", (string)\"\
    Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a59a5c0a967a4386b8306fa87752e8fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a59a5c0a967a4386b8306fa87752e8fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803469
