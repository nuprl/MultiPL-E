name: HumanEval_115_max_fill
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a rectangular grid of wells. Each row represents\
  \ a single well,\n    // and each 1 in a row represents a single unit of water.\n\
  \    // Each well has a corresponding bucket that can be used to extract water from\
  \ it, \n    // and all buckets have the same capacity.\n    // Your task is to use\
  \ the buckets to empty the wells.\n    // Output the number of times you need to\
  \ lower the buckets.\n    // Example 1:\n    // >>> MaxFill((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)0L, (long)0L, (long)1L,\
  \ (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)1L, (long)0L,\
  \ (long)0L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L})})), (1L))\n    // (6L)\n    // Example 2:\n    // >>> MaxFill((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
  \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
  \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
  \ (long)1L, (long)1L, (long)1L})})), (2L))\n    // (5L)\n    // Example 3:\n   \
  \ // >>> MaxFill((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
  \ long[]{(long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
  \ (long)0L, (long)0L})})), (5L))\n    // (0L)\n    // Constraints:\n    // * all\
  \ wells have the same length\n    // * 1 <= grid.length <= 10^2\n    // * 1 <= grid[:,1].length\
  \ <= 10^2\n    // * grid[i][j] -> 0 | 1\n    // * 1 <= capacity <= 10\n    public\
  \ static long MaxFill(List<List<long>> grid, long capacity) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MaxFill((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
  \ (long)0L, (long)1L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L,\
  \ (long)1L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)1L, (long)1L, (long)1L})})), (1L)) == (6L));\n    Debug.Assert(MaxFill((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
  \ (long)0L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
  \ (long)0L, (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)1L, (long)1L, (long)1L}), (List<long>)new List<long>(new long[]{(long)0L,\
  \ (long)1L, (long)1L, (long)1L})})), (2L)) == (5L));\n    Debug.Assert(MaxFill((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)0L,\
  \ (long)0L, (long)0L}), (List<long>)new List<long>(new long[]{(long)0L, (long)0L,\
  \ (long)0L})})), (5L)) == (0L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L})})), (2L)) == (4L));\n    Debug.Assert(MaxFill((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L}), (List<long>)new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L})})), (9L)) == (2L));\n    }\n\n}\n"
completions: ["        // Your code goes here.\n        return 0;", "        // your\
    \ code goes here\n        return 0;", "        long maxFill = 0;\n        for\
    \ (int i = 0; i < grid.Count; i++) {\n            for (int j = 0; j < grid[i].Count;\
    \ j++) {\n                if (grid[i][j] == 1) {\n                    maxFill\
    \ += capacity;\n                }\n            }\n        }\n        return maxFill;",
  "        long result = 0;\n        // Your code goes here.\n        return result;",
  '        return 0;', "        // your code goes here\n        return 0;", "    \
    \    // your code here\n        return 0;", "        // your code here\n     \
    \   return 0;", "        // your code here\n        return 0;", "        long\
    \ maxFill = 0;\n        for (long i = 0; i < grid.Count; i++) {\n            for\
    \ (long j = 0; j < grid[(int)i].Count; j++) {\n                if (grid[(int)i][(int)j]\
    \ == 1) {\n                    maxFill += capacity;\n                }\n     \
    \       }\n        }\n        return maxFill;", "        // Your code goes here.\n\
    \        return 0;", "        // Your code goes here.\n        return 0;", '        return
    0;', "        long maxFill = 0;\n        long maxFillRow = 0;\n        long maxFillCol\
    \ = 0;\n        long maxFillRowCount = 0;\n        long maxFillColCount = 0;\n\
    \        long maxFillRowCapacity = 0;\n        long maxFillColCapacity = 0;\n\
    \        long maxFillRowCapacityCount = 0;\n        long maxFillColCapacityCount\
    \ = 0;\n        long maxFillRowCapacityCountMax = 0;\n        long maxFillColCapacityCountMax\
    \ = 0;\n        long maxFillRowCapacityCountMaxCount = 0;\n        long maxFillColCapacityCountMaxCount\
    \ = 0;\n        long maxFillRowCapacityCountMaxCountMax = 0;\n        long maxFillColCapacityCountMaxCountMax\
    \ = 0;\n        long maxFillRowCapacityCountMaxCountMaxCount = 0;\n        long\
    \ maxFillColCapacityCountMaxCountMaxCount = 0;\n        long maxFillRowCapacityCountMaxCountMaxCountMax\
    \ = 0;\n        long maxFillColCapacityCountMaxCountMaxCountMax = 0;\n       \
    \ long maxFillRowCapacityCountMaxCountMaxCountMaxCount = 0;\n        long maxFillColCapacityCountMaxCountMaxCountMaxCount\
    \ = 0;\n        long maxFillRowCapacityCountMaxCountMaxCountMaxCountMax = 0;\n\
    \        long maxFillColCapacityCountMaxCountMaxCountMaxCountMax = 0;\n      \
    \  long maxFillRowCapacityCountMaxCountMaxCountMaxCountMaxCount = 0;\n       \
    \ long maxFillColCapacityCountMaxCountMaxCountMaxCountMaxCount = 0;\n        long\
    \ maxFillRowCapacityCountMaxCountMaxCountMaxCountMaxCountMax = 0;\n        long\
    \ maxFillColCapacityCountMaxCountMaxCountMaxCountMaxCountMax = 0;\n        long\
    \ maxFillRowCapacityCountMaxCountMaxCountMaxCountMaxCountMaxCount = 0;\n     \
    \   long maxFillColCapacityCountMaxCountMaxCountMaxCountMaxCountMaxCount = 0;\n\
    \        long maxFillRowCapacityCountMaxCountMaxCountMaxCountMaxCountMaxCountMax\
    \ = 0;\n        long maxFillColCapacityCountMaxCountMaxCountMaxCountMaxCountMaxCountMax\
    \ = 0;\n        long maxFillRowCapacityCountMaxCountMaxCountMaxCountMaxCountMaxCountMaxCount\
    \ = 0;", "        long result = 0;\n        // your code goes here\n        return\
    \ result;", "        // your code goes here\n        return 0;", "        long\
    \ maxFill = 0;\n        for (int i = 0; i < grid.Count; i++) {\n            for\
    \ (int j = 0; j < grid[i].Count; j++) {\n                if (grid[i][j] == 1)\
    \ {\n                    maxFill += capacity;\n                }\n           \
    \ }\n        }\n        return maxFill;", "        // your code goes here\n  \
    \      return 0;", "        // your code goes here\n        return 0;", "    \
    \    // your code goes here\n        return 0;"]
stop_tokens:
- "\n    }\n"
