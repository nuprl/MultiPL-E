name: HumanEval_94_skjkasdkd
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list of integers.\n    // You need to find the\
  \ largest prime value and return the sum of its digits.\n    // Examples:\n    //\
  \ >>> Skjkasdkd((new List<long>(new long[]{(long)0L, (long)3L, (long)2L, (long)1L,\
  \ (long)3L, (long)5L, (long)7L, (long)4L, (long)5L, (long)5L, (long)5L, (long)2L,\
  \ (long)181L, (long)32L, (long)4L, (long)32L, (long)3L, (long)2L, (long)32L, (long)324L,\
  \ (long)4L, (long)3L})))\n    // (10L)\n    // >>> Skjkasdkd((new List<long>(new\
  \ long[]{(long)1L, (long)0L, (long)1L, (long)8L, (long)2L, (long)4597L, (long)2L,\
  \ (long)1L, (long)3L, (long)40L, (long)1L, (long)2L, (long)1L, (long)2L, (long)4L,\
  \ (long)2L, (long)5L, (long)1L})))\n    // (25L)\n    // >>> Skjkasdkd((new List<long>(new\
  \ long[]{(long)1L, (long)3L, (long)1L, (long)32L, (long)5107L, (long)34L, (long)83278L,\
  \ (long)109L, (long)163L, (long)23L, (long)2323L, (long)32L, (long)30L, (long)1L,\
  \ (long)9L, (long)3L})))\n    // (13L)\n    // >>> Skjkasdkd((new List<long>(new\
  \ long[]{(long)0L, (long)724L, (long)32L, (long)71L, (long)99L, (long)32L, (long)6L,\
  \ (long)0L, (long)5L, (long)91L, (long)83L, (long)0L, (long)5L, (long)6L})))\n \
  \   // (11L)\n    // >>> Skjkasdkd((new List<long>(new long[]{(long)0L, (long)81L,\
  \ (long)12L, (long)3L, (long)1L, (long)21L})))\n    // (3L)\n    // >>> Skjkasdkd((new\
  \ List<long>(new long[]{(long)0L, (long)8L, (long)1L, (long)2L, (long)1L, (long)7L})))\n\
  \    // (7L)\n    public static long Skjkasdkd(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Skjkasdkd((new\
  \ List<long>(new long[]{(long)0L, (long)3L, (long)2L, (long)1L, (long)3L, (long)5L,\
  \ (long)7L, (long)4L, (long)5L, (long)5L, (long)5L, (long)2L, (long)181L, (long)32L,\
  \ (long)4L, (long)32L, (long)3L, (long)2L, (long)32L, (long)324L, (long)4L, (long)3L})))\
  \ == (10L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)1L, (long)0L,\
  \ (long)1L, (long)8L, (long)2L, (long)4597L, (long)2L, (long)1L, (long)3L, (long)40L,\
  \ (long)1L, (long)2L, (long)1L, (long)2L, (long)4L, (long)2L, (long)5L, (long)1L})))\
  \ == (25L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)1L, (long)32L, (long)5107L, (long)34L, (long)83278L, (long)109L, (long)163L,\
  \ (long)23L, (long)2323L, (long)32L, (long)30L, (long)1L, (long)9L, (long)3L})))\
  \ == (13L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)724L,\
  \ (long)32L, (long)71L, (long)99L, (long)32L, (long)6L, (long)0L, (long)5L, (long)91L,\
  \ (long)83L, (long)0L, (long)5L, (long)6L}))) == (11L));\n    Debug.Assert(Skjkasdkd((new\
  \ List<long>(new long[]{(long)0L, (long)81L, (long)12L, (long)3L, (long)1L, (long)21L})))\
  \ == (3L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)8L,\
  \ (long)1L, (long)2L, (long)1L, (long)7L}))) == (7L));\n    Debug.Assert(Skjkasdkd((new\
  \ List<long>(new long[]{(long)8191L}))) == (19L));\n    Debug.Assert(Skjkasdkd((new\
  \ List<long>(new long[]{(long)8191L, (long)123456L, (long)127L, (long)7L}))) ==\
  \ (19L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)127L, (long)97L,\
  \ (long)8192L}))) == (10L));\n    }\n\n}\n"
completions: ["        long max = 0;\n        foreach (long l in lst) {\n        \
    \    if (IsPrime(l)) {\n                max = l;\n            }\n        }\n \
    \       return SumDigits(max);", "        long max = 0;\n        foreach (long\
    \ i in lst) {\n            if (IsPrime(i)) {\n                max = i;\n     \
    \       }\n        }\n        return SumOfDigits(max);", "        long largestPrime\
    \ = 0;\n        foreach (long num in lst) {\n            if (IsPrime(num)) {\n\
    \                largestPrime = num;\n            }\n        }\n        return\
    \ SumDigits(largestPrime);", "        long max = 0;\n        foreach (long num\
    \ in lst) {\n            if (IsPrime(num)) {\n                if (num > max) {\n\
    \                    max = num;\n                }\n            }\n        }\n\
    \        return SumDigits(max);", "        // Your code goes here.\n        return\
    \ 0L;", "        long max = 0;\n        foreach (long i in lst) {\n          \
    \  if (IsPrime(i)) {\n                max = i;\n            }\n        }\n   \
    \     return SumDigits(max);", "        long max = 0;\n        foreach (long i\
    \ in lst) {\n            if (i > max) {\n                max = i;\n          \
    \  }\n        }\n        long sum = 0;\n        for (long i = 2; i <= max; i++)\
    \ {\n            bool isPrime = true;\n            for (long j = 2; j < i; j++)\
    \ {\n                if (i % j == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (isPrime) {\n                sum += i;\n            }\n        }\n        return\
    \ sum;", "        long max = 0;\n        foreach (long i in lst) {\n         \
    \   if (i > max) {\n                max = i;\n            }\n        }\n     \
    \   long sum = 0;\n        for (long i = 2; i <= max; i++) {\n            bool\
    \ isPrime = true;\n            for (long j = 2; j < i; j++) {\n              \
    \  if (i % j == 0) {\n                    isPrime = false;\n                 \
    \   break;\n                }\n            }\n            if (isPrime) {\n   \
    \             long temp = i;\n                while (temp > 0) {\n           \
    \         sum += temp % 10;\n                    temp /= 10;\n               \
    \ }\n            }\n        }\n        return sum;", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (i > max) {\n             \
    \   max = i;\n            }\n        }\n        long sum = 0;\n        while (max\
    \ > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n  \
    \      return sum;", "        long max = 0;\n        foreach (long i in lst) {\n\
    \            if (i > max) {\n                max = i;\n            }\n       \
    \ }\n        long sum = 0;\n        for (long i = 2; i <= max; i++) {\n      \
    \      bool isPrime = true;\n            for (long j = 2; j < i; j++) {\n    \
    \            if (i % j == 0) {\n                    isPrime = false;\n       \
    \             break;\n                }\n            }\n            if (isPrime)\
    \ {\n                long temp = i;\n                while (temp > 0) {\n    \
    \                sum += temp % 10;\n                    temp /= 10;\n        \
    \        }\n            }\n        }\n        return sum;", "        long max\
    \ = 0;\n        foreach (long i in lst) {\n            if (i > max) {\n      \
    \          max = i;\n            }\n        }\n        long sum = 0;\n       \
    \ while (max > 0) {\n            sum += max % 10;\n            max /= 10;\n  \
    \      }\n        return sum;", "        long max = 0;\n        foreach (long\
    \ i in lst) {\n            if (i > max) {\n                if (IsPrime(i)) {\n\
    \                    max = i;\n                }\n            }\n        }\n \
    \       return SumDigits(max);", "        long largestPrime = 0;\n        foreach\
    \ (long i in lst) {\n            if (IsPrime(i)) {\n                if (i > largestPrime)\
    \ {\n                    largestPrime = i;\n                }\n            }\n\
    \        }\n        return DigitSum(largestPrime);", "        long max = lst.Max();\n\
    \        long sum = 0;\n        for (long i = max; i > 1; i--) {\n           \
    \ if (lst.Contains(i) && IsPrime(i)) {\n                sum = SumDigits(i);\n\
    \                break;\n            }\n        }\n        return sum;", "   \
    \     long largestPrime = 0;\n        foreach (long num in lst) {\n          \
    \  if (IsPrime(num)) {\n                largestPrime = num;\n            }\n \
    \       }\n        return SumDigits(largestPrime);", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (IsPrime(i)) {\n          \
    \      if (i > max) {\n                    max = i;\n                }\n     \
    \       }\n        }\n        return SumDigits(max);", "        long largestPrime\
    \ = 0;\n        foreach (long num in lst) {\n            if (IsPrime(num)) {\n\
    \                largestPrime = num;\n            }\n        }\n        return\
    \ SumDigits(largestPrime);", "        // Your code goes here.\n        return\
    \ 0L;", "        long max = 0;\n        foreach (long x in lst) {\n          \
    \  if (x > max) {\n                max = x;\n            }\n        }\n      \
    \  long maxPrime = 0;\n        for (long i = max; i > 0; i--) {\n            if\
    \ (IsPrime(i)) {\n                maxPrime = i;\n                break;\n    \
    \        }\n        }\n        long sum = 0;\n        while (maxPrime > 0) {\n\
    \            sum += maxPrime % 10;\n            maxPrime /= 10;\n        }\n \
    \       return sum;", "        // Your code goes here.\n        return (long)0L;"]
stop_tokens:
- "\n    }\n"
