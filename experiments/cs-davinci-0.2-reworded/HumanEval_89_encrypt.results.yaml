language: cs
name: HumanEval_89_encrypt
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       foreach (char c in s) {\n            int index = alphabet.IndexOf(c);\n
    \           encrypted += alphabet[(index + (2 * 2)) % 26];\n        }\n        return
    encrypted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // TODO:
    Implement this function\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <554bfec0382b4bb58f8e39e4cf39dc98>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <554bfec0382b4bb58f8e39e4cf39dc98>:0
    \n"
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        foreach
    (char c in s) {\n            int index = alphabet.IndexOf(c);\n            index
    = (index + 2 * 2) % 26;\n            result += alphabet[index];\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + 2) % 26];\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da78c84410b34785858aa1e8638685d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da78c84410b34785858aa1e8638685d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       foreach (char c in s) {\n            int index = alphabet.IndexOf(c);\n
    \           encrypted += alphabet[(index + 2 * 2) % 26];\n        }\n        return
    encrypted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = index + 2 * 2;\n            if (newIndex > 25) {\n
    \               newIndex = newIndex - 26;\n            }\n            result +=
    alphabet[newIndex];\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            int ascii = (int)c;\n
    \           if (ascii >= 97 && ascii <= 122) {\n                ascii += 4;\n
    \               if (ascii > 122) {\n                    ascii -= 26;\n                }\n
    \           }\n            result += (char)ascii;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            int i = c - 'a';\n
    \           i = (i + 2 * 2) % 26;\n            result += (char)(i + 'a');\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index == -1) {\n                encrypted += s[i];\n            }
    else {\n                encrypted += alphabet[(index + 2) % 26];\n            }\n
    \       }\n        return encrypted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dce2d05c8488499096d51e4d46e8bb3a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dce2d05c8488499096d51e4d46e8bb3a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           index = (index + 2) * 2;\n            if (index > 25) {\n                index
    = index - 26;\n            }\n            result += alphabet[index];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2d8cea236bd4e7198139f6965997829>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f2d8cea236bd4e7198139f6965997829>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (2 * (i + 1))) % 26];\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c7e50a5c4d74c41841d4735b6deaff6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c7e50a5c4d74c41841d4735b6deaff6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = (index + (2 * 2)) % 26;\n            encrypted += alphabet[newIndex];\n
    \       }\n        return encrypted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (2 * 2)) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = (index + (2 * 2)) % 26;\n            encrypted += alphabet[newIndex];\n
    \       }\n        return encrypted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (2 * 2)) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            result
    += (char)((s[i] - 'a' + 2 * 2) % 26 + 'a');\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i])
    + 2;\n            if (index > 25) {\n                index = index - 26;\n            }\n
    \           result += alphabet[index];\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e63eeef646344509bf7589636b0497b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e63eeef646344509bf7589636b0497b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = (index + (2 * 2)) % 26;\n            encrypted += alphabet[newIndex];\n
    \       }\n        return encrypted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = index + 2 * (i + 1);\n            if (newIndex > alphabet.Length
    - 1) {\n                newIndex = newIndex - alphabet.Length;\n            }\n
    \           result += alphabet[newIndex];\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e428433e05df4215bef25435848a330d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e428433e05df4215bef25435848a330d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = (index + 2) * 2;\n            if (newIndex > 25) {\n
    \               newIndex = newIndex - 26;\n            }\n            encrypted
    += alphabet[newIndex];\n        }\n        return encrypted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e30ead26d5834fab864888bcf6b089ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e30ead26d5834fab864888bcf6b089ef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index == -1) {\n                encrypted += s[i];\n            }
    else {\n                encrypted += alphabet[(index + (2 * 2)) % alphabet.Length];\n
    \           }\n        }\n        return encrypted;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           encrypted += alphabet[(index + (2 * 2)) % 26];\n        }\n        return
    encrypted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           encrypted += alphabet[(index + (2 * 2)) % 26];\n        }\n        return
    encrypted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            result
    += (char)(s[i] + 2 * 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75d87136351f4190aecd20300f6e979f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75d87136351f4190aecd20300f6e979f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = (index + (2 * 2)) % 26;\n            encrypted += alphabet[newIndex];\n
    \       }\n        return encrypted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index == -1) {\n                encrypted += s[i];\n            }
    else {\n                encrypted += alphabet[(index + (2 * 2)) % alphabet.Length];\n
    \           }\n        }\n        return encrypted;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           encrypted += alphabet[(index + 2 * 2) % alphabet.Length];\n        }\n
    \       return encrypted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + 2 * 2) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index == -1) {\n                result += s[i];\n            }
    else {\n                result += alphabet[(index + 2) % 26];\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <840bca94807f40818d70444338df2ba7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <840bca94807f40818d70444338df2ba7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = (index + (2 * 2)) % 26;\n            encrypted += alphabet[newIndex];\n
    \       }\n        return encrypted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index == -1) {\n                encrypted += s[i];\n            }
    else {\n                encrypted += alphabet[(index + (2 * 2)) % alphabet.Length];\n
    \           }\n        }\n        return encrypted;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + 2) % 26];\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da78c84410b34785858aa1e8638685d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da78c84410b34785858aa1e8638685d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            char
    c = s[i];\n            int ascii = (int)c;\n            ascii += 2 * 2;\n            if
    (ascii > 122) {\n                ascii -= 26;\n            }\n            result
    += (char)ascii;\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            int
    index = alphabet.IndexOf(s[i]);\n            index = (index + 2) * 2;\n            if
    (index > 25) {\n                index = index - 26;\n            }\n            result
    += alphabet[index];\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ac47be4795984f899d3d02ce144e1e33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ac47be4795984f899d3d02ce144e1e33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            result
    += (char)((s[i] + 2 * 2 - 97) % 26 + 97);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index == -1) {\n                result += s[i];\n            }
    else {\n                result += alphabet[(index + (2 * 2)) % alphabet.Length];\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Write
    your code here.\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3cac5a4235624a03836fc83772131ca0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3cac5a4235624a03836fc83772131ca0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = (index + 2 * 2) % 26;\n            encrypted += alphabet[newIndex];\n
    \       }\n        return encrypted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (2 * 2)) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + 2 * 2) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // TODO:
    Implement this function\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f30e2ec16586428986aa8e82919b7eed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f30e2ec16586428986aa8e82919b7eed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            result
    += (char)(s[i] + 2 * 2);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75d87136351f4190aecd20300f6e979f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75d87136351f4190aecd20300f6e979f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Create
    a string of the alphabet\n        string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n
    \       // Create a string of the alphabet rotated by two multiplied by two places\n
    \       string alphabet_rotated = alphabet.Substring(2 * 2) + alphabet.Substring(0,
    2 * 2);\n        // Create a string to hold the encrypted string\n        string
    encrypted_string = \"\";\n        // Loop through the string to be encrypted\n
    \       for (int i = 0; i < s.Length; i++) {\n            // Get the index of
    the current character in the alphabet\n            int index = alphabet.IndexOf(s[i]);\n
    \           // Add the character at the index in the alphabet_rotated to the encrypted
    string\n            encrypted_string += alphabet_rotated[index];\n        }\n
    \       // Return the encrypted string\n        return encrypted_string;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Write
    your code here\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20ec211f9c2d4e39956814e486cff129>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <20ec211f9c2d4e39956814e486cff129>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index + 2 * 2 > alphabet.Length - 1) {\n                result
    += alphabet[(index + 2 * 2) - alphabet.Length];\n            } else {\n                result
    += alphabet[index + 2 * 2];\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = (index + (2 * 2)) % 26;\n            result += alphabet[newIndex];\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           encrypted += alphabet[(index + (2 * 2)) % 26];\n        }\n        return
    encrypted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           index = (index + (2 * 2)) % alphabet.Length;\n            encrypted
    += alphabet[index];\n        }\n        return encrypted;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    alphabet = \"abcdefghijklmnopqrstuvwxyz\".ToCharArray();\n        char[] encrypted
    = new char[s.Length];\n        for (int i = 0; i < s.Length; i++) {\n            int
    index = Array.IndexOf(alphabet, s[i]);\n            encrypted[i] = alphabet[(index
    + (2 * 2)) % alphabet.Length];\n        }\n        return new string(encrypted);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        foreach
    (char c in s) {\n            int index = alphabet.IndexOf(c);\n            int
    newIndex = index + 2 * 2;\n            if (newIndex > 25) {\n                newIndex
    = newIndex - 26;\n            }\n            result += alphabet[newIndex];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        foreach
    (char c in s) {\n            int index = alphabet.IndexOf(c);\n            result
    += alphabet[(index + 2) % 26];\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e1dd2db542c245d088387ad92dd3c7f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e1dd2db542c245d088387ad92dd3c7f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (2 * 2)) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (2 * (i + 1))) % 26];\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c7e50a5c4d74c41841d4735b6deaff6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c7e50a5c4d74c41841d4735b6deaff6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            int i = (int)c;\n
    \           i += 2 * 2;\n            result += (char)i;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6153968b9d746b0a3c3ac9f14aae2ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e6153968b9d746b0a3c3ac9f14aae2ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        foreach
    (char c in s) {\n            int index = alphabet.IndexOf(c);\n            if
    (index == -1) {\n                result += c;\n            } else {\n                result
    += alphabet[(index + 2 * 2) % alphabet.Length];\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Write
    your code here\n        string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string
    encrypted = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            int
    index = alphabet.IndexOf(s[i]);\n            encrypted += alphabet[(index + (2
    * 2)) % 26];\n        }\n        return encrypted;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            int
    index = s[i] - 'a';\n            index = (index + 2 * 2) % 26;\n            result
    += (char)(index + 'a');\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Create
    a string that contains the alphabet\n        string alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n
    \       // Create a string that contains the encrypted alphabet\n        string
    encryptedAlphabet = \"cdefghijklmnopqrstuvwxyzab\";\n        // Create a string
    that will contain the encrypted string\n        string encryptedString = \"\";\n
    \       // Loop through the string\n        for (int i = 0; i < s.Length; i++)
    {\n            // Get the index of the current character in the alphabet\n            int
    index = alphabet.IndexOf(s[i]);\n            // Add the encrypted character to
    the encrypted string\n            encryptedString += encryptedAlphabet[index];\n
    \       }\n        // Return the encrypted string\n        return encryptedString;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a63f649abfc14f3abdc0d97a72a86a3c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a63f649abfc14f3abdc0d97a72a86a3c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       foreach (char c in s) {\n            int index = alphabet.IndexOf(c);\n
    \           if (index < 0) {\n                encrypted += c;\n            } else
    {\n                encrypted += alphabet[(index + 2 * 2) % alphabet.Length];\n
    \           }\n        }\n        return encrypted;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            result
    += (char)(((s[i] - 'a') * 2 + 2) % 26 + 'a');\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32b0d8f7f86844888d251c45a73ba619>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32b0d8f7f86844888d251c45a73ba619>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = (index + (2 * 2)) % 26;\n            result += alphabet[newIndex];\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        foreach
    (char c in s) {\n            int index = alphabet.IndexOf(c);\n            index
    = (index + 2 * 2) % 26;\n            result += alphabet[index];\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           encrypted += alphabet[(index + (2 * (i + 1))) % 26];\n        }\n
    \       return encrypted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f17373f340746d89301d43afe1ba6c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5f17373f340746d89301d43afe1ba6c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (2 * 2)) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + 2 * 2) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        foreach
    (char c in s) {\n            int index = alphabet.IndexOf(c);\n            if
    (index == -1) {\n                result += c;\n            } else {\n                int
    newIndex = (index + (2 * 2)) % 26;\n                result += alphabet[newIndex];\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + 2 * (i + 1)) % 26];\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8524d2d789d4f1e9d0c5b7489508b9a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8524d2d789d4f1e9d0c5b7489508b9a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    alphabet = \"abcdefghijklmnopqrstuvwxyz\".ToCharArray();\n        char[] encrypted
    = new char[s.Length];\n        for (int i = 0; i < s.Length; i++) {\n            int
    index = Array.IndexOf(alphabet, s[i]);\n            encrypted[i] = alphabet[(index
    + 2 * 2) % alphabet.Length];\n        }\n        return new string(encrypted);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    alphabet = \"abcdefghijklmnopqrstuvwxyz\".ToCharArray();\n        char[] encrypted
    = new char[s.Length];\n        for (int i = 0; i < s.Length; i++) {\n            int
    index = Array.IndexOf(alphabet, s[i]);\n            encrypted[i] = alphabet[(index
    + 2 * 2) % alphabet.Length];\n        }\n        return new string(encrypted);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           encrypted += alphabet[(index + 2 * 2) % alphabet.Length];\n        }\n
    \       return encrypted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            int ascii = (int)c;\n
    \           ascii += 2 * 2;\n            result += (char)ascii;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00c8cafa98984d1f824b44be4c00d9cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00c8cafa98984d1f824b44be4c00d9cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + 2 * 2) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           index = (index + (2 * 2)) % alphabet.Length;\n            encrypted
    += alphabet[index];\n        }\n        return encrypted;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (2 * (i + 1))) % 26];\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c7e50a5c4d74c41841d4735b6deaff6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c7e50a5c4d74c41841d4735b6deaff6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        foreach
    (char c in s) {\n            int index = alphabet.IndexOf(c);\n            index
    = (index + 2) * 2;\n            result += alphabet[index];\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5376bf8b908144e99bca58218d3d88d5>:0
    \n\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside the
    bounds of the array.\n  at Problem.Encrypt (System.String s) [0x00030] in <5376bf8b908144e99bca58218d3d88d5>:0
    \n  at Problem.Main (System.String[] args) [0x0001b] in <5376bf8b908144e99bca58218d3d88d5>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was
    outside the bounds of the array.\n  at Problem.Encrypt (System.String s) [0x00030]
    in <5376bf8b908144e99bca58218d3d88d5>:0 \n  at Problem.Main (System.String[] args)
    [0x0001b] in <5376bf8b908144e99bca58218d3d88d5>:0 \n"
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + 2) % 26];\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da78c84410b34785858aa1e8638685d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da78c84410b34785858aa1e8638685d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        foreach
    (char c in s) {\n            int index = alphabet.IndexOf(c);\n            result
    += alphabet[(index + 2) % 26];\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e1dd2db542c245d088387ad92dd3c7f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e1dd2db542c245d088387ad92dd3c7f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index == -1) {\n                result += s[i];\n            }
    else {\n                result += alphabet[(index + (2 * 2)) % alphabet.Length];\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (i + 1) * 2) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6379d1db78ed4f46834b2fd4ba2707a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6379d1db78ed4f46834b2fd4ba2707a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        for (int i = 0; i < s.Length; i++) {\n            result
    += (char)((s[i] - 'a' + 2 * 2) % 26 + 'a');\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index + 2 * 2 > alphabet.Length - 1) {\n                encrypted
    += alphabet[index + 2 * 2 - alphabet.Length];\n            } else {\n                encrypted
    += alphabet[index + 2 * 2];\n            }\n        }\n        return encrypted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index + 2 * 2 > 25) {\n                index = (index + 2 * 2)
    - 26;\n            } else {\n                index += 2 * 2;\n            }\n
    \           encrypted += alphabet[index];\n        }\n        return encrypted;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code goes here\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <58fb3db2efaa4d7683be5a6310b0cda8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <58fb3db2efaa4d7683be5a6310b0cda8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // TODO:
    Implement this function\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f30e2ec16586428986aa8e82919b7eed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f30e2ec16586428986aa8e82919b7eed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = (index + (2 * 2)) % 26;\n            result += alphabet[newIndex];\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index == -1) {\n                result += s[i];\n            }
    else {\n                result += alphabet[(index + (2 * 2)) % alphabet.Length];\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + 2 * 2) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           encrypted += alphabet[(index + (2 * 2)) % 26];\n        }\n        return
    encrypted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (2 * 2)) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = index + (2 * 2);\n            if (newIndex > 25) {\n
    \               newIndex = newIndex - 26;\n            }\n            encrypted
    += alphabet[newIndex];\n        }\n        return encrypted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)((c
    - 'a' + 2 * 2) % 26 + 'a');\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (2 * 2)) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string newAlphabet = \"cdefghijklmnopqrstuvwxyzab\";\n
    \       string encrypted = \"\";\n        for (int i = 0; i < s.Length; i++) {\n
    \           int index = alphabet.IndexOf(s[i]);\n            encrypted += newAlphabet[index];\n
    \       }\n        return encrypted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75026a72ba1e4b86a43ccbf9caef03dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <75026a72ba1e4b86a43ccbf9caef03dd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = (index + (2 * 2)) % 26;\n            encrypted += alphabet[newIndex];\n
    \       }\n        return encrypted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index == -1) {\n                result += s[i];\n            }
    else {\n                result += alphabet[(index + (2 * 2)) % alphabet.Length];\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = (index + (2 * 2)) % 26;\n            encrypted += alphabet[newIndex];\n
    \       }\n        return encrypted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index == -1) {\n                result += s[i];\n            }
    else {\n                result += alphabet[(index + 2 * 2) % alphabet.Length];\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = (index + 2 * 2) % 26;\n            encrypted += alphabet[newIndex];\n
    \       }\n        return encrypted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index == -1) {\n                result += s[i];\n            }
    else {\n                index = (index + 2 * 2) % alphabet.Length;\n                result
    += alphabet[index];\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index != -1) {\n                result += alphabet[(index + 2
    * 2) % alphabet.Length];\n            } else {\n                result += s[i];\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           encrypted += alphabet[(index + (2 * 2)) % 26];\n        }\n        return
    encrypted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (2 * 2)) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           encrypted += alphabet[(index + (2 * 2)) % 26];\n        }\n        return
    encrypted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        foreach
    (char c in s) {\n            int index = alphabet.IndexOf(c);\n            result
    += alphabet[(index + 2 * 2) % 26];\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + 2 * 2) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = (index + (2 * 2)) % 26;\n            encrypted += alphabet[newIndex];\n
    \       }\n        return encrypted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        StringBuilder
    sb = new StringBuilder();\n        foreach (char c in s) {\n            sb.Append((char)(c
    + 2 * 2));\n        }\n        return sb.ToString();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <65a768f4723347fbbe0fe37329f9b823>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <65a768f4723347fbbe0fe37329f9b823>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index == -1) {\n                encrypted += s[i];\n            }
    else {\n                encrypted += alphabet[(index + 2 * 2) % alphabet.Length];\n
    \           }\n        }\n        return encrypted;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        foreach
    (char c in s) {\n            int index = alphabet.IndexOf(c);\n            index
    = (index + (2 * 2)) % 26;\n            result += alphabet[index];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (2 * 2)) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + 2 * 2) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index == -1) {\n                encrypted += s[i];\n            }
    else {\n                encrypted += alphabet[(index + 2 * 2) % alphabet.Length];\n
    \           }\n        }\n        return encrypted;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = (index + (2 * 2)) % 26;\n            encrypted += alphabet[newIndex];\n
    \       }\n        return encrypted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           index = (index + (2 * 2)) % alphabet.Length;\n            result +=
    alphabet[index];\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (2 * 2)) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        foreach
    (char c in s) {\n            int index = alphabet.IndexOf(c);\n            index
    = (index + 2) * 2;\n            if (index > alphabet.Length - 1) {\n                index
    = index - alphabet.Length;\n            }\n            result += alphabet[index];\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b730ca287e204b9daa8891206abda195>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b730ca287e204b9daa8891206abda195>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index < 0) {\n                encrypted += s[i];\n            }
    else {\n                encrypted += alphabet[(index + 2 * 2) % alphabet.Length];\n
    \           }\n        }\n        return encrypted;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797465
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index + 2 * 2 > alphabet.Length - 1) {\n                index
    = index + 2 * 2 - alphabet.Length;\n            } else {\n                index
    += 2 * 2;\n            }\n            encrypted += alphabet[index];\n        }\n
    \       return encrypted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797465
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           encrypted += alphabet[(index + 2) % 26];\n        }\n        return
    encrypted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8bc13b0851ed4aafad1b1c717ef91e47>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8bc13b0851ed4aafad1b1c717ef91e47>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797465
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = (index + (2 * 2)) % 26;\n            encrypted += alphabet[newIndex];\n
    \       }\n        return encrypted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + 2) % 26];\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da78c84410b34785858aa1e8638685d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da78c84410b34785858aa1e8638685d8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index + 2 * 2 > alphabet.Length - 1) {\n                index
    = (index + 2 * 2) - alphabet.Length;\n            } else {\n                index
    += 2 * 2;\n            }\n            encrypted += alphabet[index];\n        }\n
    \       return encrypted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797465
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           if (index < 0) {\n                result += s[i];\n            } else
    {\n                result += alphabet[(index + 2 * 2) % alphabet.Length];\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797465
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            int ascii = (int)c;\n
    \           ascii += 2 * 2;\n            result += (char)ascii;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00c8cafa98984d1f824b44be4c00d9cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <00c8cafa98984d1f824b44be4c00d9cf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // TODO:
    Implement this function\n        return \"\";\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f30e2ec16586428986aa8e82919b7eed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f30e2ec16586428986aa8e82919b7eed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (2 * 2)) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = (index + (2 * 2)) % 26;\n            encrypted += alphabet[newIndex];\n
    \       }\n        return encrypted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + 2 * 2) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (2 * 2)) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = (index + (2 * 2)) % 26;\n            result += alphabet[newIndex];\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797463
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = (index + (2 * 2)) % 26;\n            encrypted += alphabet[newIndex];\n
    \       }\n        return encrypted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = index + (2 * 2);\n            if (newIndex > 25) {\n
    \               newIndex = newIndex - 26;\n            }\n            encrypted
    += alphabet[newIndex];\n        }\n        return encrypted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797464
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           encrypted += alphabet[(index + (2 * 2)) % 26];\n        }\n        return
    encrypted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (2 * (i + 1))) % 26];\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c7e50a5c4d74c41841d4735b6deaff6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9c7e50a5c4d74c41841d4735b6deaff6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        foreach
    (char c in s) {\n            int index = alphabet.IndexOf(c);\n            result
    += alphabet[(index + 2) % 26];\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e1dd2db542c245d088387ad92dd3c7f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e1dd2db542c245d088387ad92dd3c7f8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797463
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        return
    null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x0000b] in <324a67012e304a40aa97488bf0f9c8de>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x0000b] in <324a67012e304a40aa97488bf0f9c8de>:0
    \n"
  stdout: ''
  timestamp: 1659797465
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (2 * 2)) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        char[]
    alphabet = \"abcdefghijklmnopqrstuvwxyz\".ToCharArray();\n        char[] encrypted
    = new char[s.Length];\n        for (int i = 0; i < s.Length; i++) {\n            int
    index = Array.IndexOf(alphabet, s[i]);\n            if (index == -1) {\n                encrypted[i]
    = s[i];\n            } else {\n                encrypted[i] = alphabet[(index
    + (2 * 2)) % alphabet.Length];\n            }\n        }\n        return new string(encrypted);\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797465
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (2 * 2)) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           encrypted += alphabet[(index + 2 * 2) % alphabet.Length];\n        }\n
    \       return encrypted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (2 * 2)) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        // Your
    code here\n        return \"\";\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ab8094b367204c4fbd0a9179c0717a73>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string result = \"\";\n        for
    (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           result += alphabet[(index + (2 * 2)) % alphabet.Length];\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    alphabet = \"abcdefghijklmnopqrstuvwxyz\";\n        string encrypted = \"\";\n
    \       for (int i = 0; i < s.Length; i++) {\n            int index = alphabet.IndexOf(s[i]);\n
    \           int newIndex = (index + (2 * 2)) % 26;\n            encrypted += alphabet[newIndex];\n
    \       }\n        return encrypted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            result += (char)(c
    + 2 * 2);\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n    Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n
    \   Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n    Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n
    \   Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e2638b3d63843df8058b9a2e58f967f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797462
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Create a function encrypt that takes a string as an argument
    and\n    // returns a string encrypted with the alphabet being rotated. \n    //
    The alphabet should be rotated in a manner such that the letters \n    // shift
    down by two multiplied to two places.\n    // For example:\n    // >>> Encrypt((\"hi\"))\n
    \   // (\"lm\")\n    // >>> Encrypt((\"asdfghjkl\"))\n    // (\"ewhjklnop\")\n
    \   // >>> Encrypt((\"gf\"))\n    // (\"kj\")\n    // >>> Encrypt((\"et\"))\n
    \   // (\"ix\")\n    public static string Encrypt(string s) {\n        string
    result = \"\";\n        foreach (char c in s) {\n            int ascii = (int)c;\n
    \           ascii += 2 * 2;\n            if (ascii > 122) {\n                ascii
    -= 26;\n            }\n            result += (char)ascii;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encrypt((\"hi\")).Equals((\"lm\")));\n
    \   Debug.Assert(Encrypt((\"asdfghjkl\")).Equals((\"ewhjklnop\")));\n    Debug.Assert(Encrypt((\"gf\")).Equals((\"kj\")));\n
    \   Debug.Assert(Encrypt((\"et\")).Equals((\"ix\")));\n    Debug.Assert(Encrypt((\"faewfawefaewg\")).Equals((\"jeiajeaijeiak\")));\n
    \   Debug.Assert(Encrypt((\"hellomyfriend\")).Equals((\"lippsqcjvmirh\")));\n
    \   Debug.Assert(Encrypt((\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\")).Equals((\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")));\n
    \   Debug.Assert(Encrypt((\"a\")).Equals((\"e\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797465
