name: HumanEval_111_histogram
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string representing a space separated lowercase letters,\
  \ return a dictionary\n    // of the letter with the most repetition and containing\
  \ the corresponding count.\n    // If several letters have the same occurrence,\
  \ return all of them.\n    // Example:\n    // >>> Histogram((\"a b c\"))\n    //\
  \ (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}})\n    //\
  \ >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"a\", 2L},\
  \ {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
  a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
  b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
  \    public static Dictionary<string,long> Histogram(string test) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
  a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
  \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
  a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
  \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
  \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
  r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\"\
  )).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
  r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"g\"\
  , 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
  \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"a\"\
  , 1L}})));\n    }\n\n}\n"
completions: ["        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' ')) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter] += 1;\n            } else {\n         \
    \       histogram[letter] = 1;\n            }\n        }\n        long max = histogram.Values.Max();\n\
    \        foreach (KeyValuePair<string,long> pair in histogram) {\n           \
    \ if (pair.Value == max) {\n                result[pair.Key] = pair.Value;\n \
    \           }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        // TODO: Implement the function\
    \ here\n        return result;", "        Dictionary<string,long> histogram =\
    \ new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]\
    \ += 1;\n            } else {\n                histogram[letter] = 1;\n      \
    \      }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        string[] words = test.Split('\
    \ ');\n        foreach (string word in words) {\n            if (histogram.ContainsKey(word))\
    \ {\n                histogram[word]++;\n            } else {\n              \
    \  histogram[word] = 1;\n            }\n        }\n        return histogram;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   if (test == \"\") {\n            return result;\n        }\n        string[]\
    \ letters = test.Split(' ');\n        Dictionary<string,long> counts = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter]++;\n            } else {\n               \
    \ counts[letter] = 1;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        foreach (string letter in counts.Keys) {\n            if (counts[letter]\
    \ == max) {\n                result[letter] = max;\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (result.ContainsKey(word)) {\n                result[word]++;\n\
    \            } else {\n                result[word] = 1;\n            }\n    \
    \    }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        if (test.Length == 0) {\n            return\
    \ result;\n        }\n        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        foreach (string letter in\
    \ letters) {\n            if (histogram.ContainsKey(letter)) {\n             \
    \   histogram[letter] += 1;\n            } else {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        long max = histogram.Values.Max();\n\
    \        foreach (KeyValuePair<string,long> entry in histogram) {\n          \
    \  if (entry.Value == max) {\n                result[entry.Key] = entry.Value;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0) {\n \
    \           return result;\n        }\n        string[] letters = test.Split('\
    \ ');\n        Dictionary<string,long> count = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (count.ContainsKey(letter))\
    \ {\n                count[letter] += 1;\n            } else {\n             \
    \   count[letter] = 1;\n            }\n        }\n        long max = count.Values.Max();\n\
    \        foreach (KeyValuePair<string,long> entry in count) {\n            if\
    \ (entry.Value == max) {\n                result[entry.Key] = entry.Value;\n \
    \           }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        Dictionary<string,long> counts\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (counts.ContainsKey(letter)) {\n                counts[letter]\
    \ += 1;\n            } else {\n                counts[letter] = 1;\n         \
    \   }\n        }\n        long max = 0;\n        foreach (KeyValuePair<string,long>\
    \ kvp in counts) {\n            if (kvp.Value > max) {\n                max =\
    \ kvp.Value;\n            }\n        }\n        foreach (KeyValuePair<string,long>\
    \ kvp in counts) {\n            if (kvp.Value == max) {\n                result[kvp.Key]\
    \ = kvp.Value;\n            }\n        }\n        return result;", "        var\
    \ dict = new Dictionary<string,long>();\n        foreach (var letter in test.Split('\
    \ ')) {\n            if (dict.ContainsKey(letter)) {\n                dict[letter]\
    \ += 1;\n            } else {\n                dict[letter] = 1;\n           \
    \ }\n        }\n        var max = dict.Values.Max();\n        var result = new\
    \ Dictionary<string,long>();\n        foreach (var entry in dict) {\n        \
    \    if (entry.Value == max) {\n                result[entry.Key] = entry.Value;\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ Dictionary<string,long>();\n        var letters = test.Split(' ');\n       \
    \ var max = 0L;\n        foreach (var letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1L;\n            }\n            if (result[letter] > max) {\n\
    \                max = result[letter];\n            }\n        }\n        var\
    \ final = new Dictionary<string,long>();\n        foreach (var letter in result.Keys)\
    \ {\n            if (result[letter] == max) {\n                final[letter] =\
    \ max;\n            }\n        }\n        return final;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0) {\n \
    \           return result;\n        }\n        string[] letters = test.Split('\
    \ ');\n        Dictionary<string,long> counts = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter] += 1;\n            } else {\n            \
    \    counts[letter] = 1;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        foreach (string letter in counts.Keys) {\n            if (counts[letter]\
    \ == max) {\n                result[letter] = max;\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' ')) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter]++;\n            } else {\n            \
    \    histogram[letter] = 1;\n            }\n        }\n        long max = 0;\n\
    \        foreach (KeyValuePair<string,long> entry in histogram) {\n          \
    \  if (entry.Value > max) {\n                max = entry.Value;\n            }\n\
    \        }\n        foreach (KeyValuePair<string,long> entry in histogram) {\n\
    \            if (entry.Value == max) {\n                result[entry.Key] = entry.Value;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        Dictionary<string,long> counts\
    \ = new Dictionary<string,long>();\n        string[] words = test.Split(' ');\n\
    \        foreach (string word in words) {\n            if (counts.ContainsKey(word))\
    \ {\n                counts[word] += 1;\n            } else {\n              \
    \  counts[word] = 1;\n            }\n        }\n        long max = 0;\n      \
    \  foreach (KeyValuePair<string,long> pair in counts) {\n            if (pair.Value\
    \ > max) {\n                max = pair.Value;\n            }\n        }\n    \
    \    foreach (KeyValuePair<string,long> pair in counts) {\n            if (pair.Value\
    \ == max) {\n                result[pair.Key] = pair.Value;\n            }\n \
    \       }\n        return result;", "        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]++;\n\
    \            } else {\n                histogram[letter] = 1L;\n            }\n\
    \        }\n        return histogram;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        string[] words = test.Split(' ');\n\
    \        Dictionary<string,long> counts = new Dictionary<string,long>();\n   \
    \     foreach (string word in words) {\n            if (counts.ContainsKey(word))\
    \ {\n                counts[word]++;\n            } else {\n                counts[word]\
    \ = 1;\n            }\n        }\n        long max = 0;\n        foreach (KeyValuePair<string,long>\
    \ entry in counts) {\n            if (entry.Value > max) {\n                max\
    \ = entry.Value;\n            }\n        }\n        foreach (KeyValuePair<string,long>\
    \ entry in counts) {\n            if (entry.Value == max) {\n                result[entry.Key]\
    \ = entry.Value;\n            }\n        }\n        return result;", "       \
    \ var dict = new Dictionary<string,long>();\n        var max = 0L;\n        foreach\
    \ (var c in test.Split(' ')) {\n            if (dict.ContainsKey(c)) {\n     \
    \           dict[c] += 1;\n            } else {\n                dict[c] = 1;\n\
    \            }\n            max = Math.Max(max, dict[c]);\n        }\n       \
    \ var result = new Dictionary<string,long>();\n        foreach (var kv in dict)\
    \ {\n            if (kv.Value == max) {\n                result[kv.Key] = kv.Value;\n\
    \            }\n        }\n        return result;", "        var dict = new Dictionary<string,long>();\n\
    \        var max = 0L;\n        foreach (var c in test.Split(' ')) {\n       \
    \     if (dict.ContainsKey(c)) {\n                dict[c] += 1;\n            }\
    \ else {\n                dict[c] = 1;\n            }\n            max = Math.Max(max,\
    \ dict[c]);\n        }\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var kv in dict) {\n            if (kv.Value == max) {\n    \
    \            result[kv.Key] = kv.Value;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        long max = 0;\n        foreach\
    \ (string word in words) {\n            if (result.ContainsKey(word)) {\n    \
    \            result[word]++;\n            } else {\n                result[word]\
    \ = 1;\n            }\n            if (result[word] > max) {\n               \
    \ max = result[word];\n            }\n        }\n        Dictionary<string,long>\
    \ final = new Dictionary<string,long>();\n        foreach (string word in result.Keys)\
    \ {\n            if (result[word] == max) {\n                final[word] = result[word];\n\
    \            }\n        }\n        return final;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0) {\n \
    \           return result;\n        }\n        string[] words = test.Split(' ');\n\
    \        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string word in words) {\n            if (histogram.ContainsKey(word))\
    \ {\n                histogram[word]++;\n            } else {\n              \
    \  histogram[word] = 1;\n            }\n        }\n        long max = histogram.Values.Max();\n\
    \        foreach (string key in histogram.Keys) {\n            if (histogram[key]\
    \ == max) {\n                result[key] = max;\n            }\n        }\n  \
    \      return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        if (test.Length == 0) {\n            return result;\n        }\n    \
    \    string[] letters = test.Split(' ');\n        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string letter in letters)\
    \ {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]\
    \ += 1;\n            } else {\n                histogram[letter] = 1;\n      \
    \      }\n        }\n        long max = histogram.Values.Max();\n        foreach\
    \ (string letter in histogram.Keys) {\n            if (histogram[letter] == max)\
    \ {\n                result[letter] = max;\n            }\n        }\n       \
    \ return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        long max = 0;\n        foreach\
    \ (string letter in letters) {\n            if (result.ContainsKey(letter)) {\n\
    \                result[letter]++;\n            } else {\n                result[letter]\
    \ = 1;\n            }\n            if (result[letter] > max) {\n             \
    \   max = result[letter];\n            }\n        }\n        Dictionary<string,long>\
    \ final = new Dictionary<string,long>();\n        foreach (string letter in result.Keys)\
    \ {\n            if (result[letter] == max) {\n                final[letter] =\
    \ result[letter];\n            }\n        }\n        return final;", "       \
    \ Dictionary<string,long> result = new Dictionary<string,long>();\n        if\
    \ (test.Length == 0) {\n            return result;\n        }\n        string[]\
    \ letters = test.Split(' ');\n        Dictionary<string,long> counts = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter] += 1L;\n            } else {\n           \
    \     counts[letter] = 1L;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        foreach (KeyValuePair<string,long> pair in counts) {\n            if\
    \ (pair.Value == max) {\n                result[pair.Key] = pair.Value;\n    \
    \        }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        Dictionary<string,long> dict\
    \ = new Dictionary<string,long>();\n        string[] words = test.Split(' ');\n\
    \        foreach (string word in words) {\n            if (dict.ContainsKey(word))\
    \ {\n                dict[word] += 1;\n            } else {\n                dict[word]\
    \ = 1;\n            }\n        }\n        long max = dict.Values.Max();\n    \
    \    foreach (KeyValuePair<string,long> pair in dict) {\n            if (pair.Value\
    \ == max) {\n                result[pair.Key] = pair.Value;\n            }\n \
    \       }\n        return result;", "        Dictionary<string,long> res = new\
    \ Dictionary<string,long>();\n        if (test.Length == 0) return res;\n    \
    \    string[] words = test.Split(' ');\n        Dictionary<string,long> dic =\
    \ new Dictionary<string,long>();\n        foreach (string word in words) {\n \
    \           if (dic.ContainsKey(word)) {\n                dic[word] += 1;\n  \
    \          } else {\n                dic[word] = 1;\n            }\n        }\n\
    \        long max = 0;\n        foreach (KeyValuePair<string,long> kv in dic)\
    \ {\n            if (kv.Value > max) {\n                max = kv.Value;\n    \
    \        }\n        }\n        foreach (KeyValuePair<string,long> kv in dic) {\n\
    \            if (kv.Value == max) {\n                res[kv.Key] = kv.Value;\n\
    \            }\n        }\n        return res;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] words = test.Split('\
    \ ');\n        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string word in words) {\n            if (histogram.ContainsKey(word))\
    \ {\n                histogram[word] += 1;\n            } else {\n           \
    \     histogram[word] = 1;\n            }\n        }\n        long max = histogram.Values.Max();\n\
    \        foreach (string key in histogram.Keys) {\n            if (histogram[key]\
    \ == max) {\n                result[key] = max;\n            }\n        }\n  \
    \      return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        if (test == \"\") {\n            return result;\n        }\n        string[]\
    \ words = test.Split(' ');\n        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string word in words) {\n            if (histogram.ContainsKey(word))\
    \ {\n                histogram[word] += 1;\n            } else {\n           \
    \     histogram[word] = 1;\n            }\n        }\n        long max = histogram.Values.Max();\n\
    \        foreach (string word in histogram.Keys) {\n            if (histogram[word]\
    \ == max) {\n                result[word] = max;\n            }\n        }\n \
    \       return result;", "        var d = new Dictionary<string,long>();\n   \
    \     var max = 0L;\n        foreach (var c in test.Split(' ')) {\n          \
    \  if (d.ContainsKey(c)) {\n                d[c]++;\n            } else {\n  \
    \              d[c] = 1;\n            }\n            max = Math.Max(max, d[c]);\n\
    \        }\n        return d.Where(kv => kv.Value == max).ToDictionary(kv => kv.Key,\
    \ kv => kv.Value);", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        foreach (string letter in\
    \ letters) {\n            if (result.ContainsKey(letter)) {\n                result[letter]\
    \ += 1;\n            } else {\n                result[letter] = 1;\n         \
    \   }\n        }\n        return result;", "        Dictionary<string,long> res\
    \ = new Dictionary<string,long>();\n        string[] words = test.Split(' ');\n\
    \        long max = 0;\n        foreach (string word in words) {\n           \
    \ if (res.ContainsKey(word)) {\n                res[word] += 1;\n            }\
    \ else {\n                res[word] = 1;\n            }\n            if (res[word]\
    \ > max) {\n                max = res[word];\n            }\n        }\n     \
    \   Dictionary<string,long> res2 = new Dictionary<string,long>();\n        foreach\
    \ (KeyValuePair<string,long> pair in res) {\n            if (pair.Value == max)\
    \ {\n                res2[pair.Key] = pair.Value;\n            }\n        }\n\
    \        return res2;", "        var dict = new Dictionary<string,long>();\n \
    \       var max = 0L;\n        foreach (var c in test.Split(' ')) {\n        \
    \    if (dict.ContainsKey(c)) {\n                dict[c]++;\n            } else\
    \ {\n                dict[c] = 1;\n            }\n            max = Math.Max(max,\
    \ dict[c]);\n        }\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var kv in dict) {\n            if (kv.Value == max) {\n    \
    \            result[kv.Key] = kv.Value;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' ')) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter] += 1;\n            } else {\n         \
    \       histogram[letter] = 1;\n            }\n        }\n        return histogram;",
  "        var dict = new Dictionary<string,long>();\n        foreach (var c in test.Split('\
    \ ')) {\n            if (dict.ContainsKey(c)) {\n                dict[c] += 1;\n\
    \            } else {\n                dict[c] = 1;\n            }\n        }\n\
    \        var max = dict.Values.Max();\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var kv in dict) {\n            if (kv.Value == max) {\n    \
    \            result[kv.Key] = kv.Value;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        if (test.Length == 0) {\n            return result;\n        }\n    \
    \    string[] words = test.Split(' ');\n        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string word in words) {\n\
    \            if (histogram.ContainsKey(word)) {\n                histogram[word]++;\n\
    \            } else {\n                histogram[word] = 1;\n            }\n \
    \       }\n        long max = histogram.Values.Max();\n        foreach (KeyValuePair<string,long>\
    \ pair in histogram) {\n            if (pair.Value == max) {\n               \
    \ result[pair.Key] = pair.Value;\n            }\n        }\n        return result;",
  "        var histogram = new Dictionary<string,long>();\n        foreach (var letter\
    \ in test.Split(' ')) {\n            if (histogram.ContainsKey(letter)) {\n  \
    \              histogram[letter] += 1;\n            } else {\n               \
    \ histogram[letter] = 1;\n            }\n        }\n        return histogram;",
  "        var dict = new Dictionary<string,long>();\n        var max = 0L;\n    \
    \    foreach (var c in test.Split(' ')) {\n            if (dict.ContainsKey(c))\
    \ {\n                dict[c] += 1;\n            } else {\n                dict[c]\
    \ = 1;\n            }\n            max = Math.Max(max, dict[c]);\n        }\n\
    \        return dict.Where(kv => kv.Value == max).ToDictionary(kv => kv.Key, kv\
    \ => kv.Value);", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (result.ContainsKey(word)) {\n                result[word]++;\n\
    \            } else {\n                result[word] = 1;\n            }\n    \
    \    }\n        return result;", "        var dict = new Dictionary<string,long>();\n\
    \        var max = 0L;\n        foreach (var c in test.Split(' ')) {\n       \
    \     if (dict.ContainsKey(c)) {\n                dict[c] += 1;\n            }\
    \ else {\n                dict[c] = 1;\n            }\n            max = Math.Max(max,\
    \ dict[c]);\n        }\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var kv in dict) {\n            if (kv.Value == max) {\n    \
    \            result[kv.Key] = kv.Value;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        if (test.Length == 0) {\n            return result;\n        }\n    \
    \    string[] words = test.Split(' ');\n        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string word in words) {\n\
    \            if (histogram.ContainsKey(word)) {\n                histogram[word]\
    \ += 1;\n            } else {\n                histogram[word] = 1;\n        \
    \    }\n        }\n        long max = histogram.Values.Max();\n        foreach\
    \ (KeyValuePair<string,long> entry in histogram) {\n            if (entry.Value\
    \ == max) {\n                result[entry.Key] = entry.Value;\n            }\n\
    \        }\n        return result;", "        var dict = new Dictionary<string,long>();\n\
    \        var max = 0L;\n        foreach (var c in test.Split(' ')) {\n       \
    \     if (dict.ContainsKey(c)) {\n                dict[c] += 1;\n            }\
    \ else {\n                dict[c] = 1;\n            }\n            max = Math.Max(max,\
    \ dict[c]);\n        }\n        return dict.Where(x => x.Value == max).ToDictionary(x\
    \ => x.Key, x => x.Value);", "        // Your code here\n        return null;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   Dictionary<string,long> histogram = new Dictionary<string,long>();\n     \
    \   foreach (string item in test.Split(' ')) {\n            if (histogram.ContainsKey(item))\
    \ {\n                histogram[item] += 1;\n            } else {\n           \
    \     histogram[item] = 1;\n            }\n        }\n        long max = 0;\n\
    \        foreach (KeyValuePair<string,long> item in histogram) {\n           \
    \ if (item.Value > max) {\n                max = item.Value;\n            }\n\
    \        }\n        foreach (KeyValuePair<string,long> item in histogram) {\n\
    \            if (item.Value == max) {\n                result[item.Key] = item.Value;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0) {\n \
    \           return result;\n        }\n        string[] letters = test.Split('\
    \ ');\n        Dictionary<string,long> counts = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter] += 1L;\n            } else {\n           \
    \     counts[letter] = 1L;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        foreach (string letter in counts.Keys) {\n            if (counts[letter]\
    \ == max) {\n                result[letter] = max;\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        Dictionary<string,long> dict = new Dictionary<string,long>();\n     \
    \   string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (dict.ContainsKey(word)) {\n                dict[word] +=\
    \ 1;\n            } else {\n                dict[word] = 1;\n            }\n \
    \       }\n        long max = 0;\n        foreach (KeyValuePair<string,long> kvp\
    \ in dict) {\n            if (kvp.Value > max) {\n                max = kvp.Value;\n\
    \            }\n        }\n        foreach (KeyValuePair<string,long> kvp in dict)\
    \ {\n            if (kvp.Value == max) {\n                result[kvp.Key] = kvp.Value;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        string[] letters = test.Split('\
    \ ');\n        foreach (string letter in letters) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter]++;\n            } else {\n            \
    \    histogram[letter] = 1;\n            }\n        }\n        return histogram;",
  "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n  \
    \      foreach (string letter in test.Split(' ')) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter]++;\n            } else {\n            \
    \    histogram[letter] = 1L;\n            }\n        }\n        return histogram;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   Dictionary<string,long> counts = new Dictionary<string,long>();\n        long\
    \ max_count = 0;\n        foreach (string letter in test.Split(' ')) {\n     \
    \       if (counts.ContainsKey(letter)) {\n                counts[letter] += 1;\n\
    \            } else {\n                counts[letter] = 1;\n            }\n  \
    \          if (counts[letter] > max_count) {\n                max_count = counts[letter];\n\
    \            }\n        }\n        foreach (string letter in counts.Keys) {\n\
    \            if (counts[letter] == max_count) {\n                result[letter]\
    \ = max_count;\n            }\n        }\n        return result;", "        var\
    \ dict = new Dictionary<string,long>();\n        var max = 0L;\n        foreach\
    \ (var c in test.Split(' ')) {\n            if (dict.ContainsKey(c)) {\n     \
    \           dict[c]++;\n            } else {\n                dict[c] = 1;\n \
    \           }\n            max = Math.Max(max, dict[c]);\n        }\n        var\
    \ res = new Dictionary<string,long>();\n        foreach (var kv in dict) {\n \
    \           if (kv.Value == max) {\n                res[kv.Key] = kv.Value;\n\
    \            }\n        }\n        return res;", "        var result = new Dictionary<string,long>();\n\
    \        var letters = test.Split(' ');\n        var max = 0L;\n        foreach\
    \ (var letter in letters) {\n            if (result.ContainsKey(letter)) {\n \
    \               result[letter] += 1;\n            } else {\n                result[letter]\
    \ = 1;\n            }\n            if (result[letter] > max) {\n             \
    \   max = result[letter];\n            }\n        }\n        var final = new Dictionary<string,long>();\n\
    \        foreach (var letter in result.Keys) {\n            if (result[letter]\
    \ == max) {\n                final[letter] = result[letter];\n            }\n\
    \        }\n        return final;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        Dictionary<string,long> counts = new\
    \ Dictionary<string,long>();\n        foreach (string letter in test.Split(' '))\
    \ {\n            if (counts.ContainsKey(letter)) {\n                counts[letter]++;\n\
    \            } else {\n                counts[letter] = 1;\n            }\n  \
    \      }\n        long max = 0;\n        foreach (KeyValuePair<string,long> kvp\
    \ in counts) {\n            if (kvp.Value > max) {\n                max = kvp.Value;\n\
    \            }\n        }\n        foreach (KeyValuePair<string,long> kvp in counts)\
    \ {\n            if (kvp.Value == max) {\n                result[kvp.Key] = kvp.Value;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] words = test.Split('\
    \ ');\n        Dictionary<string,long> counts = new Dictionary<string,long>();\n\
    \        foreach (string word in words) {\n            if (counts.ContainsKey(word))\
    \ {\n                counts[word]++;\n            } else {\n                counts[word]\
    \ = 1;\n            }\n        }\n        long max = 0;\n        foreach (KeyValuePair<string,long>\
    \ kvp in counts) {\n            if (kvp.Value > max) {\n                max =\
    \ kvp.Value;\n            }\n        }\n        foreach (KeyValuePair<string,long>\
    \ kvp in counts) {\n            if (kvp.Value == max) {\n                result[kvp.Key]\
    \ = kvp.Value;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0) {\n \
    \           return result;\n        }\n        string[] words = test.Split(' ');\n\
    \        Dictionary<string,long> dict = new Dictionary<string,long>();\n     \
    \   foreach (string word in words) {\n            if (dict.ContainsKey(word))\
    \ {\n                dict[word] += 1;\n            } else {\n                dict[word]\
    \ = 1;\n            }\n        }\n        long max = dict.Values.Max();\n    \
    \    foreach (KeyValuePair<string,long> kvp in dict) {\n            if (kvp.Value\
    \ == max) {\n                result[kvp.Key] = kvp.Value;\n            }\n   \
    \     }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        Dictionary<string,long> histogram = new\
    \ Dictionary<string,long>();\n        foreach (string letter in test.Split(' '))\
    \ {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]\
    \ += 1;\n            } else {\n                histogram[letter] = 1;\n      \
    \      }\n        }\n        long max = histogram.Values.Max();\n        foreach\
    \ (KeyValuePair<string,long> entry in histogram) {\n            if (entry.Value\
    \ == max) {\n                result[entry.Key] = entry.Value;\n            }\n\
    \        }\n        return result;", "        var dict = new Dictionary<string,long>();\n\
    \        foreach (var c in test.Split(' ')) {\n            if (dict.ContainsKey(c))\
    \ {\n                dict[c] += 1;\n            } else {\n                dict[c]\
    \ = 1;\n            }\n        }\n        return dict;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        // TODO: Implement your solution\
    \ here\n        return result;", "        var dict = new Dictionary<string,long>();\n\
    \        foreach (var c in test.Split(' ')) {\n            if (dict.ContainsKey(c))\
    \ {\n                dict[c] += 1;\n            } else {\n                dict[c]\
    \ = 1;\n            }\n        }\n        var max = dict.Values.Max();\n     \
    \   var result = new Dictionary<string,long>();\n        foreach (var kv in dict)\
    \ {\n            if (kv.Value == max) {\n                result[kv.Key] = kv.Value;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]\
    \ += 1;\n            } else {\n                histogram[letter] = 1;\n      \
    \      }\n        }\n        long max = 0;\n        foreach (KeyValuePair<string,long>\
    \ entry in histogram) {\n            if (entry.Value > max) {\n              \
    \  max = entry.Value;\n            }\n        }\n        foreach (KeyValuePair<string,long>\
    \ entry in histogram) {\n            if (entry.Value == max) {\n             \
    \   result[entry.Key] = entry.Value;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (result.ContainsKey(word)) {\n                result[word]\
    \ += 1;\n            } else {\n                result[word] = 1;\n           \
    \ }\n        }\n        return result;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        if (test.Length == 0) {\n        \
    \    return result;\n        }\n        string[] letters = test.Split(' ');\n\
    \        Dictionary<string,long> counts = new Dictionary<string,long>();\n   \
    \     foreach (string letter in letters) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter] += 1;\n            } else {\n            \
    \    counts[letter] = 1;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        foreach (KeyValuePair<string,long> pair in counts) {\n            if\
    \ (pair.Value == max) {\n                result[pair.Key] = pair.Value;\n    \
    \        }\n        }\n        return result;", "        var result = new Dictionary<string,long>();\n\
    \        var max = 0L;\n        var letters = test.Split(' ');\n        foreach\
    \ (var letter in letters) {\n            if (result.ContainsKey(letter)) {\n \
    \               result[letter] += 1;\n            } else {\n                result[letter]\
    \ = 1;\n            }\n            if (result[letter] > max) {\n             \
    \   max = result[letter];\n            }\n        }\n        return result.Where(kvp\
    \ => kvp.Value == max).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);", "   \
    \     Dictionary<string,long> result = new Dictionary<string,long>();\n      \
    \  if (test.Length == 0) {\n            return result;\n        }\n        string[]\
    \ words = test.Split(' ');\n        Dictionary<string,long> count = new Dictionary<string,long>();\n\
    \        foreach (string word in words) {\n            if (count.ContainsKey(word))\
    \ {\n                count[word] += 1;\n            } else {\n               \
    \ count[word] = 1;\n            }\n        }\n        long max = count.Values.Max();\n\
    \        foreach (KeyValuePair<string,long> entry in count) {\n            if\
    \ (entry.Value == max) {\n                result[entry.Key] = entry.Value;\n \
    \           }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        // TODO: Implement your solution\
    \ here\n        return result;", "        var dict = new Dictionary<string,long>();\n\
    \        var max = 0L;\n        foreach (var c in test.Split(' ')) {\n       \
    \     if (dict.ContainsKey(c)) {\n                dict[c]++;\n            } else\
    \ {\n                dict[c] = 1;\n            }\n            max = Math.Max(max,\
    \ dict[c]);\n        }\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var kv in dict) {\n            if (kv.Value == max) {\n    \
    \            result[kv.Key] = kv.Value;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        if (test == \"\") {\n            return result;\n        }\n        string[]\
    \ letters = test.Split(' ');\n        Dictionary<string,long> counts = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter] += 1L;\n            } else {\n           \
    \     counts[letter] = 1L;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        foreach (KeyValuePair<string,long> pair in counts) {\n            if\
    \ (pair.Value == max) {\n                result[pair.Key] = pair.Value;\n    \
    \        }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]++;\n\
    \            } else {\n                histogram[letter] = 1;\n            }\n\
    \        }\n        long max = 0;\n        foreach (KeyValuePair<string,long>\
    \ entry in histogram) {\n            if (entry.Value > max) {\n              \
    \  max = entry.Value;\n            }\n        }\n        foreach (KeyValuePair<string,long>\
    \ entry in histogram) {\n            if (entry.Value == max) {\n             \
    \   result[entry.Key] = entry.Value;\n            }\n        }\n        return\
    \ result;", "        var result = new Dictionary<string,long>();\n        var\
    \ letters = test.Split(' ');\n        foreach (var letter in letters) {\n    \
    \        if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        if (test.Length == 0) {\n            return\
    \ result;\n        }\n        string[] letters = test.Split(' ');\n        Dictionary<string,long>\
    \ counts = new Dictionary<string,long>();\n        foreach (string letter in letters)\
    \ {\n            if (counts.ContainsKey(letter)) {\n                counts[letter]++;\n\
    \            } else {\n                counts[letter] = 1;\n            }\n  \
    \      }\n        long max = counts.Values.Max();\n        foreach (string letter\
    \ in counts.Keys) {\n            if (counts[letter] == max) {\n              \
    \  result[letter] = max;\n            }\n        }\n        return result;", " \
    \       var result = new Dictionary<string,long>();\n        var letters = test.Split('\
    \ ');\n        foreach (var letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      var dict = new Dictionary<string,long>();\n        var max = 0L;\n    \
    \    foreach (var c in test.Split(' ')) {\n            if (dict.ContainsKey(c))\
    \ {\n                dict[c] += 1;\n            } else {\n                dict[c]\
    \ = 1;\n            }\n            max = Math.Max(max, dict[c]);\n        }\n\
    \        return dict.Where(x => x.Value == max).ToDictionary(x => x.Key, x =>\
    \ x.Value);", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        Dictionary<string,long> counts = new Dictionary<string,long>();\n   \
    \     foreach (string letter in test.Split(' ')) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter] += 1;\n            } else {\n            \
    \    counts[letter] = 1;\n            }\n        }\n        long max = 0;\n  \
    \      foreach (KeyValuePair<string,long> pair in counts) {\n            if (pair.Value\
    \ > max) {\n                max = pair.Value;\n            }\n        }\n    \
    \    foreach (KeyValuePair<string,long> pair in counts) {\n            if (pair.Value\
    \ == max) {\n                result[pair.Key] = pair.Value;\n            }\n \
    \       }\n        return result;", "        var result = new Dictionary<string,long>();\n\
    \        var letters = test.Split(' ');\n        foreach (var letter in letters)\
    \ {\n            if (result.ContainsKey(letter)) {\n                result[letter]\
    \ += 1;\n            } else {\n                result[letter] = 1;\n         \
    \   }\n        }\n        var max = result.Values.Max();\n        var keys = result.Keys.ToList();\n\
    \        var toRemove = new List<string>();\n        foreach (var key in keys)\
    \ {\n            if (result[key] != max) {\n                toRemove.Add(key);\n\
    \            }\n        }\n        foreach (var key in toRemove) {\n         \
    \   result.Remove(key);\n        }\n        return result;", "        var dict\
    \ = new Dictionary<string,long>();\n        foreach (var letter in test.Split('\
    \ ')) {\n            if (dict.ContainsKey(letter)) {\n                dict[letter]++;\n\
    \            } else {\n                dict[letter] = 1;\n            }\n    \
    \    }\n        var max = dict.Values.Max();\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var key in dict.Keys) {\n            if (dict[key] == max) {\n\
    \                result[key] = max;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' ')) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter] += 1;\n            } else {\n         \
    \       histogram[letter] = 1;\n            }\n        }\n        return histogram;",
  "        var hist = new Dictionary<string,long>();\n        foreach (var c in test.Split('\
    \ ')) {\n            if (hist.ContainsKey(c)) {\n                hist[c]++;\n\
    \            } else {\n                hist[c] = 1;\n            }\n        }\n\
    \        var max = hist.Values.Max();\n        var res = new Dictionary<string,long>();\n\
    \        foreach (var kv in hist) {\n            if (kv.Value == max) {\n    \
    \            res[kv.Key] = kv.Value;\n            }\n        }\n        return\
    \ res;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        Dictionary<string,long> hist = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' ')) {\n            if (hist.ContainsKey(s))\
    \ {\n                hist[s] += 1;\n            } else {\n                hist[s]\
    \ = 1;\n            }\n        }\n        long max = 0;\n        foreach (string\
    \ s in hist.Keys) {\n            if (hist[s] > max) {\n                max = hist[s];\n\
    \            }\n        }\n        foreach (string s in hist.Keys) {\n       \
    \     if (hist[s] == max) {\n                result[s] = hist[s];\n          \
    \  }\n        }\n        return result;", "        var dict = new Dictionary<string,long>();\n\
    \        var max = 0L;\n        foreach (var c in test.Split(' ')) {\n       \
    \     if (dict.ContainsKey(c)) {\n                dict[c]++;\n            } else\
    \ {\n                dict[c] = 1;\n            }\n            max = Math.Max(max,\
    \ dict[c]);\n        }\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var k in dict.Keys) {\n            if (dict[k] == max) {\n \
    \               result[k] = max;\n            }\n        }\n        return result;",
  "        var result = new Dictionary<string,long>();\n        var letters = test.Split('\
    \ ');\n        foreach (var letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter] += 1;\n            } else {\n            \
    \    result[letter] = 1;\n            }\n        }\n        return result;", " \
    \       Dictionary<string,long> result = new Dictionary<string,long>();\n    \
    \    Dictionary<string,long> count = new Dictionary<string,long>();\n        string[]\
    \ letters = test.Split(' ');\n        foreach (string letter in letters) {\n \
    \           if (count.ContainsKey(letter)) {\n                count[letter]++;\n\
    \            } else {\n                count[letter] = 1;\n            }\n   \
    \     }\n        long max = 0;\n        foreach (KeyValuePair<string,long> entry\
    \ in count) {\n            if (entry.Value > max) {\n                max = entry.Value;\n\
    \            }\n        }\n        foreach (KeyValuePair<string,long> entry in\
    \ count) {\n            if (entry.Value == max) {\n                result[entry.Key]\
    \ = entry.Value;\n            }\n        }\n        return result;", "       \
    \ Dictionary<string,long> result = new Dictionary<string,long>();\n        string[]\
    \ letters = test.Split(' ');\n        long max = 0;\n        foreach (string letter\
    \ in letters) {\n            if (result.ContainsKey(letter)) {\n             \
    \   result[letter]++;\n            } else {\n                result[letter] =\
    \ 1;\n            }\n            if (result[letter] > max) {\n               \
    \ max = result[letter];\n            }\n        }\n        Dictionary<string,long>\
    \ final = new Dictionary<string,long>();\n        foreach (KeyValuePair<string,long>\
    \ entry in result) {\n            if (entry.Value == max) {\n                final[entry.Key]\
    \ = entry.Value;\n            }\n        }\n        return final;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] words = test.Split('\
    \ ');\n        long max = 0;\n        foreach (string word in words) {\n     \
    \       if (result.ContainsKey(word)) {\n                result[word]++;\n   \
    \         } else {\n                result[word] = 1;\n            }\n       \
    \     if (result[word] > max) {\n                max = result[word];\n       \
    \     }\n        }\n        Dictionary<string,long> final = new Dictionary<string,long>();\n\
    \        foreach (KeyValuePair<string,long> entry in result) {\n            if\
    \ (entry.Value == max) {\n                final[entry.Key] = entry.Value;\n  \
    \          }\n        }\n        return final;", "        var dict = new Dictionary<string,long>();\n\
    \        var max = 0L;\n        foreach (var c in test.Split(' ')) {\n       \
    \     if (dict.ContainsKey(c)) {\n                dict[c]++;\n            } else\
    \ {\n                dict[c] = 1;\n            }\n            max = Math.Max(max,\
    \ dict[c]);\n        }\n        return dict.Where(kv => kv.Value == max).ToDictionary(kv\
    \ => kv.Key, kv => kv.Value);", "        var dict = new Dictionary<string,long>();\n\
    \        foreach (var c in test.Split(' ')) {\n            if (dict.ContainsKey(c))\
    \ {\n                dict[c] += 1;\n            } else {\n                dict[c]\
    \ = 1;\n            }\n        }\n        var max = dict.Values.Max();\n     \
    \   var result = new Dictionary<string,long>();\n        foreach (var kv in dict)\
    \ {\n            if (kv.Value == max) {\n                result[kv.Key] = kv.Value;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0) {\n \
    \           return result;\n        }\n        string[] letters = test.Split('\
    \ ');\n        Dictionary<string,long> counts = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter] += 1;\n            } else {\n            \
    \    counts[letter] = 1;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        foreach (string letter in counts.Keys) {\n            if (counts[letter]\
    \ == max) {\n                result[letter] = max;\n            }\n        }\n\
    \        return result;", "        var dict = new Dictionary<string,long>();\n\
    \        var max = 0L;\n        foreach (var c in test.Split(' ')) {\n       \
    \     if (dict.ContainsKey(c)) {\n                dict[c]++;\n            } else\
    \ {\n                dict[c] = 1;\n            }\n            max = Math.Max(max,\
    \ dict[c]);\n        }\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var kv in dict) {\n            if (kv.Value == max) {\n    \
    \            result[kv.Key] = kv.Value;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        if (test.Length == 0) {\n            return result;\n        }\n    \
    \    string[] words = test.Split(' ');\n        Dictionary<string,long> counts\
    \ = new Dictionary<string,long>();\n        foreach (string word in words) {\n\
    \            if (counts.ContainsKey(word)) {\n                counts[word] +=\
    \ 1;\n            } else {\n                counts[word] = 1;\n            }\n\
    \        }\n        long max = counts.Values.Max();\n        foreach (KeyValuePair<string,long>\
    \ entry in counts) {\n            if (entry.Value == max) {\n                result[entry.Key]\
    \ = entry.Value;\n            }\n        }\n        return result;", "       \
    \ var dict = new Dictionary<string,long>();\n        foreach (var c in test.Split('\
    \ ')) {\n            if (dict.ContainsKey(c)) {\n                dict[c]++;\n\
    \            } else {\n                dict[c] = 1;\n            }\n        }\n\
    \        var max = dict.Values.Max();\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var kv in dict) {\n            if (kv.Value == max) {\n    \
    \            result[kv.Key] = kv.Value;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        long max = 0;\n        foreach\
    \ (string word in words) {\n            if (result.ContainsKey(word)) {\n    \
    \            result[word]++;\n            } else {\n                result[word]\
    \ = 1;\n            }\n            if (result[word] > max) {\n               \
    \ max = result[word];\n            }\n        }\n        Dictionary<string,long>\
    \ final = new Dictionary<string,long>();\n        foreach (string word in result.Keys)\
    \ {\n            if (result[word] == max) {\n                final[word] = result[word];\n\
    \            }\n        }\n        return final;", "        var dict = new Dictionary<string,long>();\n\
    \        foreach (var letter in test.Split(' ')) {\n            if (dict.ContainsKey(letter))\
    \ {\n                dict[letter]++;\n            } else {\n                dict[letter]\
    \ = 1;\n            }\n        }\n        var max = dict.Values.Max();\n     \
    \   var result = new Dictionary<string,long>();\n        foreach (var key in dict.Keys)\
    \ {\n            if (dict[key] == max) {\n                result[key] = max;\n\
    \            }\n        }\n        return result;", "        var histogram = new\
    \ Dictionary<string,long>();\n        foreach (var c in test.Split(' ')) {\n \
    \           if (histogram.ContainsKey(c)) {\n                histogram[c] += 1;\n\
    \            } else {\n                histogram[c] = 1;\n            }\n    \
    \    }\n        var max = histogram.Values.Max();\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var kv in histogram) {\n            if (kv.Value == max) {\n\
    \                result[kv.Key] = kv.Value;\n            }\n        }\n      \
    \  return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (result.ContainsKey(word)) {\n                result[word]++;\n\
    \            } else {\n                result[word] = 1;\n            }\n    \
    \    }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        if (test.Length == 0) {\n            return\
    \ result;\n        }\n        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' ')) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter] += 1;\n            } else {\n         \
    \       histogram[letter] = 1;\n            }\n        }\n        long max = histogram.Values.Max();\n\
    \        foreach (KeyValuePair<string,long> entry in histogram) {\n          \
    \  if (entry.Value == max) {\n                result[entry.Key] = entry.Value;\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ Dictionary<string,long>();\n        var letters = test.Split(' ');\n       \
    \ var max = 0L;\n        foreach (var letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter] += 1;\n            } else {\n            \
    \    result[letter] = 1;\n            }\n            if (result[letter] > max)\
    \ {\n                max = result[letter];\n            }\n        }\n       \
    \ var keys = new List<string>();\n        foreach (var key in result.Keys) {\n\
    \            if (result[key] < max) {\n                keys.Add(key);\n      \
    \      }\n        }\n        foreach (var key in keys) {\n            result.Remove(key);\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        // TODO: Implement your solution here\n\
    \        return result;", "        var d = new Dictionary<string,long>();\n  \
    \      var m = new Dictionary<string,long>();\n        foreach (var c in test.Split('\
    \ ')) {\n            if (d.ContainsKey(c)) {\n                d[c] += 1;\n   \
    \         } else {\n                d[c] = 1;\n            }\n            if (m.ContainsKey(c))\
    \ {\n                m[c] += 1;\n            } else {\n                m[c] =\
    \ 1;\n            }\n        }\n        var max = m.Values.Max();\n        var\
    \ r = new Dictionary<string,long>();\n        foreach (var k in m.Keys) {\n  \
    \          if (m[k] == max) {\n                r[k] = d[k];\n            }\n \
    \       }\n        return r;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        if (test.Length == 0) {\n            return result;\n        }\n    \
    \    string[] letters = test.Split(' ');\n        long max = 0;\n        foreach\
    \ (string letter in letters) {\n            if (result.ContainsKey(letter)) {\n\
    \                result[letter] += 1;\n            } else {\n                result[letter]\
    \ = 1;\n            }\n            if (result[letter] > max) {\n             \
    \   max = result[letter];\n            }\n        }\n        Dictionary<string,long>\
    \ result2 = new Dictionary<string,long>();\n        foreach (string letter in\
    \ result.Keys) {\n            if (result[letter] == max) {\n                result2[letter]\
    \ = result[letter];\n            }\n        }\n        return result2;", "   \
    \     var result = new Dictionary<string,long>();\n        var letters = test.Split('\
    \ ');\n        var max = 0L;\n        foreach (var letter in letters) {\n    \
    \        if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1L;\n            }\n \
    \           if (result[letter] > max) {\n                max = result[letter];\n\
    \            }\n        }\n        var result2 = new Dictionary<string,long>();\n\
    \        foreach (var letter in result.Keys) {\n            if (result[letter]\
    \ == max) {\n                result2[letter] = result[letter];\n            }\n\
    \        }\n        return result2;", "        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]++;\n\
    \            } else {\n                histogram[letter] = 1L;\n            }\n\
    \        }\n        return histogram;", "        var hist = new Dictionary<string,long>();\n\
    \        foreach (var c in test.Split(' ')) {\n            if (hist.ContainsKey(c))\
    \ {\n                hist[c]++;\n            } else {\n                hist[c]\
    \ = 1;\n            }\n        }\n        var max = hist.Values.Max();\n     \
    \   return hist.Where(x => x.Value == max).ToDictionary(x => x.Key, x => x.Value);",
  "        var d = new Dictionary<string,long>();\n        foreach (var c in test.Split('\
    \ ')) {\n            if (d.ContainsKey(c)) {\n                d[c]++;\n      \
    \      } else {\n                d[c] = 1;\n            }\n        }\n       \
    \ var max = d.Values.Max();\n        var res = new Dictionary<string,long>();\n\
    \        foreach (var k in d.Keys) {\n            if (d[k] == max) {\n       \
    \         res[k] = max;\n            }\n        }\n        return res;", "   \
    \     Dictionary<string,long> result = new Dictionary<string,long>();\n      \
    \  string[] letters = test.Split(' ');\n        long max = 0;\n        foreach\
    \ (string letter in letters) {\n            if (result.ContainsKey(letter)) {\n\
    \                result[letter]++;\n            } else {\n                result[letter]\
    \ = 1;\n            }\n            if (result[letter] > max) {\n             \
    \   max = result[letter];\n            }\n        }\n        Dictionary<string,long>\
    \ final = new Dictionary<string,long>();\n        foreach (string letter in result.Keys)\
    \ {\n            if (result[letter] == max) {\n                final[letter] =\
    \ result[letter];\n            }\n        }\n        return final;", "       \
    \ Dictionary<string,long> result = new Dictionary<string,long>();\n        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ test.Split(' ')) {\n            if (histogram.ContainsKey(letter)) {\n     \
    \           histogram[letter] += 1;\n            } else {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        long max = 0;\n        foreach (KeyValuePair<string,long>\
    \ entry in histogram) {\n            if (entry.Value > max) {\n              \
    \  max = entry.Value;\n            }\n        }\n        foreach (KeyValuePair<string,long>\
    \ entry in histogram) {\n            if (entry.Value == max) {\n             \
    \   result[entry.Key] = entry.Value;\n            }\n        }\n        return\
    \ result;", "        var dict = new Dictionary<string,long>();\n        foreach\
    \ (var c in test.Split(' ')) {\n            if (dict.ContainsKey(c)) {\n     \
    \           dict[c] += 1;\n            } else {\n                dict[c] = 1;\n\
    \            }\n        }\n        return dict;", "        // TODO: Implement\
    \ this function\n        return null;", "        // TODO: Implement this function\n\
    \        return new Dictionary<string,long>();", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')) {\n            if (histogram.ContainsKey(s)) {\n                histogram[s]++;\n\
    \            } else {\n                histogram[s] = 1;\n            }\n    \
    \    }\n        long max = histogram.Values.Max();\n        foreach (KeyValuePair<string,long>\
    \ kvp in histogram) {\n            if (kvp.Value == max) {\n                result[kvp.Key]\
    \ = kvp.Value;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        Dictionary<string,long> counts\
    \ = new Dictionary<string,long>();\n        string[] words = test.Split(' ');\n\
    \        foreach (string word in words) {\n            if (counts.ContainsKey(word))\
    \ {\n                counts[word] += 1;\n            } else {\n              \
    \  counts[word] = 1;\n            }\n        }\n        long max = 0;\n      \
    \  foreach (KeyValuePair<string,long> pair in counts) {\n            if (pair.Value\
    \ > max) {\n                max = pair.Value;\n            }\n        }\n    \
    \    foreach (KeyValuePair<string,long> pair in counts) {\n            if (pair.Value\
    \ == max) {\n                result[pair.Key] = pair.Value;\n            }\n \
    \       }\n        return result;", "        var dict = new Dictionary<string,long>();\n\
    \        var max = 0L;\n        var words = test.Split(' ');\n        foreach\
    \ (var word in words) {\n            if (dict.ContainsKey(word)) {\n         \
    \       dict[word] += 1;\n            } else {\n                dict[word] = 1;\n\
    \            }\n            if (dict[word] > max) {\n                max = dict[word];\n\
    \            }\n        }\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var key in dict.Keys) {\n            if (dict[key] == max) {\n\
    \                result[key] = max;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string word in words) {\n\
    \            if (histogram.ContainsKey(word)) {\n                histogram[word]++;\n\
    \            } else {\n                histogram[word] = 1;\n            }\n \
    \       }\n        long max = histogram.Values.Max();\n        foreach (KeyValuePair<string,long>\
    \ entry in histogram) {\n            if (entry.Value == max) {\n             \
    \   result[entry.Key] = entry.Value;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        long max = 0;\n        foreach\
    \ (string word in words) {\n            if (result.ContainsKey(word)) {\n    \
    \            result[word] += 1;\n            } else {\n                result[word]\
    \ = 1;\n            }\n            if (result[word] > max) {\n               \
    \ max = result[word];\n            }\n        }\n        Dictionary<string,long>\
    \ final = new Dictionary<string,long>();\n        foreach (string word in result.Keys)\
    \ {\n            if (result[word] == max) {\n                final[word] = result[word];\n\
    \            }\n        }\n        return final;", '        return new Dictionary<string,long>();',
  "        var dict = new Dictionary<string,long>();\n        var max = 0L;\n    \
    \    foreach (var c in test.Split(' ')) {\n            if (dict.ContainsKey(c))\
    \ {\n                dict[c]++;\n            } else {\n                dict[c]\
    \ = 1;\n            }\n            max = Math.Max(max, dict[c]);\n        }\n\
    \        return dict.Where(x => x.Value == max).ToDictionary(x => x.Key, x =>\
    \ x.Value);", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (result.ContainsKey(word)) {\n                result[word]\
    \ += 1;\n            } else {\n                result[word] = 1;\n           \
    \ }\n        }\n        return result;", '        return null;', "        var\
    \ dict = new Dictionary<string,long>();\n        var max = 0L;\n        foreach\
    \ (var c in test.Split(' ')) {\n            if (dict.ContainsKey(c)) {\n     \
    \           dict[c] += 1;\n            } else {\n                dict[c] = 1;\n\
    \            }\n            max = Math.Max(max, dict[c]);\n        }\n       \
    \ return dict.Where(x => x.Value == max).ToDictionary(x => x.Key, x => x.Value);",
  "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n  \
    \      foreach (string letter in test.Split(' ')) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter] += 1;\n            } else {\n         \
    \       histogram[letter] = 1;\n            }\n        }\n        return histogram;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (result.ContainsKey(word)) {\n                result[word]++;\n\
    \            } else {\n                result[word] = 1;\n            }\n    \
    \    }\n        return result;", "        var dict = new Dictionary<string,long>();\n\
    \        foreach (var c in test.Split(' ')) {\n            if (dict.ContainsKey(c))\
    \ {\n                dict[c]++;\n            } else {\n                dict[c]\
    \ = 1;\n            }\n        }\n        var max = dict.Values.Max();\n     \
    \   var result = new Dictionary<string,long>();\n        foreach (var kv in dict)\
    \ {\n            if (kv.Value == max) {\n                result[kv.Key] = kv.Value;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] words = test.Split('\
    \ ');\n        long max = 0;\n        foreach (string word in words) {\n     \
    \       if (result.ContainsKey(word)) {\n                result[word]++;\n   \
    \         } else {\n                result[word] = 1;\n            }\n       \
    \     if (result[word] > max) {\n                max = result[word];\n       \
    \     }\n        }\n        Dictionary<string,long> final = new Dictionary<string,long>();\n\
    \        foreach (KeyValuePair<string,long> kvp in result) {\n            if (kvp.Value\
    \ == max) {\n                final[kvp.Key] = kvp.Value;\n            }\n    \
    \    }\n        return final;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        string[] words = test.Split(' ');\n    \
    \    foreach (string word in words) {\n            if (result.ContainsKey(word))\
    \ {\n                result[word]++;\n            } else {\n                result[word]\
    \ = 1;\n            }\n        }\n        return result;", "        var dict =\
    \ new Dictionary<string,long>();\n        foreach (var c in test.Split(' ')) {\n\
    \            if (dict.ContainsKey(c)) {\n                dict[c]++;\n        \
    \    } else {\n                dict[c] = 1;\n            }\n        }\n      \
    \  var max = dict.Values.Max();\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var kv in dict) {\n            if (kv.Value == max) {\n    \
    \            result[kv.Key] = kv.Value;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] split = test.Split(' ');\n        long max = 0;\n        foreach\
    \ (string s in split) {\n            if (result.ContainsKey(s)) {\n          \
    \      result[s]++;\n            } else {\n                result[s] = 1;\n  \
    \          }\n            if (result[s] > max) {\n                max = result[s];\n\
    \            }\n        }\n        Dictionary<string,long> final = new Dictionary<string,long>();\n\
    \        foreach (KeyValuePair<string,long> kvp in result) {\n            if (kvp.Value\
    \ == max) {\n                final[kvp.Key] = kvp.Value;\n            }\n    \
    \    }\n        return final;", "        var dict = new Dictionary<string,long>();\n\
    \        var max = 0L;\n        foreach (var c in test.Split(' ')) {\n       \
    \     if (dict.ContainsKey(c)) {\n                dict[c]++;\n            } else\
    \ {\n                dict[c] = 1;\n            }\n            max = Math.Max(max,\
    \ dict[c]);\n        }\n        return dict.Where(kv => kv.Value == max).ToDictionary(kv\
    \ => kv.Key, kv => kv.Value);", "        // Your code here\n        return null;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   if (test.Length == 0) {\n            return result;\n        }\n        string[]\
    \ letters = test.Split(' ');\n        Dictionary<string,long> counts = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter]++;\n            } else {\n               \
    \ counts[letter] = 1;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        foreach (string letter in counts.Keys) {\n            if (counts[letter]\
    \ == max) {\n                result[letter] = max;\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        foreach (string letter in\
    \ letters) {\n            if (histogram.ContainsKey(letter)) {\n             \
    \   histogram[letter]++;\n            } else {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ test.Split(' ')) {\n            if (histogram.ContainsKey(letter)) {\n     \
    \           histogram[letter] += 1;\n            } else {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]\
    \ += 1;\n            } else {\n                histogram[letter] = 1;\n      \
    \      }\n        }\n        long max = 0;\n        foreach (KeyValuePair<string,long>\
    \ entry in histogram) {\n            if (entry.Value > max) {\n              \
    \  max = entry.Value;\n            }\n        }\n        foreach (KeyValuePair<string,long>\
    \ entry in histogram) {\n            if (entry.Value == max) {\n             \
    \   result[entry.Key] = entry.Value;\n            }\n        }\n        return\
    \ result;", "        // Your code goes here\n        return null;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        // TODO: Implement your solution\
    \ here\n        return result;", "        var result = new Dictionary<string,long>();\n\
    \        var letters = test.Split(' ');\n        var max = 0L;\n        foreach\
    \ (var letter in letters) {\n            if (result.ContainsKey(letter)) {\n \
    \               result[letter] += 1;\n            } else {\n                result[letter]\
    \ = 1;\n            }\n            if (result[letter] > max) {\n             \
    \   max = result[letter];\n            }\n        }\n        var final = new Dictionary<string,long>();\n\
    \        foreach (var letter in result.Keys) {\n            if (result[letter]\
    \ == max) {\n                final[letter] = result[letter];\n            }\n\
    \        }\n        return final;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        if (test == \"\") {\n            return\
    \ result;\n        }\n        string[] letters = test.Split(' ');\n        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ letters) {\n            if (histogram.ContainsKey(letter)) {\n             \
    \   histogram[letter] += 1;\n            } else {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        long max = histogram.Values.Max();\n\
    \        foreach (KeyValuePair<string,long> entry in histogram) {\n          \
    \  if (entry.Value == max) {\n                result[entry.Key] = entry.Value;\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ Dictionary<string,long>();\n        var letters = test.Split(' ');\n       \
    \ var max = 0L;\n        foreach (var letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1L;\n            }\n            if (result[letter] > max) {\n\
    \                max = result[letter];\n            }\n        }\n        var\
    \ final = new Dictionary<string,long>();\n        foreach (var key in result.Keys)\
    \ {\n            if (result[key] == max) {\n                final[key] = result[key];\n\
    \            }\n        }\n        return final;", "        var dict = new Dictionary<string,long>();\n\
    \        var max = 0L;\n        foreach (var c in test.Split(' ')) {\n       \
    \     if (dict.ContainsKey(c)) {\n                dict[c] += 1;\n            }\
    \ else {\n                dict[c] = 1;\n            }\n            max = Math.Max(max,\
    \ dict[c]);\n        }\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var k in dict.Keys) {\n            if (dict[k] == max) {\n \
    \               result[k] = max;\n            }\n        }\n        return result;",
  "        var dict = new Dictionary<string,long>();\n        var max = 0L;\n    \
    \    foreach (var c in test.Split(' ')) {\n            if (dict.ContainsKey(c))\
    \ {\n                dict[c] += 1;\n            } else {\n                dict[c]\
    \ = 1;\n            }\n            max = Math.Max(max, dict[c]);\n        }\n\
    \        var result = new Dictionary<string,long>();\n        foreach (var kv\
    \ in dict) {\n            if (kv.Value == max) {\n                result[kv.Key]\
    \ = kv.Value;\n            }\n        }\n        return result;", "        var\
    \ dict = new Dictionary<string,long>();\n        foreach (var c in test.Split('\
    \ ')) {\n            if (dict.ContainsKey(c)) {\n                dict[c]++;\n\
    \            } else {\n                dict[c] = 1;\n            }\n        }\n\
    \        var max = dict.Values.Max();\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var kv in dict) {\n            if (kv.Value == max) {\n    \
    \            result[kv.Key] = kv.Value;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        Dictionary<string,long> counts = new Dictionary<string,long>();\n   \
    \     string[] letters = test.Split(' ');\n        foreach (string letter in letters)\
    \ {\n            if (counts.ContainsKey(letter)) {\n                counts[letter]\
    \ += 1;\n            } else {\n                counts[letter] = 1;\n         \
    \   }\n        }\n        long max = 0;\n        foreach (KeyValuePair<string,long>\
    \ pair in counts) {\n            if (pair.Value > max) {\n                max\
    \ = pair.Value;\n            }\n        }\n        foreach (KeyValuePair<string,long>\
    \ pair in counts) {\n            if (pair.Value == max) {\n                result[pair.Key]\
    \ = pair.Value;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')) {\n            if (result.ContainsKey(s)) {\n                result[s]++;\n\
    \            } else {\n                result[s] = 1L;\n            }\n      \
    \  }\n        return result;", "        var dict = new Dictionary<string,long>();\n\
    \        var max = 0L;\n        foreach (var c in test.Split(' ')) {\n       \
    \     if (dict.ContainsKey(c)) {\n                dict[c]++;\n            } else\
    \ {\n                dict[c] = 1;\n            }\n            max = Math.Max(max,\
    \ dict[c]);\n        }\n        return dict.Where(x => x.Value == max).ToDictionary(x\
    \ => x.Key, x => x.Value);", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        if (test.Length == 0) {\n            return result;\n        }\n    \
    \    string[] letters = test.Split(' ');\n        Dictionary<string,long> counts\
    \ = new Dictionary<string,long>();\n        foreach (string letter in letters)\
    \ {\n            if (counts.ContainsKey(letter)) {\n                counts[letter]\
    \ += 1;\n            } else {\n                counts[letter] = 1;\n         \
    \   }\n        }\n        long max = counts.Values.Max();\n        foreach (KeyValuePair<string,long>\
    \ pair in counts) {\n            if (pair.Value == max) {\n                result[pair.Key]\
    \ = pair.Value;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        Dictionary<string,long> hist\
    \ = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')) {\n            if (hist.ContainsKey(s)) {\n                hist[s] += 1;\n\
    \            } else {\n                hist[s] = 1;\n            }\n        }\n\
    \        long max = 0;\n        foreach (KeyValuePair<string,long> kv in hist)\
    \ {\n            if (kv.Value > max) {\n                max = kv.Value;\n    \
    \        }\n        }\n        foreach (KeyValuePair<string,long> kv in hist)\
    \ {\n            if (kv.Value == max) {\n                result[kv.Key] = kv.Value;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        Dictionary<string,long> counts\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (counts.ContainsKey(letter)) {\n                counts[letter]++;\n\
    \            } else {\n                counts[letter] = 1;\n            }\n  \
    \      }\n        long max = counts.Values.Max();\n        foreach (KeyValuePair<string,long>\
    \ kvp in counts) {\n            if (kvp.Value == max) {\n                result[kvp.Key]\
    \ = kvp.Value;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0) {\n \
    \           return result;\n        }\n        string[] tokens = test.Split('\
    \ ');\n        long max = 0;\n        foreach (string token in tokens) {\n   \
    \         if (result.ContainsKey(token)) {\n                result[token] += 1;\n\
    \            } else {\n                result[token] = 1;\n            }\n   \
    \         if (result[token] > max) {\n                max = result[token];\n \
    \           }\n        }\n        Dictionary<string,long> result2 = new Dictionary<string,long>();\n\
    \        foreach (string key in result.Keys) {\n            if (result[key] ==\
    \ max) {\n                result2[key] = result[key];\n            }\n       \
    \ }\n        return result2;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (result.ContainsKey(word)) {\n                result[word]++;\n\
    \            } else {\n                result[word] = 1;\n            }\n    \
    \    }\n        return result;", "        var result = new Dictionary<string,long>();\n\
    \        var words = test.Split(' ');\n        var max = 0L;\n        foreach\
    \ (var word in words) {\n            if (result.ContainsKey(word)) {\n       \
    \         result[word]++;\n            } else {\n                result[word]\
    \ = 1L;\n            }\n            if (result[word] > max) {\n              \
    \  max = result[word];\n            }\n        }\n        var final = new Dictionary<string,long>();\n\
    \        foreach (var word in result.Keys) {\n            if (result[word] ==\
    \ max) {\n                final[word] = max;\n            }\n        }\n     \
    \   return final;", "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        foreach (string letter in\
    \ letters) {\n            if (histogram.ContainsKey(letter)) {\n             \
    \   histogram[letter]++;\n            } else {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        return histogram;", "        // Your\
    \ code here\n        return null;", "        Dictionary<string,long> dict = new\
    \ Dictionary<string,long>();\n        string[] words = test.Split(' ');\n    \
    \    foreach (string word in words) {\n            if (dict.ContainsKey(word))\
    \ {\n                dict[word] += 1;\n            } else {\n                dict[word]\
    \ = 1;\n            }\n        }\n        return dict;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0) {\n \
    \           return result;\n        }\n        string[] words = test.Split(' ');\n\
    \        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string word in words) {\n            if (histogram.ContainsKey(word))\
    \ {\n                histogram[word] += 1;\n            } else {\n           \
    \     histogram[word] = 1;\n            }\n        }\n        long max = histogram.Values.Max();\n\
    \        foreach (string key in histogram.Keys) {\n            if (histogram[key]\
    \ == max) {\n                result[key] = max;\n            }\n        }\n  \
    \      return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        foreach (string letter in\
    \ letters) {\n            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        if (test.Length == 0) {\n            return\
    \ result;\n        }\n        string[] words = test.Split(' ');\n        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        long max = 0;\n        foreach\
    \ (string word in words) {\n            if (histogram.ContainsKey(word)) {\n \
    \               histogram[word] += 1;\n            } else {\n                histogram[word]\
    \ = 1;\n            }\n            if (histogram[word] > max) {\n            \
    \    max = histogram[word];\n            }\n        }\n        foreach (KeyValuePair<string,long>\
    \ entry in histogram) {\n            if (entry.Value == max) {\n             \
    \   result[entry.Key] = entry.Value;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (result.ContainsKey(word)) {\n                result[word]\
    \ += 1;\n            } else {\n                result[word] = 1;\n           \
    \ }\n        }\n        return result;", "        // TODO: Implement this function\n\
    \        return null;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        if (test.Length == 0) {\n            return result;\n        }\n    \
    \    string[] words = test.Split(' ');\n        Dictionary<string,long> counts\
    \ = new Dictionary<string,long>();\n        foreach (string word in words) {\n\
    \            if (counts.ContainsKey(word)) {\n                counts[word] +=\
    \ 1;\n            } else {\n                counts[word] = 1;\n            }\n\
    \        }\n        long max = counts.Values.Max();\n        foreach (string key\
    \ in counts.Keys) {\n            if (counts[key] == max) {\n                result[key]\
    \ = max;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        // Your code here\n       \
    \ return result;", "        var result = new Dictionary<string,long>();\n    \
    \    var letters = test.Split(' ');\n        foreach (var letter in letters) {\n\
    \            if (result.ContainsKey(letter)) {\n                result[letter]++;\n\
    \            } else {\n                result[letter] = 1;\n            }\n  \
    \      }\n        return result;", "        var histogram = new Dictionary<string,long>();\n\
    \        foreach (var letter in test.Split(' ')) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter]++;\n            } else {\n            \
    \    histogram[letter] = 1;\n            }\n        }\n        return histogram;",
  "        var result = new Dictionary<string,long>();\n        var letters = test.Split('\
    \ ');\n        foreach (var letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> hist = new Dictionary<string,long>();\n       \
    \ foreach (string s in test.Split(' ')) {\n            if (hist.ContainsKey(s))\
    \ {\n                hist[s] += 1;\n            } else {\n                hist[s]\
    \ = 1;\n            }\n        }\n        return hist;", "        var dict = new\
    \ Dictionary<string,long>();\n        foreach (var c in test.Split(' ')) {\n \
    \           if (dict.ContainsKey(c)) {\n                dict[c] += 1;\n      \
    \      } else {\n                dict[c] = 1;\n            }\n        }\n    \
    \    var max = dict.Values.Max();\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var kv in dict) {\n            if (kv.Value == max) {\n    \
    \            result[kv.Key] = kv.Value;\n            }\n        }\n        return\
    \ result;", "        var dict = new Dictionary<string,long>();\n        var max\
    \ = 0L;\n        foreach (var c in test.Split(' ')) {\n            if (dict.ContainsKey(c))\
    \ {\n                dict[c]++;\n            } else {\n                dict[c]\
    \ = 1;\n            }\n            max = Math.Max(max, dict[c]);\n        }\n\
    \        return dict.Where(x => x.Value == max).ToDictionary(x => x.Key, x =>\
    \ x.Value);", "        // Your code here\n        return null;", "        var\
    \ dict = new Dictionary<string,long>();\n        foreach (var c in test.Split('\
    \ ')) {\n            if (dict.ContainsKey(c)) {\n                dict[c]++;\n\
    \            } else {\n                dict[c] = 1;\n            }\n        }\n\
    \        var max = dict.Values.Max();\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var kv in dict) {\n            if (kv.Value == max) {\n    \
    \            result[kv.Key] = kv.Value;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' ')) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter] += 1;\n            } else {\n         \
    \       histogram[letter] = 1;\n            }\n        }\n        long max = 0;\n\
    \        foreach (KeyValuePair<string,long> entry in histogram) {\n          \
    \  if (entry.Value > max) {\n                max = entry.Value;\n            }\n\
    \        }\n        foreach (KeyValuePair<string,long> entry in histogram) {\n\
    \            if (entry.Value == max) {\n                result[entry.Key] = entry.Value;\n\
    \            }\n        }\n        return result;", "        // Your code here\n\
    \        return null;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        // TODO: Implement your solution here\n        return result;", "   \
    \     Dictionary<string,long> result = new Dictionary<string,long>();\n      \
    \  string[] words = test.Split(' ');\n        foreach (string word in words) {\n\
    \            if (result.ContainsKey(word)) {\n                result[word] +=\
    \ 1;\n            } else {\n                result[word] = 1;\n            }\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        Dictionary<string,long> histogram =\
    \ new Dictionary<string,long>();\n        foreach (string s in test.Split(' '))\
    \ {\n            if (histogram.ContainsKey(s)) {\n                histogram[s]++;\n\
    \            } else {\n                histogram[s] = 1;\n            }\n    \
    \    }\n        long max = 0;\n        foreach (KeyValuePair<string,long> kvp\
    \ in histogram) {\n            if (kvp.Value > max) {\n                max = kvp.Value;\n\
    \            }\n        }\n        foreach (KeyValuePair<string,long> kvp in histogram)\
    \ {\n            if (kvp.Value == max) {\n                result[kvp.Key] = kvp.Value;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        string[] words = test.Split(' ');\n\
    \        foreach (string word in words) {\n            if (histogram.ContainsKey(word))\
    \ {\n                histogram[word] += 1;\n            } else {\n           \
    \     histogram[word] = 1;\n            }\n        }\n        long max = 0;\n\
    \        foreach (KeyValuePair<string,long> entry in histogram) {\n          \
    \  if (entry.Value > max) {\n                max = entry.Value;\n            }\n\
    \        }\n        foreach (KeyValuePair<string,long> entry in histogram) {\n\
    \            if (entry.Value == max) {\n                result[entry.Key] = entry.Value;\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ Dictionary<string,long>();\n        var letters = test.Split(' ');\n       \
    \ var max = 0L;\n        foreach (var letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter] += 1;\n            } else {\n            \
    \    result[letter] = 1;\n            }\n            if (result[letter] > max)\
    \ {\n                max = result[letter];\n            }\n        }\n       \
    \ var result2 = new Dictionary<string,long>();\n        foreach (var letter in\
    \ result.Keys) {\n            if (result[letter] == max) {\n                result2[letter]\
    \ = result[letter];\n            }\n        }\n        return result2;", "   \
    \     var result = new Dictionary<string,long>();\n        var letters = test.Split('\
    \ ');\n        var max = 0L;\n        foreach (var letter in letters) {\n    \
    \        if (result.ContainsKey(letter)) {\n                result[letter] +=\
    \ 1;\n            } else {\n                result[letter] = 1;\n            }\n\
    \            if (result[letter] > max) {\n                max = result[letter];\n\
    \            }\n        }\n        var result2 = new Dictionary<string,long>();\n\
    \        foreach (var letter in result.Keys) {\n            if (result[letter]\
    \ == max) {\n                result2[letter] = result[letter];\n            }\n\
    \        }\n        return result2;", "        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]++;\n\
    \            } else {\n                histogram[letter] = 1L;\n            }\n\
    \        }\n        return histogram;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        string[] letters = test.Split(' ');\n\
    \        foreach (string letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   Dictionary<string,long> histogram = new Dictionary<string,long>();\n     \
    \   foreach (string letter in test.Split(' ')) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter] += 1;\n            } else {\n         \
    \       histogram[letter] = 1;\n            }\n        }\n        long max = 0;\n\
    \        foreach (KeyValuePair<string,long> entry in histogram) {\n          \
    \  if (entry.Value > max) {\n                max = entry.Value;\n            }\n\
    \        }\n        foreach (KeyValuePair<string,long> entry in histogram) {\n\
    \            if (entry.Value == max) {\n                result[entry.Key] = entry.Value;\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ Dictionary<string,long>();\n        var letters = test.Split(' ');\n       \
    \ foreach (var letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter] += 1;\n            } else {\n            \
    \    result[letter] = 1;\n            }\n        }\n        return result;", " \
    \       var dict = new Dictionary<string,long>();\n        foreach (var c in test.Split('\
    \ ')) {\n            if (dict.ContainsKey(c)) {\n                dict[c]++;\n\
    \            } else {\n                dict[c] = 1;\n            }\n        }\n\
    \        var max = dict.Values.Max();\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var kv in dict) {\n            if (kv.Value == max) {\n    \
    \            result[kv.Key] = kv.Value;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' ')) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter] += 1;\n            } else {\n         \
    \       histogram[letter] = 1;\n            }\n        }\n        long max = 0;\n\
    \        foreach (KeyValuePair<string,long> pair in histogram) {\n           \
    \ if (pair.Value > max) {\n                max = pair.Value;\n            }\n\
    \        }\n        foreach (KeyValuePair<string,long> pair in histogram) {\n\
    \            if (pair.Value == max) {\n                result[pair.Key] = pair.Value;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        string[] words = test.Split('\
    \ ');\n        foreach (string word in words) {\n            if (result.ContainsKey(word))\
    \ {\n                result[word]++;\n            } else {\n                result[word]\
    \ = 1;\n            }\n        }\n        return result;", "        var dict =\
    \ new Dictionary<string,long>();\n        var max = 0L;\n        foreach (var\
    \ c in test.Split(' ')) {\n            if (dict.ContainsKey(c)) {\n          \
    \      dict[c]++;\n            } else {\n                dict[c] = 1;\n      \
    \      }\n            max = Math.Max(max, dict[c]);\n        }\n        return\
    \ dict.Where(x => x.Value == max).ToDictionary(x => x.Key, x => x.Value);", " \
    \       Dictionary<string,long> result = new Dictionary<string,long>();\n    \
    \    string[] words = test.Split(' ');\n        long max = 0;\n        foreach\
    \ (string word in words) {\n            if (result.ContainsKey(word)) {\n    \
    \            result[word] += 1;\n            } else {\n                result[word]\
    \ = 1;\n            }\n            if (result[word] > max) {\n               \
    \ max = result[word];\n            }\n        }\n        Dictionary<string,long>\
    \ final = new Dictionary<string,long>();\n        foreach (string key in result.Keys)\
    \ {\n            if (result[key] == max) {\n                final[key] = result[key];\n\
    \            }\n        }\n        return final;", "        Dictionary<string,long>\
    \ res = new Dictionary<string,long>();\n        string[] words = test.Split('\
    \ ');\n        Dictionary<string,long> dic = new Dictionary<string,long>();\n\
    \        foreach (string word in words) {\n            if (dic.ContainsKey(word))\
    \ {\n                dic[word]++;\n            } else {\n                dic[word]\
    \ = 1;\n            }\n        }\n        long max = 0;\n        foreach (KeyValuePair<string,long>\
    \ pair in dic) {\n            if (pair.Value > max) {\n                max = pair.Value;\n\
    \            }\n        }\n        foreach (KeyValuePair<string,long> pair in\
    \ dic) {\n            if (pair.Value == max) {\n                res[pair.Key]\
    \ = pair.Value;\n            }\n        }\n        return res;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0) {\n \
    \           return result;\n        }\n        string[] words = test.Split(' ');\n\
    \        Dictionary<string,long> counts = new Dictionary<string,long>();\n   \
    \     foreach (string word in words) {\n            if (counts.ContainsKey(word))\
    \ {\n                counts[word]++;\n            } else {\n                counts[word]\
    \ = 1;\n            }\n        }\n        long max = counts.Values.Max();\n  \
    \      foreach (KeyValuePair<string,long> kvp in counts) {\n            if (kvp.Value\
    \ == max) {\n                result[kvp.Key] = kvp.Value;\n            }\n   \
    \     }\n        return result;", "        var d = new Dictionary<string,long>();\n\
    \        foreach (var c in test.Split(' ')) {\n            if (d.ContainsKey(c))\
    \ {\n                d[c]++;\n            } else {\n                d[c] = 1;\n\
    \            }\n        }\n        return d;", "        // Your code here\n  \
    \      return new Dictionary<string,long>();", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0) {\n \
    \           return result;\n        }\n        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]\
    \ += 1;\n            } else {\n                histogram[letter] = 1;\n      \
    \      }\n        }\n        long max = histogram.Values.Max();\n        foreach\
    \ (KeyValuePair<string,long> entry in histogram) {\n            if (entry.Value\
    \ == max) {\n                result[entry.Key] = entry.Value;\n            }\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        if (test.Length == 0) {\n          \
    \  return result;\n        }\n        string[] letters = test.Split(' ');\n  \
    \      Dictionary<string,long> counts = new Dictionary<string,long>();\n     \
    \   foreach (string letter in letters) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter] += 1;\n            } else {\n            \
    \    counts[letter] = 1;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        foreach (string letter in counts.Keys) {\n            if (counts[letter]\
    \ == max) {\n                result[letter] = max;\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (histogram.ContainsKey(word)) {\n                histogram[word]++;\n\
    \            } else {\n                histogram[word] = 1;\n            }\n \
    \       }\n        return histogram;", "        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]++;\n\
    \            } else {\n                histogram[letter] = 1L;\n            }\n\
    \        }\n        long max = histogram.Values.Max();\n        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in histogram.Keys)\
    \ {\n            if (histogram[letter] == max) {\n                result[letter]\
    \ = max;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        return result;"]
stop_tokens:
- "\n    }\n"
