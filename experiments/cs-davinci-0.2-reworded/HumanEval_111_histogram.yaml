name: HumanEval_111_histogram
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string representing a space separated lowercase letters,\
  \ return a dictionary\n    // of the letter with the most repetition and containing\
  \ the corresponding count.\n    // If several letters have the same occurrence,\
  \ return all of them.\n    // Example:\n    // >>> Histogram((\"a b c\"))\n    //\
  \ (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}})\n    //\
  \ >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"a\", 2L},\
  \ {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
  a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
  b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
  \    public static Dictionary<string,long> Histogram(string test) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
  a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
  \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
  a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
  \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
  \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
  r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\"\
  )).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
  r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"g\"\
  , 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
  \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"a\"\
  , 1L}})));\n    }\n\n}\n"
completions: ["        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' ')) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter] += 1;\n            } else {\n         \
    \       histogram[letter] = 1;\n            }\n        }\n        long max = histogram.Values.Max();\n\
    \        foreach (KeyValuePair<string,long> pair in histogram) {\n           \
    \ if (pair.Value == max) {\n                result[pair.Key] = pair.Value;\n \
    \           }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        // TODO: Implement the function\
    \ here\n        return result;", "        Dictionary<string,long> histogram =\
    \ new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]\
    \ += 1;\n            } else {\n                histogram[letter] = 1;\n      \
    \      }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        string[] words = test.Split('\
    \ ');\n        foreach (string word in words) {\n            if (histogram.ContainsKey(word))\
    \ {\n                histogram[word]++;\n            } else {\n              \
    \  histogram[word] = 1;\n            }\n        }\n        return histogram;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   if (test == \"\") {\n            return result;\n        }\n        string[]\
    \ letters = test.Split(' ');\n        Dictionary<string,long> counts = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter]++;\n            } else {\n               \
    \ counts[letter] = 1;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        foreach (string letter in counts.Keys) {\n            if (counts[letter]\
    \ == max) {\n                result[letter] = max;\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        foreach (string word in words)\
    \ {\n            if (result.ContainsKey(word)) {\n                result[word]++;\n\
    \            } else {\n                result[word] = 1;\n            }\n    \
    \    }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        if (test.Length == 0) {\n            return\
    \ result;\n        }\n        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        string[] letters = test.Split(' ');\n        foreach (string letter in\
    \ letters) {\n            if (histogram.ContainsKey(letter)) {\n             \
    \   histogram[letter] += 1;\n            } else {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        long max = histogram.Values.Max();\n\
    \        foreach (KeyValuePair<string,long> entry in histogram) {\n          \
    \  if (entry.Value == max) {\n                result[entry.Key] = entry.Value;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0) {\n \
    \           return result;\n        }\n        string[] letters = test.Split('\
    \ ');\n        Dictionary<string,long> count = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (count.ContainsKey(letter))\
    \ {\n                count[letter] += 1;\n            } else {\n             \
    \   count[letter] = 1;\n            }\n        }\n        long max = count.Values.Max();\n\
    \        foreach (KeyValuePair<string,long> entry in count) {\n            if\
    \ (entry.Value == max) {\n                result[entry.Key] = entry.Value;\n \
    \           }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        Dictionary<string,long> counts\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (counts.ContainsKey(letter)) {\n                counts[letter]\
    \ += 1;\n            } else {\n                counts[letter] = 1;\n         \
    \   }\n        }\n        long max = 0;\n        foreach (KeyValuePair<string,long>\
    \ kvp in counts) {\n            if (kvp.Value > max) {\n                max =\
    \ kvp.Value;\n            }\n        }\n        foreach (KeyValuePair<string,long>\
    \ kvp in counts) {\n            if (kvp.Value == max) {\n                result[kvp.Key]\
    \ = kvp.Value;\n            }\n        }\n        return result;", "        var\
    \ dict = new Dictionary<string,long>();\n        foreach (var letter in test.Split('\
    \ ')) {\n            if (dict.ContainsKey(letter)) {\n                dict[letter]\
    \ += 1;\n            } else {\n                dict[letter] = 1;\n           \
    \ }\n        }\n        var max = dict.Values.Max();\n        var result = new\
    \ Dictionary<string,long>();\n        foreach (var entry in dict) {\n        \
    \    if (entry.Value == max) {\n                result[entry.Key] = entry.Value;\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ Dictionary<string,long>();\n        var letters = test.Split(' ');\n       \
    \ var max = 0L;\n        foreach (var letter in letters) {\n            if (result.ContainsKey(letter))\
    \ {\n                result[letter]++;\n            } else {\n               \
    \ result[letter] = 1L;\n            }\n            if (result[letter] > max) {\n\
    \                max = result[letter];\n            }\n        }\n        var\
    \ final = new Dictionary<string,long>();\n        foreach (var letter in result.Keys)\
    \ {\n            if (result[letter] == max) {\n                final[letter] =\
    \ max;\n            }\n        }\n        return final;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0) {\n \
    \           return result;\n        }\n        string[] letters = test.Split('\
    \ ');\n        Dictionary<string,long> counts = new Dictionary<string,long>();\n\
    \        foreach (string letter in letters) {\n            if (counts.ContainsKey(letter))\
    \ {\n                counts[letter] += 1;\n            } else {\n            \
    \    counts[letter] = 1;\n            }\n        }\n        long max = counts.Values.Max();\n\
    \        foreach (string letter in counts.Keys) {\n            if (counts[letter]\
    \ == max) {\n                result[letter] = max;\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' ')) {\n            if (histogram.ContainsKey(letter))\
    \ {\n                histogram[letter]++;\n            } else {\n            \
    \    histogram[letter] = 1;\n            }\n        }\n        long max = 0;\n\
    \        foreach (KeyValuePair<string,long> entry in histogram) {\n          \
    \  if (entry.Value > max) {\n                max = entry.Value;\n            }\n\
    \        }\n        foreach (KeyValuePair<string,long> entry in histogram) {\n\
    \            if (entry.Value == max) {\n                result[entry.Key] = entry.Value;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        Dictionary<string,long> counts\
    \ = new Dictionary<string,long>();\n        string[] words = test.Split(' ');\n\
    \        foreach (string word in words) {\n            if (counts.ContainsKey(word))\
    \ {\n                counts[word] += 1;\n            } else {\n              \
    \  counts[word] = 1;\n            }\n        }\n        long max = 0;\n      \
    \  foreach (KeyValuePair<string,long> pair in counts) {\n            if (pair.Value\
    \ > max) {\n                max = pair.Value;\n            }\n        }\n    \
    \    foreach (KeyValuePair<string,long> pair in counts) {\n            if (pair.Value\
    \ == max) {\n                result[pair.Key] = pair.Value;\n            }\n \
    \       }\n        return result;", "        Dictionary<string,long> histogram\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')) {\n            if (histogram.ContainsKey(letter)) {\n                histogram[letter]++;\n\
    \            } else {\n                histogram[letter] = 1L;\n            }\n\
    \        }\n        return histogram;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        string[] words = test.Split(' ');\n\
    \        Dictionary<string,long> counts = new Dictionary<string,long>();\n   \
    \     foreach (string word in words) {\n            if (counts.ContainsKey(word))\
    \ {\n                counts[word]++;\n            } else {\n                counts[word]\
    \ = 1;\n            }\n        }\n        long max = 0;\n        foreach (KeyValuePair<string,long>\
    \ entry in counts) {\n            if (entry.Value > max) {\n                max\
    \ = entry.Value;\n            }\n        }\n        foreach (KeyValuePair<string,long>\
    \ entry in counts) {\n            if (entry.Value == max) {\n                result[entry.Key]\
    \ = entry.Value;\n            }\n        }\n        return result;", "       \
    \ var dict = new Dictionary<string,long>();\n        var max = 0L;\n        foreach\
    \ (var c in test.Split(' ')) {\n            if (dict.ContainsKey(c)) {\n     \
    \           dict[c] += 1;\n            } else {\n                dict[c] = 1;\n\
    \            }\n            max = Math.Max(max, dict[c]);\n        }\n       \
    \ var result = new Dictionary<string,long>();\n        foreach (var kv in dict)\
    \ {\n            if (kv.Value == max) {\n                result[kv.Key] = kv.Value;\n\
    \            }\n        }\n        return result;", "        var dict = new Dictionary<string,long>();\n\
    \        var max = 0L;\n        foreach (var c in test.Split(' ')) {\n       \
    \     if (dict.ContainsKey(c)) {\n                dict[c] += 1;\n            }\
    \ else {\n                dict[c] = 1;\n            }\n            max = Math.Max(max,\
    \ dict[c]);\n        }\n        var result = new Dictionary<string,long>();\n\
    \        foreach (var kv in dict) {\n            if (kv.Value == max) {\n    \
    \            result[kv.Key] = kv.Value;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        string[] words = test.Split(' ');\n        long max = 0;\n        foreach\
    \ (string word in words) {\n            if (result.ContainsKey(word)) {\n    \
    \            result[word]++;\n            } else {\n                result[word]\
    \ = 1;\n            }\n            if (result[word] > max) {\n               \
    \ max = result[word];\n            }\n        }\n        Dictionary<string,long>\
    \ final = new Dictionary<string,long>();\n        foreach (string word in result.Keys)\
    \ {\n            if (result[word] == max) {\n                final[word] = result[word];\n\
    \            }\n        }\n        return final;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        if (test.Length == 0) {\n \
    \           return result;\n        }\n        string[] words = test.Split(' ');\n\
    \        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string word in words) {\n            if (histogram.ContainsKey(word))\
    \ {\n                histogram[word]++;\n            } else {\n              \
    \  histogram[word] = 1;\n            }\n        }\n        long max = histogram.Values.Max();\n\
    \        foreach (string key in histogram.Keys) {\n            if (histogram[key]\
    \ == max) {\n                result[key] = max;\n            }\n        }\n  \
    \      return result;"]
stop_tokens:
- "\n    }\n"
