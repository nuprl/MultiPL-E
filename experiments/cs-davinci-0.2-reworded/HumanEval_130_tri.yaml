name: HumanEval_130_tri
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Everyone knows Fibonacci sequence, it was studied deeply by\
  \ mathematicians in \n    // the last couple centuries. However, what people don't\
  \ know is Tribonacci sequence.\n    // Tribonacci sequence is defined by the recurrence:\n\
  \    // tri(1) = 3\n    // tri(n) = 1 + n / 2, if n is even.\n    // tri(n) =  tri(n\
  \ - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    // For example:\n    // tri(2)\
  \ = 1 + (2 / 2) = 2\n    // tri(4) = 3\n    // tri(3) = tri(2) + tri(1) + tri(4)\n\
  \    // = 2 + 3 + 3 = 8 \n    // You are given a non-negative integer number n,\
  \ you have to a return a list of the \n    // first n + 1 numbers of the Tribonacci\
  \ sequence.\n    // Examples:\n    // >>> Tri((3L))\n    // (new List<long>(new\
  \ long[]{(long)1L, (long)3L, (long)2L, (long)8L}))\n    public static List<long>\
  \ Tri(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Tri((3L)).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L}))));\n    Debug.Assert(Tri((4L)).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L}))));\n\
  \    Debug.Assert(Tri((5L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)8L, (long)3L, (long)15L}))));\n    Debug.Assert(Tri((6L)).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)3L, (long)2L, (long)8L, (long)3L, (long)15L,\
  \ (long)4L}))));\n    Debug.Assert(Tri((7L)).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L}))));\n\
  \    Debug.Assert(Tri((8L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L}))));\n\
  \    Debug.Assert(Tri((9L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L}))));\n\
  \    Debug.Assert(Tri((20L)).Equals((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)8L, (long)3L, (long)15L, (long)4L, (long)24L, (long)5L, (long)35L,\
  \ (long)6L, (long)48L, (long)7L, (long)63L, (long)8L, (long)80L, (long)9L, (long)99L,\
  \ (long)10L, (long)120L, (long)11L}))));\n    Debug.Assert(Tri((0L)).Equals((new\
  \ List<long>(new long[]{(long)1L}))));\n    Debug.Assert(Tri((1L)).Equals((new List<long>(new\
  \ long[]{(long)1L, (long)3L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        result.Add(1);\n\
    \        result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;", " \
    \       List<long> res = new List<long>();\n        res.Add(1);\n        res.Add(3);\n\
    \        res.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                res.Add(1 + i / 2);\n            } else {\n   \
    \             res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n\
    \        }\n        return res;", "        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (long i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n        \
    \        result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     result.Add(1);\n        if (n == 0) return result;\n        result.Add(3);\n\
    \        if (n == 1) return result;\n        result.Add(2);\n        if (n ==\
    \ 2) return result;\n        for (int i = 3; i <= n; i++) {\n            result.Add(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n        }\n        return result;",
  "        var result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        result.Add(1);\n        result.Add(3);\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n \
    \       return result;", "        var result = new List<long>();\n        result.Add(1);\n\
    \        result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        for (long i = 0; i <= n; i++)\
    \ {\n            result.Add(TriRec(i));\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        result.Add(1);\n      \
    \  result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n \
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n            }\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        result.Add(1);\n        result.Add(3);\n      \
    \  result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i %\
    \ 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n  \
    \              result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n  \
    \          }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        result.Add(1);\n\
    \        result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;", " \
    \       List<long> res = new List<long>();\n        res.Add(1);\n        res.Add(3);\n\
    \        res.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                res.Add(1 + i / 2);\n            } else {\n   \
    \             res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n            }\n\
    \        }\n        return res;", "        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        result.Add(1);\n\
    \        if (n == 0) {\n            return result;\n        }\n        result.Add(3);\n\
    \        if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n\
    \        if (n == 2) {\n            return result;\n        }\n        long a\
    \ = 1;\n        long b = 3;\n        long c = 2;\n        for (long i = 3; i <=\
    \ n; i++) {\n            long d = a + b + c;\n            result.Add(d);\n   \
    \         a = b;\n            b = c;\n            c = d;\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        for (int i = 0; i\
    \ <= n; i++) {\n            result.Add(tri(i));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        result.Add(1);\n       \
    \ if (n == 0) {\n            return result;\n        }\n        result.Add(3);\n\
    \        if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n\
    \        if (n == 2) {\n            return result;\n        }\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[i - 1] +\
    \ result[i - 2] + result[i + 1]);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long a = 1;\n        long\
    \ b = 3;\n        long c = 2;\n        result.Add(a);\n        result.Add(b);\n\
    \        result.Add(c);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        result.Add(1);\n        result.Add(3);\n      \
    \  result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i %\
    \ 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n  \
    \              result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n  \
    \          }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        result.Add(1);\n        if (n > 0) {\n            result.Add(3);\n  \
    \          if (n > 1) {\n                result.Add(2);\n                for (long\
    \ i = 3; i <= n; i++) {\n                    result.Add(i % 2 == 0 ? 1 + i / 2\
    \ : result[(int)i - 1] + result[(int)i - 2] + result[(int)i + 1]);\n         \
    \       }\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        result.Add(1);\n        if (n == 0) {\n\
    \            return result;\n        }\n        result.Add(3);\n        if (n\
    \ == 1) {\n            return result;\n        }\n        result.Add(2);\n   \
    \     if (n == 2) {\n            return result;\n        }\n        for (int i\
    \ = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[i - 1] +\
    \ result[i - 2] + result[i + 1]);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        result.Add(1);\n       \
    \ if (n == 0) {\n            return result;\n        }\n        result.Add(3);\n\
    \        if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n\
    \        if (n == 2) {\n            return result;\n        }\n        for (long\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        for\
    \ (long i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n               \
    \ result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n\
    \        return result;", "        var result = new List<long>();\n        for\
    \ (long i = 0; i <= n; i++) {\n            result.Add(tri(i));\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   long a = 1;\n        long b = 3;\n        long c = 2;\n        long d = 0;\n\
    \        result.Add(a);\n        result.Add(b);\n        result.Add(c);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       d = 1 + i / 2;\n            } else {\n                d = a + b + c;\n\
    \            }\n            a = b;\n            b = c;\n            c = d;\n \
    \           result.Add(d);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        result.Add(1);\n        result.Add(3);\n      \
    \  result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i %\
    \ 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n  \
    \              result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n  \
    \          }\n        }\n        return result;", "        // Your code goes here\n\
    \        return null;", "        List<long> result = new List<long>();\n     \
    \   long a = 1;\n        long b = 3;\n        long c = 2;\n        long d = 0;\n\
    \        result.Add(a);\n        result.Add(b);\n        result.Add(c);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       d = 1 + i / 2;\n            } else {\n                d = a + b + c;\n\
    \            }\n            a = b;\n            b = c;\n            c = d;\n \
    \           result.Add(d);\n        }\n        return result;", "        List<long>\
    \ list = new List<long>();\n        list.Add(1);\n        list.Add(3);\n     \
    \   list.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i %\
    \ 2 == 0) {\n                list.Add(1 + i / 2);\n            } else {\n    \
    \            list.Add(list[i - 1] + list[i - 2] + list[i + 1]);\n            }\n\
    \        }\n        return list;", "        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        // Your code goes here.\n        return null;", "       \
    \ long[] tri = new long[n + 1];\n        tri[0] = 1;\n        tri[1] = 3;\n  \
    \      for (int i = 2; i <= n; i++) {\n            if (i % 2 == 0) {\n       \
    \         tri[i] = 1 + i / 2;\n            } else {\n                tri[i] =\
    \ tri[i - 1] + tri[i - 2] + tri[i + 1];\n            }\n        }\n        return\
    \ new List<long>(tri);", "        List<long> result = new List<long>();\n    \
    \    result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        for\
    \ (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[i - 1] +\
    \ result[i - 2] + result[i + 1]);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        result.Add(1);\n        result.Add(3);\n      \
    \  result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i %\
    \ 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n  \
    \              result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n  \
    \          }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        result.Add(1);\n        if (n == 0) {\n         \
    \   return result;\n        }\n        result.Add(3);\n        if (n == 1) {\n\
    \            return result;\n        }\n        result.Add(2);\n        if (n\
    \ == 2) {\n            return result;\n        }\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;", " \
    \       List<long> list = new List<long>();\n        list.Add(1);\n        list.Add(3);\n\
    \        list.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                list.Add(1 + i / 2);\n            } else {\n\
    \                list.Add(list[i - 1] + list[i - 2] + list[i + 1]);\n        \
    \    }\n        }\n        return list;", "        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        result.Add(1);\n\
    \        result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        for (long i = 0; i <= n; i++) {\n            result.Add(Tri(i));\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        result.Add(1);\n\
    \        result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;", " \
    \       List<long> res = new List<long>();\n        res.Add(1);\n        if (n\
    \ == 0) {\n            return res;\n        }\n        res.Add(3);\n        if\
    \ (n == 1) {\n            return res;\n        }\n        res.Add(2);\n      \
    \  if (n == 2) {\n            return res;\n        }\n        for (int i = 3;\
    \ i <= n; i++) {\n            if (i % 2 == 0) {\n                res.Add(1 + i\
    \ / 2);\n            } else {\n                res.Add(res[i - 1] + res[i - 2]\
    \ + res[i + 1]);\n            }\n        }\n        return res;", "        var\
    \ result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (long i = 3; i <= n; i++) {\n           \
    \ if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else\
    \ {\n                result.Add(result[(int)i - 1] + result[(int)i - 2] + result[(int)i\
    \ + 1]);\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        result.Add(1);\n        if (n == 0) {\n\
    \            return result;\n        }\n        result.Add(3);\n        if (n\
    \ == 1) {\n            return result;\n        }\n        result.Add(2);\n   \
    \     if (n == 2) {\n            return result;\n        }\n        for (int i\
    \ = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[i - 1] +\
    \ result[i - 2] + result[i + 1]);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        result.Add(1);\n       \
    \ result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n \
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n            }\n        }\n        return result;", "    \
    \    List<long> list = new List<long>();\n        list.Add(1);\n        list.Add(3);\n\
    \        list.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                list.Add(1 + i / 2);\n            } else {\n\
    \                list.Add(list[i - 1] + list[i - 2] + list[i + 1]);\n        \
    \    }\n        }\n        return list;", "        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        result.Add(1);\n\
    \        result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        for (int i = 0; i <= n; i++) {\n\
    \            result.Add(Tri(i));\n        }\n        return result;", "      \
    \  List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        result.Add(1);\n        result.Add(3);\n      \
    \  result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i %\
    \ 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n  \
    \              result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n  \
    \          }\n        }\n        return result;", "        // Your code goes here.\n\
    \        return null;", "        var list = new List<long>();\n        list.Add(1);\n\
    \        list.Add(3);\n        list.Add(2);\n        for (int i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                list.Add(1 + i / 2);\n   \
    \         } else {\n                list.Add(list[i - 1] + list[i - 2] + list[i\
    \ + 1]);\n            }\n        }\n        return list;", "        List<long>\
    \ result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        List<long> res =\
    \ new List<long>();\n        res.Add(1);\n        res.Add(3);\n        res.Add(2);\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           res.Add(1 + i / 2);\n            } else {\n                res.Add(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n            }\n        }\n        return res;",
  "        List<long> result = new List<long>();\n        long a = 1;\n        long\
    \ b = 3;\n        long c = 2;\n        result.Add(a);\n        result.Add(b);\n\
    \        result.Add(c);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        List<long> res =\
    \ new List<long>();\n        res.Add(1);\n        res.Add(3);\n        res.Add(2);\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           res.Add(1 + i / 2);\n            } else {\n                res.Add(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n            }\n        }\n        return res;",
  "        List<long> result = new List<long>();\n        for (long i = 0; i <= n;\
    \ i++) {\n            if (i == 0) {\n                result.Add(1);\n        \
    \    } else if (i == 1) {\n                result.Add(3);\n            } else\
    \ if (i == 2) {\n                result.Add(2);\n            } else if (i % 2\
    \ == 0) {\n                result.Add(1 + i / 2);\n            } else {\n    \
    \            result.Add(result[(int)i - 1] + result[(int)i - 2] + result[(int)i\
    \ + 1]);\n            }\n        }\n        return result;", "        var result\
    \ = new List<long>();\n        result.Add(1);\n        result.Add(3);\n      \
    \  result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i %\
    \ 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n  \
    \              result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n  \
    \          }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        List<long> l = new List<long>();\n        l.Add(1);\n   \
    \     l.Add(3);\n        l.Add(2);\n        for (int i = 3; i <= n; i++) {\n \
    \           if (i % 2 == 0) {\n                l.Add(1 + i / 2);\n           \
    \ } else {\n                l.Add(l[i - 1] + l[i - 2] + l[i + 1]);\n         \
    \   }\n        }\n        return l;", "        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        result.Add(1);\n\
    \        result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <=\
    \ n; i++) {\n            result.Add(result[i - 1] + result[i - 2] + result[i -\
    \ 3]);\n        }\n        return result;", "        // Your code goes here.\n\
    \        return null;", "        List<long> result = new List<long>();\n     \
    \   result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        for\
    \ (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[i - 1] +\
    \ result[i - 2] + result[i + 1]);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        for (long i = 0; i <= n; i++) {\n\
    \            if (i == 0) {\n                result.Add(1);\n            } else\
    \ if (i == 1) {\n                result.Add(3);\n            } else if (i == 2)\
    \ {\n                result.Add(2);\n            } else if (i % 2 == 0) {\n  \
    \              result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     result.Add(1);\n        result.Add(3);\n        result.Add(2);\n       \
    \ for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n            \
    \    result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        result.Add(1);\n\
    \        result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        result.Add(1);\n      \
    \  result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n \
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n            }\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        result.Add(1);\n        result.Add(3);\n      \
    \  result.Add(2);\n        for (long i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[(int)i - 1] + result[(int)i - 2] + result[(int)i\
    \ + 1]);\n            }\n        }\n        return result;", "        var result\
    \ = new List<long>();\n        result.Add(1);\n        result.Add(3);\n      \
    \  result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i %\
    \ 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n  \
    \              result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n  \
    \          }\n        }\n        return result;", "        List<long> res = new\
    \ List<long>();\n        res.Add(1);\n        res.Add(3);\n        res.Add(2);\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           res.Add(1 + i / 2);\n            } else {\n                res.Add(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n            }\n        }\n        return res;",
  "        var result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        result.Add(1);\n        result.Add(3);\n      \
    \  result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i %\
    \ 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n  \
    \              result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n  \
    \          }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        result.Add(1);\n\
    \        result.Add(3);\n        result.Add(2);\n        for (long i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[(int)i - 1] + result[(int)i\
    \ - 2] + result[(int)i + 1]);\n            }\n        }\n        return result;",
  "        var result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        for (int i = 0; i <= n; i++) {\n            result.Add(TriRec(i));\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        result.Add(1);\n\
    \        result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        long a = 1;\n        long b =\
    \ 3;\n        long c = 2;\n        result.Add(a);\n        result.Add(b);\n  \
    \      result.Add(c);\n        for (long i = 0; i < n - 2; i++) {\n          \
    \  long d = a + b + c;\n            result.Add(d);\n            a = b;\n     \
    \       b = c;\n            c = d;\n        }\n        return result;", "    \
    \    var result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (long i = 3; i <= n; i++) {\n           \
    \ if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else\
    \ {\n                result.Add(result[(int)i - 1] + result[(int)i - 2] + result[(int)i\
    \ + 1]);\n            }\n        }\n        return result;", "        var list\
    \ = new List<long>();\n        list.Add(1);\n        list.Add(3);\n        list.Add(2);\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           list.Add(1 + i / 2);\n            } else {\n                list.Add(list[i\
    \ - 1] + list[i - 2] + list[i + 1]);\n            }\n        }\n        return\
    \ list;", "        var result = new List<long>();\n        for (long i = 0; i\
    \ <= n; i++) {\n            result.Add(TriRec(i));\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        result.Add(1);\n\
    \        result.Add(3);\n        result.Add(2);\n        long a = 1;\n       \
    \ long b = 3;\n        long c = 2;\n        for (int i = 3; i <= n; i++) {\n \
    \           long d = 0;\n            if (i % 2 == 0) {\n                d = 1\
    \ + i / 2;\n            } else {\n                d = a + b + c;\n           \
    \ }\n            result.Add(d);\n            a = b;\n            b = c;\n    \
    \        c = d;\n        }\n        return result;", "        // Your code goes\
    \ here\n        return new List<long>();", "        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        if (n == 0) {\n            return result;\n \
    \       }\n        result.Add(3);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(2);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        result.Add(1);\n        result.Add(3);\n      \
    \  result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i %\
    \ 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n  \
    \              result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n  \
    \          }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        for (long i = 0; i <= n; i++) {\n            result.Add(tri(i));\n  \
    \      }\n        return result;", "        var result = new List<long>();\n \
    \       result.Add(1);\n        if (n == 0) {\n            return result;\n  \
    \      }\n        result.Add(3);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(2);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        result.Add(1);\n        if (n == 0) {\n       \
    \     return result;\n        }\n        result.Add(3);\n        if (n == 1) {\n\
    \            return result;\n        }\n        result.Add(2);\n        if (n\
    \ == 2) {\n            return result;\n        }\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        for (long i = 0; i <= n; i++)\
    \ {\n            result.Add(Tri(i));\n        }\n        return result;", "  \
    \      List<long> result = new List<long>();\n        result.Add(1);\n       \
    \ result.Add(3);\n        result.Add(2);\n        for (long i = 4; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n \
    \           } else {\n                result.Add(result[(int)i - 1] + result[(int)i\
    \ - 2] + result[(int)i + 1]);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        result.Add(1);\n       \
    \ result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n \
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n            }\n        }\n        return result;", '        return
    new List<long>();', "        List<long> result = new List<long>();\n        result.Add(1);\n\
    \        result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        for (int i = 0; i <= n; i++) {\n\
    \            result.Add(tri(i));\n        }\n        return result;", '        return
    new List<long>();', "        var result = new List<long>();\n        for (long\
    \ i = 0; i <= n; i++) {\n            result.Add(Tri(i));\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        for (long i = 0;\
    \ i <= n; i++) {\n            result.Add(tri(i));\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        result.Add(1);\n       \
    \ if (n == 0) {\n            return result;\n        }\n        result.Add(3);\n\
    \        if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n\
    \        if (n == 2) {\n            return result;\n        }\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[i - 1] +\
    \ result[i - 2] + result[i + 1]);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        result.Add(1);\n       \
    \ result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n \
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n            }\n        }\n        return result;", "    \
    \    // Your code goes here\n        List<long> result = new List<long>();\n \
    \       result.Add(1);\n        result.Add(3);\n        result.Add(2);\n     \
    \   for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n          \
    \      result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        result.Add(1);\n\
    \        result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        for (int i = 0; i <= n; i++) {\n\
    \            result.Add(Tri(i));\n        }\n        return result;", "      \
    \  // Your code here\n        return null;", "        List<long> res = new List<long>();\n\
    \        res.Add(1);\n        res.Add(3);\n        res.Add(2);\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.Add(1\
    \ + i / 2);\n            } else {\n                res.Add(res[i - 1] + res[i\
    \ - 2] + res[i + 1]);\n            }\n        }\n        return res;", "     \
    \   List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        for (long i = 0; i <= n; i++) {\n            result.Add(TriRec(i));\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        for (long i = 1; i <= n + 1; i++) {\n            result.Add(tri(i));\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        if (n == 0) {\n            return result;\n \
    \       }\n        result.Add(3);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(2);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        for (int i = 3; i <= n; i++) {\n            if (i\
    \ % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        // Your code here.\n\
    \        return null;", "        // Your code goes here.\n        return null;",
  "        var res = new List<long>();\n        for (int i = 0; i <= n; i++) {\n \
    \           res.Add(tri(i));\n        }\n        return res;", "        List<long>\
    \ result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        result.Add(1);\n        result.Add(3);\n      \
    \  result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i %\
    \ 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n  \
    \              result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n  \
    \          }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        result.Add(1);\n\
    \        result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        for (int i = 0; i <= n; i++) {\n\
    \            result.Add(Tri(i));\n        }\n        return result;", "      \
    \  List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        result.Add(1);\n        if (n == 0) {\n            return\
    \ result;\n        }\n        result.Add(3);\n        if (n == 1) {\n        \
    \    return result;\n        }\n        result.Add(2);\n        if (n == 2) {\n\
    \            return result;\n        }\n        for (int i = 3; i <= n; i++) {\n\
    \            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n     \
    \       } else {\n                result.Add(result[i - 1] + result[i - 2] + result[i\
    \ + 1]);\n            }\n        }\n        return result;", "        List<long>\
    \ res = new List<long>();\n        res.Add(1);\n        res.Add(3);\n        res.Add(2);\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           res.Add(1 + i / 2);\n            } else {\n                res.Add(res[i\
    \ - 1] + res[i - 2] + res[i + 1]);\n            }\n        }\n        return res;",
  "        List<long> result = new List<long>();\n        result.Add(1);\n       \
    \ result.Add(3);\n        result.Add(2);\n        for (long i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n \
    \           } else {\n                result.Add(result[(int)i - 1] + result[(int)i\
    \ - 2] + result[(int)i + 1]);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        result.Add(1);\n       \
    \ result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n \
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n            }\n        }\n        return result;", "    \
    \    var res = new List<long>();\n        res.Add(1);\n        if (n == 0) {\n\
    \            return res;\n        }\n        res.Add(3);\n        if (n == 1)\
    \ {\n            return res;\n        }\n        res.Add(2);\n        if (n ==\
    \ 2) {\n            return res;\n        }\n        for (long i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n    \
    \        } else {\n                res.Add(res[(int)i - 1] + res[(int)i - 2] +\
    \ res[(int)i + 1]);\n            }\n        }\n        return res;", "       \
    \ List<long> result = new List<long>();\n        result.Add(1);\n        if (n\
    \ == 0) {\n            return result;\n        }\n        result.Add(3);\n   \
    \     if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n\
    \        if (n == 2) {\n            return result;\n        }\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[i - 1] +\
    \ result[i - 2] + result[i + 1]);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        result.Add(1);\n       \
    \ result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n \
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n            }\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (long i = 3; i <= n; i++) {\n           \
    \ if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else\
    \ {\n                result.Add(result[(int)i - 1] + result[(int)i - 2] + result[(int)i\
    \ + 1]);\n            }\n        }\n        return result;", "        var result\
    \ = new List<long>();\n        result.Add(1);\n        result.Add(3);\n      \
    \  result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i %\
    \ 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n  \
    \              result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n  \
    \          }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        result.Add(1);\n\
    \        result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (long i = 3; i <= n; i++) {\n           \
    \ if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else\
    \ {\n                result.Add(result[(int)i - 1] + result[(int)i - 2] + result[(int)i\
    \ + 1]);\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        for (long i = 0;\
    \ i <= n; i++) {\n            result.Add(TriRec(i));\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        result.Add(1);\n\
    \        result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        for (long i = 0; i <= n; i++) {\n            result.Add(tri(i));\n\
    \        }\n        return result;", "        List<long> res = new List<long>();\n\
    \        res.Add(1);\n        res.Add(3);\n        res.Add(2);\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.Add(1\
    \ + i / 2);\n            } else {\n                res.Add(res[i - 1] + res[i\
    \ - 2] + res[i + 1]);\n            }\n        }\n        return res;", "     \
    \   List<long> result = new List<long>();\n        result.Add(1);\n        if\
    \ (n == 0) {\n            return result;\n        }\n        result.Add(3);\n\
    \        if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n\
    \        if (n == 2) {\n            return result;\n        }\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[i - 1] +\
    \ result[i - 2] + result[i + 1]);\n            }\n        }\n        return result;",
  '        return null;', "        List<long> result = new List<long>();\n       \
    \ result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        for\
    \ (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[i - 1] +\
    \ result[i - 2] + result[i + 1]);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        result.Add(1);\n       \
    \ result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n \
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n            }\n        }\n        return result;", "    \
    \    var result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        // Your code goes here.\n        return null;", "       \
    \ List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        result.Add(1);\n        result.Add(3);\n      \
    \  result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i %\
    \ 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n  \
    \              result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n  \
    \          }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        // Your code goes here.\n        return null;", "       \
    \ List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        result.Add(1);\n        result.Add(3);\n      \
    \  result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i %\
    \ 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n  \
    \              result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n  \
    \          }\n        }\n        return result;", "        // Your code goes here\n\
    \        return null;", "        List<long> result = new List<long>();\n     \
    \   result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        for\
    \ (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[i - 1] +\
    \ result[i - 2] + result[i + 1]);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        result.Add(1);\n       \
    \ if (n == 0) {\n            return result;\n        }\n        result.Add(3);\n\
    \        if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n\
    \        if (n == 2) {\n            return result;\n        }\n        for (long\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[(int)i -\
    \ 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        for\
    \ (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[i - 1] +\
    \ result[i - 2] + result[i + 1]);\n            }\n        }\n        return result;",
  "        List<long> list = new List<long>();\n        list.Add(1);\n        list.Add(3);\n\
    \        list.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                list.Add(1 + i / 2);\n            } else {\n\
    \                list.Add(list[i - 1] + list[i - 2] + list[i + 1]);\n        \
    \    }\n        }\n        return list;", "        List<long> res = new List<long>();\n\
    \        res.Add(1);\n        res.Add(3);\n        res.Add(2);\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                res.Add(1\
    \ + i / 2);\n            } else {\n                res.Add(res[i - 1] + res[i\
    \ - 2] + res[i + 1]);\n            }\n        }\n        return res;", "     \
    \   // Your code goes here\n        return null;", "        List<long> result\
    \ = new List<long>();\n        if (n == 0) {\n            return result;\n   \
    \     }\n        result.Add(1);\n        if (n == 1) {\n            return result;\n\
    \        }\n        result.Add(3);\n        if (n == 2) {\n            return\
    \ result;\n        }\n        result.Add(2);\n        if (n == 3) {\n        \
    \    return result;\n        }\n        for (long i = 4; i <= n; i++) {\n    \
    \        if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n         \
    \   } else {\n                result.Add(result[(int)(i - 1)] + result[(int)(i\
    \ - 2)] + result[(int)(i + 1)]);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        result.Add(1);\n       \
    \ result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n \
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n            }\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        List<long> res = new List<long>();\n        res.Add(1);\n\
    \        res.Add(3);\n        res.Add(2);\n        for (int i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n    \
    \        } else {\n                res.Add(res[i - 1] + res[i - 2] + res[i + 1]);\n\
    \            }\n        }\n        return res;", "        List<long> result =\
    \ new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        result.Add(1);\n\
    \        if (n == 0) {\n            return result;\n        }\n        result.Add(3);\n\
    \        if (n == 1) {\n            return result;\n        }\n        result.Add(2);\n\
    \        if (n == 2) {\n            return result;\n        }\n        for (int\
    \ i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[i - 1] +\
    \ result[i - 2] + result[i + 1]);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        result.Add(1);\n       \
    \ result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n \
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n            }\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        result.Add(1);\n        if (n == 0) {\n       \
    \     return result;\n        }\n        result.Add(3);\n        if (n == 1) {\n\
    \            return result;\n        }\n        result.Add(2);\n        if (n\
    \ == 2) {\n            return result;\n        }\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        result.Add(1);\n      \
    \  result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n \
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n            }\n        }\n        return result;", "    \
    \    var result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        result.Add(1);\n        result.Add(3);\n      \
    \  result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i %\
    \ 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n  \
    \              result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n  \
    \          }\n        }\n        return result;", "        // Your code goes here.\n\
    \        return null;", "        List<long> result = new List<long>();\n     \
    \   result.Add(1);\n        result.Add(3);\n        result.Add(2);\n        for\
    \ (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[i - 1] +\
    \ result[i - 2] + result[i + 1]);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        result.Add(1);\n       \
    \ result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <= n; i++)\
    \ {\n            if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n \
    \           } else {\n                result.Add(result[i - 1] + result[i - 2]\
    \ + result[i + 1]);\n            }\n        }\n        return result;", "    \
    \    List<long> res = new List<long>();\n        res.Add(1);\n        if (n ==\
    \ 0) return res;\n        res.Add(3);\n        if (n == 1) return res;\n     \
    \   res.Add(2);\n        if (n == 2) return res;\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                res.Add(1 + i / 2);\n\
    \            } else {\n                res.Add(res[i - 1] + res[i - 2] + res[i\
    \ + 1]);\n            }\n        }\n        return res;", "        List<long>\
    \ result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        long a = 1;\n        long b = 3;\n        long c = 2;\n\
    \        long d = 0;\n        result.Add(a);\n        result.Add(b);\n       \
    \ result.Add(c);\n        for (int i = 3; i <= n; i++) {\n            if (i %\
    \ 2 == 0) {\n                d = 1 + i / 2;\n            } else {\n          \
    \      d = a + b + c;\n            }\n            a = b;\n            b = c;\n\
    \            c = d;\n            result.Add(d);\n        }\n        return result;",
  "        var result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        var result = new\
    \ List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        result.Add(1);\n\
    \        result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        result.Add(1);\n        result.Add(3);\n      \
    \  result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            result.Add(i\
    \ % 2 == 0 ? 1 + i / 2 : result[i - 1] + result[i - 2] + result[i + 1]);\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (long i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n        \
    \        result.Add(1 + i / 2);\n            } else {\n                result.Add(result[(int)i\
    \ - 1] + result[(int)i - 2] + result[(int)i + 1]);\n            }\n        }\n\
    \        return result;", "        var result = new List<long>();\n        result.Add(1);\n\
    \        result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        if (n == 0) {\n       \
    \     return result;\n        }\n        result.Add(1);\n        if (n == 1) {\n\
    \            return result;\n        }\n        result.Add(3);\n        if (n\
    \ == 2) {\n            return result;\n        }\n        result.Add(2);\n   \
    \     if (n == 3) {\n            return result;\n        }\n        for (int i\
    \ = 4; i <= n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1\
    \ + i / 2);\n            } else {\n                result.Add(result[i - 1] +\
    \ result[i - 2] + result[i - 4]);\n            }\n        }\n        return result;",
  "        // Your code goes here.\n        return null;", "        List<long> result\
    \ = new List<long>();\n        result.Add(1);\n        result.Add(3);\n      \
    \  result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i %\
    \ 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n  \
    \              result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n  \
    \          }\n        }\n        return result;", "        var result = new List<long>();\n\
    \        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n    \
    \    for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n         \
    \       result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        result.Add(1);\n\
    \        result.Add(3);\n        result.Add(2);\n        for (int i = 3; i <=\
    \ n; i++) {\n            if (i % 2 == 0) {\n                result.Add(1 + i /\
    \ 2);\n            } else {\n                result.Add(result[i - 1] + result[i\
    \ - 2] + result[i + 1]);\n            }\n        }\n        return result;", " \
    \       var result = new List<long>();\n        for (int i = 0; i <= n; i++) {\n\
    \            result.Add(tri(i));\n        }\n        return result;", "      \
    \  var result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (long i = 3; i <= n; i++) {\n           \
    \ if (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else\
    \ {\n                result.Add(result[(int)i - 1] + result[(int)i - 2] + result[(int)i\
    \ + 1]);\n            }\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        result.Add(1);\n        result.Add(3);\n\
    \        result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if\
    \ (i % 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n\
    \                result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        result.Add(1);\n        result.Add(3);\n      \
    \  result.Add(2);\n        for (int i = 3; i <= n; i++) {\n            if (i %\
    \ 2 == 0) {\n                result.Add(1 + i / 2);\n            } else {\n  \
    \              result.Add(result[i - 1] + result[i - 2] + result[i + 1]);\n  \
    \          }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        result.Add(1);\n        result.Add(3);\n        result.Add(2);\n\
    \        for (int i = 3; i <= n; i++) {\n            if (i % 2 == 0) {\n     \
    \           result.Add(1 + i / 2);\n            } else {\n                result.Add(result[i\
    \ - 1] + result[i - 2] + result[i + 1]);\n            }\n        }\n        return\
    \ result;"]
stop_tokens:
- "\n    }\n"
