name: HumanEval_119_match_parens
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list of two strings, both strings consist of\
  \ open\n    // parentheses '(' or close parentheses ')' only.\n    // Your job is\
  \ to check if it is possible to concatenate the two strings in\n    // some order,\
  \ that the resulting string will be good.\n    // A string S is considered to be\
  \ good if and only if all parentheses in S\n    // are balanced. For example: the\
  \ string '(())()' is good, while the string\n    // '())' is not.\n    // Return\
  \ 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n   \
  \ // Examples:\n    // >>> MatchParens((new List<string>(new string[]{(string)\"\
  ()(\", (string)\")\"})))\n    // (\"Yes\")\n    // >>> MatchParens((new List<string>(new\
  \ string[]{(string)\")\", (string)\")\"})))\n    // (\"No\")\n    public static\
  \ string MatchParens(List<string> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MatchParens((new\
  \ List<string>(new string[]{(string)\"()(\", (string)\")\"}))).Equals((\"Yes\")));\n\
  \    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")\", (string)\"\
  )\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"\
  (()(())\", (string)\"())())\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new\
  \ List<string>(new string[]{(string)\")())\", (string)\"(()()(\"}))).Equals((\"\
  Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"\
  (())))\", (string)\"(()())((\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new\
  \ List<string>(new string[]{(string)\"()\", (string)\"())\"}))).Equals((\"No\")));\n\
  \    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"(()(\", (string)\"\
  ()))()\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new\
  \ string[]{(string)\"((((\", (string)\"((())\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new\
  \ List<string>(new string[]{(string)\")(()\", (string)\"(()(\"}))).Equals((\"No\"\
  )));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")(\"\
  , (string)\")(\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new\
  \ string[]{(string)\"(\", (string)\")\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new\
  \ List<string>(new string[]{(string)\")\", (string)\"(\"}))).Equals((\"Yes\")));\n\
  \    }\n\n}\n"
completions: ["        int open = 0;\n        int close = 0;\n        foreach (string\
    \ s in lst) {\n            foreach (char c in s) {\n                if (c == '(')\
    \ {\n                    open++;\n                } else {\n                 \
    \   close++;\n                }\n            }\n        }\n        if (open ==\
    \ close) {\n            return \"Yes\";\n        } else {\n            return\
    \ \"No\";\n        }", "        int balance = 0;\n        foreach (string s in\
    \ lst) {\n            foreach (char c in s) {\n                if (c == '(') {\n\
    \                    balance++;\n                } else {\n                  \
    \  balance--;\n                }\n                if (balance < 0) {\n       \
    \             return \"No\";\n                }\n            }\n        }\n  \
    \      return balance == 0 ? \"Yes\" : \"No\";", "        int n = lst[0].Length;\n\
    \        int m = lst[1].Length;\n        int[] a = new int[n];\n        int[]\
    \ b = new int[m];\n        int c = 0;\n        for (int i = 0; i < n; i++) {\n\
    \            if (lst[0][i] == '(') {\n                c++;\n            } else\
    \ {\n                c--;\n            }\n            a[i] = c;\n        }\n \
    \       c = 0;\n        for (int i = 0; i < m; i++) {\n            if (lst[1][i]\
    \ == '(') {\n                c++;\n            } else {\n                c--;\n\
    \            }\n            b[i] = c;\n        }\n        if (a[n - 1] != 0 ||\
    \ b[m - 1] != 0) {\n            return \"No\";\n        }\n        for (int i\
    \ = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n            \
    \    if (a[i] + b[j] == 0) {\n                    return \"Yes\";\n          \
    \      }\n            }\n        }\n        return \"No\";", "        int open\
    \ = 0;\n        int close = 0;\n        foreach (string s in lst) {\n        \
    \    foreach (char c in s) {\n                if (c == '(') {\n              \
    \      open++;\n                } else {\n                    close++;\n     \
    \           }\n            }\n        }\n        if (open == close) {\n      \
    \      return \"Yes\";\n        } else {\n            return \"No\";\n       \
    \ }", "        int left = 0;\n        int right = 0;\n        foreach (string\
    \ s in lst) {\n            foreach (char c in s) {\n                if (c == '(')\
    \ {\n                    left++;\n                } else {\n                 \
    \   right++;\n                }\n            }\n        }\n        if (left ==\
    \ right) {\n            return \"Yes\";\n        } else {\n            return\
    \ \"No\";\n        }", "        int count = 0;\n        foreach (string s in lst)\
    \ {\n            foreach (char c in s) {\n                if (c == '(') {\n  \
    \                  count++;\n                } else {\n                    count--;\n\
    \                }\n                if (count < 0) {\n                    return\
    \ \"No\";\n                }\n            }\n        }\n        return count ==\
    \ 0 ? \"Yes\" : \"No\";", "        int open = 0;\n        int close = 0;\n   \
    \     foreach (string s in lst) {\n            foreach (char c in s) {\n     \
    \           if (c == '(') {\n                    open++;\n                } else\
    \ {\n                    close++;\n                }\n            }\n        }\n\
    \        if (open == close) {\n            return \"Yes\";\n        } else {\n\
    \            return \"No\";\n        }", '        return "";', "        int open\
    \ = 0;\n        int close = 0;\n        foreach (string s in lst) {\n        \
    \    foreach (char c in s) {\n                if (c == '(') {\n              \
    \      open++;\n                } else {\n                    close++;\n     \
    \           }\n            }\n        }\n        if (open == close) {\n      \
    \      return \"Yes\";\n        } else {\n            return \"No\";\n       \
    \ }", "        int open = 0;\n        int close = 0;\n        foreach (string\
    \ s in lst) {\n            foreach (char c in s) {\n                if (c == '(')\
    \ {\n                    open++;\n                } else {\n                 \
    \   close++;\n                }\n            }\n        }\n        if (open ==\
    \ close) {\n            return \"Yes\";\n        } else {\n            return\
    \ \"No\";\n        }", "        int open = 0;\n        int close = 0;\n      \
    \  foreach (string s in lst) {\n            foreach (char c in s) {\n        \
    \        if (c == '(') {\n                    open++;\n                } else\
    \ {\n                    close++;\n                }\n            }\n        }\n\
    \        if (open == close) {\n            return \"Yes\";\n        } else {\n\
    \            return \"No\";\n        }", "        int cnt = 0;\n        foreach\
    \ (string s in lst) {\n            foreach (char c in s) {\n                if\
    \ (c == '(') {\n                    cnt++;\n                } else {\n       \
    \             cnt--;\n                }\n                if (cnt < 0) {\n    \
    \                return \"No\";\n                }\n            }\n        }\n\
    \        return cnt == 0 ? \"Yes\" : \"No\";", "        int open = 0;\n      \
    \  int close = 0;\n        foreach (string s in lst) {\n            foreach (char\
    \ c in s) {\n                if (c == '(') {\n                    open++;\n  \
    \              } else {\n                    close++;\n                }\n   \
    \         }\n        }\n        if (open == close) {\n            return \"Yes\"\
    ;\n        } else {\n            return \"No\";\n        }", "        int open\
    \ = 0;\n        int close = 0;\n        foreach (string s in lst) {\n        \
    \    foreach (char c in s) {\n                if (c == '(') {\n              \
    \      open++;\n                } else {\n                    close++;\n     \
    \           }\n            }\n        }\n        if (open == close) {\n      \
    \      return \"Yes\";\n        } else {\n            return \"No\";\n       \
    \ }", "        int open = 0;\n        int close = 0;\n        foreach (string\
    \ s in lst) {\n            foreach (char c in s) {\n                if (c == '(')\
    \ {\n                    open++;\n                } else {\n                 \
    \   close++;\n                }\n            }\n        }\n        if (open ==\
    \ close) {\n            return \"Yes\";\n        } else {\n            return\
    \ \"No\";\n        }", "        int open = 0;\n        int close = 0;\n      \
    \  foreach (string s in lst) {\n            foreach (char c in s) {\n        \
    \        if (c == '(') {\n                    open++;\n                } else\
    \ {\n                    close++;\n                }\n            }\n        }\n\
    \        if (open == close) {\n            return \"Yes\";\n        } else {\n\
    \            return \"No\";\n        }", "        int count = 0;\n        foreach\
    \ (string s in lst) {\n            foreach (char c in s) {\n                if\
    \ (c == '(') {\n                    count++;\n                } else {\n     \
    \               count--;\n                }\n                if (count < 0) {\n\
    \                    return \"No\";\n                }\n            }\n      \
    \  }\n        return count == 0 ? \"Yes\" : \"No\";", "        int open = 0;\n\
    \        int close = 0;\n        foreach (string s in lst) {\n            foreach\
    \ (char c in s) {\n                if (c == '(') {\n                    open++;\n\
    \                } else {\n                    close++;\n                }\n \
    \           }\n        }\n        if (open == close) {\n            return \"\
    Yes\";\n        } else {\n            return \"No\";\n        }", "        string\
    \ s1 = lst[0];\n        string s2 = lst[1];\n        int n1 = s1.Length;\n   \
    \     int n2 = s2.Length;\n        int c1 = 0;\n        int c2 = 0;\n        for\
    \ (int i = 0; i < n1; i++) {\n            if (s1[i] == '(') {\n              \
    \  c1++;\n            } else {\n                c1--;\n            }\n       \
    \ }\n        for (int i = 0; i < n2; i++) {\n            if (s2[i] == '(') {\n\
    \                c2++;\n            } else {\n                c2--;\n        \
    \    }\n        }\n        if (c1 == 0 && c2 == 0) {\n            return \"Yes\"\
    ;\n        }\n        if (c1 < 0 || c2 < 0) {\n            return \"No\";\n  \
    \      }\n        if (c1 == c2) {\n            return \"Yes\";\n        }\n  \
    \      return \"No\";", "        int open = 0;\n        int close = 0;\n     \
    \   foreach (string s in lst) {\n            foreach (char c in s) {\n       \
    \         if (c == '(') {\n                    open++;\n                } else\
    \ {\n                    close++;\n                }\n            }\n        }\n\
    \        if (open == close) {\n            return \"Yes\";\n        } else {\n\
    \            return \"No\";\n        }"]
stop_tokens:
- "\n    }\n"
