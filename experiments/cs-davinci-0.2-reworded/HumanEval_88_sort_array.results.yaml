language: cs
name: HumanEval_88_sort_array
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            array.Sort();\n            array.Reverse();\n        } else
    {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0c090ee0e63474fa4bbcb4b1a3a1623>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0c090ee0e63474fa4bbcb4b1a3a1623>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            array.Sort((a, b) => (int)(b - a));\n        } else {\n            array.Sort((a,
    b) => (int)(a - b));\n        }\n        return array;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23789e6515d14ab89d6f74c0572e8f4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23789e6515d14ab89d6f74c0572e8f4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Your code
    goes here.\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n        } else {\n
    \           array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <818719caec2d42bb9193d9e5e88c497f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <818719caec2d42bb9193d9e5e88c497f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return null;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00010] in <3e5db96b02884b5eb72f5f62034f8e23>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00010] in <3e5db96b02884b5eb72f5f62034f8e23>:0
    \n"
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Your code
    goes here.\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        long first = array[0];\n        long last
    = array[array.Count - 1];\n        if ((first + last) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n            return array;\n        }\n        array.Sort();\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00007] in <3fd8e7f3d4f74264a9f8922eb0eff317>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3fd8e7f3d4f74264a9f8922eb0eff317>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00007] in <3fd8e7f3d4f74264a9f8922eb0eff317>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3fd8e7f3d4f74264a9f8922eb0eff317>:0
    \n"
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            array.Sort((a, b) => -1 * a.CompareTo(b));\n        } else
    {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25576a8dc70e4beaae826d36799f1438>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25576a8dc70e4beaae826d36799f1438>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        var sum =
    array[0] + array[array.Count - 1];\n        if (sum % 2 == 0) {\n            array.Sort((a,
    b) => (int)(b - a));\n        } else {\n            array.Sort((a, b) => (int)(a
    - b));\n        }\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00001] in <47469c32f35f4c659a00ed777ebe85f8>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <47469c32f35f4c659a00ed777ebe85f8>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00001] in <47469c32f35f4c659a00ed777ebe85f8>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <47469c32f35f4c659a00ed777ebe85f8>:0
    \n"
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            array.Sort();\n            array.Reverse();\n        } else
    {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0c090ee0e63474fa4bbcb4b1a3a1623>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0c090ee0e63474fa4bbcb4b1a3a1623>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        List<long> left = new List<long>();\n        List<long>
    right = new List<long>();\n        for (int i = 0; i < array.Count; i++) {\n            if
    (i < array.Count / 2) {\n                left.Add(array[i]);\n            } else
    {\n                right.Add(array[i]);\n            }\n        }\n        left
    = SortArray(left);\n        right = SortArray(right);\n        return Merge(left,
    right);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmz91ouww.cs(48,16): error CS0103: The name ''Merge'' does not exist in
    the current context

    '
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        List<long> sorted = new List<long>();\n        sorted.Add(array[0]);\n
    \       sorted.Add(array[1]);\n        for (int i = 2; i < array.Count; i++) {\n
    \           if ((array[0] + array[1]) % 2 == 0) {\n                sorted.Insert(0,
    array[i]);\n            } else {\n                sorted.Add(array[i]);\n            }\n
    \       }\n        return sorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <148b21c027ea4467bbd1e3751d0352e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <148b21c027ea4467bbd1e3751d0352e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return new
    List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <36f91a4d959549a7b981645c49603339>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <36f91a4d959549a7b981645c49603339>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Your code
    goes here.\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        List<long> result = new List<long>();\n        List<long>
    even = new List<long>();\n        List<long> odd = new List<long>();\n        for
    (int i = 0; i < array.Count; i++) {\n            if (array[i] % 2 == 0) {\n                even.Add(array[i]);\n
    \           } else {\n                odd.Add(array[i]);\n            }\n        }\n
    \       even.Sort();\n        odd.Sort();\n        odd.Reverse();\n        if
    ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            for (int i = 0;
    i < odd.Count; i++) {\n                result.Add(odd[i]);\n            }\n            for
    (int i = 0; i < even.Count; i++) {\n                result.Add(even[i]);\n            }\n
    \       } else {\n            for (int i = 0; i < even.Count; i++) {\n                result.Add(even[i]);\n
    \           }\n            for (int i = 0; i < odd.Count; i++) {\n                result.Add(odd[i]);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d20d32454c543a7ba0734fc6f49ace6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d20d32454c543a7ba0734fc6f49ace6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Your code
    goes here.\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        long first = array[0];\n        long last =
    array[array.Count - 1];\n        if ((first + last) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5c0764c098d3460e9c53b9a025fddb16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5c0764c098d3460e9c53b9a025fddb16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n        } else {\n
    \           array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <818719caec2d42bb9193d9e5e88c497f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <818719caec2d42bb9193d9e5e88c497f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        long first = array[0];\n        long last =
    array[array.Count - 1];\n        if ((first + last) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5c0764c098d3460e9c53b9a025fddb16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5c0764c098d3460e9c53b9a025fddb16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return new
    List<long>();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <36f91a4d959549a7b981645c49603339>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <36f91a4d959549a7b981645c49603339>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return new List<long>();\n        }\n        if (array.Count
    == 1) {\n            return array;\n        }\n        if (array.Count == 2) {\n
    \           if (array[0] > array[1]) {\n                long temp = array[0];\n
    \               array[0] = array[1];\n                array[1] = temp;\n            }\n
    \           return array;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <161b0c58b16f4fb1ae2ec1e2a5c06b6e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <161b0c58b16f4fb1ae2ec1e2a5c06b6e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            array.Sort();\n            array.Reverse();\n        } else
    {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0c090ee0e63474fa4bbcb4b1a3a1623>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0c090ee0e63474fa4bbcb4b1a3a1623>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n        } else {\n
    \           array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <818719caec2d42bb9193d9e5e88c497f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <818719caec2d42bb9193d9e5e88c497f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Your code
    goes here.\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        List<long> result = new List<long>();\n        List<long>
    even = new List<long>();\n        List<long> odd = new List<long>();\n        for
    (int i = 0; i < array.Count; i++) {\n            if (array[i] % 2 == 0) {\n                even.Add(array[i]);\n
    \           } else {\n                odd.Add(array[i]);\n            }\n        }\n
    \       even.Sort();\n        odd.Sort();\n        odd.Reverse();\n        if
    ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            for (int i = 0;
    i < odd.Count; i++) {\n                result.Add(odd[i]);\n            }\n            for
    (int i = 0; i < even.Count; i++) {\n                result.Add(even[i]);\n            }\n
    \       } else {\n            for (int i = 0; i < even.Count; i++) {\n                result.Add(even[i]);\n
    \           }\n            for (int i = 0; i < odd.Count; i++) {\n                result.Add(odd[i]);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d20d32454c543a7ba0734fc6f49ace6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d20d32454c543a7ba0734fc6f49ace6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            array.Sort();\n            array.Reverse();\n        } else
    {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0c090ee0e63474fa4bbcb4b1a3a1623>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0c090ee0e63474fa4bbcb4b1a3a1623>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Your code
    here\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05ab1af0b04d4dab9ae280fdeece443e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <05ab1af0b04d4dab9ae280fdeece443e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    <= 1) {\n            return array;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort((a, b) => (int)(b - a));\n        }
    else {\n            array.Sort((a, b) => (int)(a - b));\n        }\n        return
    array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85a2b6a1fcab4b2bb509b3fac0aca386>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85a2b6a1fcab4b2bb509b3fac0aca386>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Your code
    goes here.\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        var result
    = new List<long>();\n        var first = array[0];\n        var last = array[array.Count
    - 1];\n        if ((first + last) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \       } else {\n            array.Sort();\n        }\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00007] in <69362621cff5495f92fc26ab1990423c>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <69362621cff5495f92fc26ab1990423c>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00007] in <69362621cff5495f92fc26ab1990423c>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <69362621cff5495f92fc26ab1990423c>:0
    \n"
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    (array[0] > array[1]) {\n                long temp = array[0];\n                array[0]
    = array[1];\n                array[1] = temp;\n            }\n            return
    array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n
    \           array.Sort();\n            array.Reverse();\n        } else {\n            array.Sort();\n
    \       }\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b4e556d5a334eb8b61e61116ce3c642>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b4e556d5a334eb8b61e61116ce3c642>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            array.Sort();\n            array.Reverse();\n        } else
    {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0c090ee0e63474fa4bbcb4b1a3a1623>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0c090ee0e63474fa4bbcb4b1a3a1623>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            List<long> left = SortArray(array.GetRange(0, array.Count
    / 2));\n            List<long> right = SortArray(array.GetRange(array.Count /
    2, array.Count - array.Count / 2));\n            List<long> result = new List<long>();\n
    \           int leftIndex = 0;\n            int rightIndex = 0;\n            while
    (leftIndex < left.Count && rightIndex < right.Count) {\n                if (left[leftIndex]
    > right[rightIndex]) {\n                    result.Add(left[leftIndex]);\n                    leftIndex++;\n
    \               } else {\n                    result.Add(right[rightIndex]);\n
    \                   rightIndex++;\n                }\n            }\n            while
    (leftIndex < left.Count) {\n                result.Add(left[leftIndex]);\n                leftIndex++;\n
    \           }\n            while (rightIndex < right.Count) {\n                result.Add(right[rightIndex]);\n
    \               rightIndex++;\n            }\n            return result;\n        }
    else {\n            List<long> left = SortArray(array.GetRange(0, array.Count
    / 2));\n            List<long> right = SortArray(array.GetRange(array.Count /
    2, array.Count - array.Count / 2));\n            List<long> result = new List<long>();\n
    \           int leftIndex = 0;\n            int rightIndex = 0;\n            while
    (leftIndex < left.Count && rightIndex < right.Count) {\n                if (left[leftIndex]
    < right[rightIndex]) {\n                    result.Add(left[leftIndex]);\n                    leftIndex++;\n
    \               } else {\n                    result.Add(\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuszp86r1.cs(72,32): error CS1026: ) expected

    /tmp/tmpuszp86r1.cs(72,32): error CS1002: ; expected

    /tmp/tmpuszp86r1.cs(74,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpuszp86r1.cs(84,2): error CS1513: } expected

    '
  timestamp: 1659800391
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    sorted = new List<long>();\n        if (array.Count == 0) {\n            return
    sorted;\n        }\n        if (array.Count == 1) {\n            sorted.Add(array[0]);\n
    \           return sorted;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            sorted = array.OrderByDescending(x => x).ToList();\n
    \       } else {\n            sorted = array.OrderBy(x => x).ToList();\n        }\n
    \       return sorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2a246daf9f749fb8f2337a87b3c7f1d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2a246daf9f749fb8f2337a87b3c7f1d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            array.Sort();\n            array.Reverse();\n        } else
    {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0c090ee0e63474fa4bbcb4b1a3a1623>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0c090ee0e63474fa4bbcb4b1a3a1623>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                if (array[0] > array[1]) {\n
    \                   long temp = array[0];\n                    array[0] = array[1];\n
    \                   array[1] = temp;\n                }\n            } else {\n
    \               if (array[0] < array[1]) {\n                    long temp = array[0];\n
    \                   array[0] = array[1];\n                    array[1] = temp;\n
    \               }\n            }\n            return array;\n        }\n        if
    ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            array.Sort((a, b)
    => -1 * a.CompareTo(b));\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbad935910a143f3ac4850d1157ed89e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dbad935910a143f3ac4850d1157ed89e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            List<long> result = new List<long>();\n            for (int
    i = array.Count - 1; i >= 0; i--) {\n                result.Add(array[i]);\n            }\n
    \           return result;\n        } else {\n            return array;\n        }\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <663ac111089941728df453b1cf7be39e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <663ac111089941728df453b1cf7be39e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        List<long> result = new List<long>();\n        List<long>
    odd = new List<long>();\n        List<long> even = new List<long>();\n        for
    (int i = 0; i < array.Count; i++) {\n            if (array[i] % 2 == 0) {\n                even.Add(array[i]);\n
    \           } else {\n                odd.Add(array[i]);\n            }\n        }\n
    \       even.Sort();\n        odd.Sort();\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            even.Reverse();\n        } else {\n            odd.Reverse();\n
    \       }\n        result.AddRange(odd);\n        result.AddRange(even);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0fe9af90e5ab4dbe881c59d47af2c67c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0fe9af90e5ab4dbe881c59d47af2c67c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        long first = array[0];\n        long last =
    array[array.Count - 1];\n        if ((first + last) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5c0764c098d3460e9c53b9a025fddb16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5c0764c098d3460e9c53b9a025fddb16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                var temp = array[0];\n                array[0]
    = array[1];\n                array[1] = temp;\n            }\n            return
    array;\n        }\n        var result = new List<long>();\n        var left =
    new List<long>();\n        var right = new List<long>();\n        var mid = array.Count
    / 2;\n        for (int i = 0; i < mid; i++) {\n            left.Add(array[i]);\n
    \       }\n        for (int i = mid; i < array.Count; i++) {\n            right.Add(array[i]);\n
    \       }\n        left = SortArray(left);\n        right = SortArray(right);\n
    \       var i1 = 0;\n        var i2 = 0;\n        while (i1 < left.Count && i2
    < right.Count) {\n            if ((left[i1] + right[i2]) % 2 == 0) {\n                result.Add(right[i2]);\n
    \               i2++;\n            } else {\n                result.Add(left[i1]);\n
    \               i1++;\n            }\n        }\n        while (i1 < left.Count)
    {\n            result.Add(left[i1]);\n            i1++;\n        }\n        while
    (i2 < right.Count) {\n            result.Add(right[i2]);\n            i2++;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b42a62e40f794bb1960786c95c716ac3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b42a62e40f794bb1960786c95c716ac3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        var result
    = new List<long>();\n        var isOdd = (array[0] + array[array.Count - 1]) %
    2 == 1;\n        if (isOdd) {\n            result = array.OrderBy(x => x).ToList();\n
    \       } else {\n            result = array.OrderByDescending(x => x).ToList();\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00007] in <f70292fb62e34479be1fe500a89be298>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f70292fb62e34479be1fe500a89be298>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00007] in <f70292fb62e34479be1fe500a89be298>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <f70292fb62e34479be1fe500a89be298>:0
    \n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            array.Sort();\n            array.Reverse();\n        } else
    {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0c090ee0e63474fa4bbcb4b1a3a1623>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0c090ee0e63474fa4bbcb4b1a3a1623>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return array;\n            }\n
    \           else {\n                return new List<long>(new long[]{array[1],
    array[0]});\n            }\n        }\n        List<long> result = new List<long>();\n
    \       if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n            result.Add(array[array.Count
    - 1]);\n            array.RemoveAt(array.Count - 1);\n            result.AddRange(SortArray(array));\n
    \       }\n        else {\n            result.Add(array[0]);\n            array.RemoveAt(0);\n
    \           result.AddRange(SortArray(array));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a7ab5efe1af54cc9843c8632d5ee7cb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a7ab5efe1af54cc9843c8632d5ee7cb6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    sorted = new List<long>();\n        sorted.AddRange(array);\n        sorted.Sort();\n
    \       if ((sorted[0] + sorted[sorted.Count - 1]) % 2 == 0) {\n            sorted.Reverse();\n
    \       }\n        return sorted;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00016] in <88d55cfd46fb4520be8b7e2bac89322a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <88d55cfd46fb4520be8b7e2bac89322a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00016] in <88d55cfd46fb4520be8b7e2bac89322a>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <88d55cfd46fb4520be8b7e2bac89322a>:0
    \n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n            return
    array;\n        }\n        array.Sort();\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f682ffb0e9ae423f9957ddadbb00ce44>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f682ffb0e9ae423f9957ddadbb00ce44>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            array.Sort();\n            array.Reverse();\n        } else
    {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0c090ee0e63474fa4bbcb4b1a3a1623>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0c090ee0e63474fa4bbcb4b1a3a1623>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            return new List<long>(new long[]{array[array.Count - 1]}.Concat(SortArray(array.GetRange(1,
    array.Count - 2))).Concat(new long[]{array[0]}));\n        } else {\n            return
    new List<long>(new long[]{array[0]}.Concat(SortArray(array.GetRange(1, array.Count
    - 2))).Concat(new long[]{array[array.Count - 1]}));\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afe850363d91451aa727838dbed925a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afe850363d91451aa727838dbed925a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00010] in <a9b62cb9dac94afebbff0fa40e871a9a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00010] in <a9b62cb9dac94afebbff0fa40e871a9a>:0
    \n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            array.Sort();\n            array.Reverse();\n        } else
    {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0c090ee0e63474fa4bbcb4b1a3a1623>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0c090ee0e63474fa4bbcb4b1a3a1623>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Your code
    goes here.\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return array;\n            }\n
    \           else {\n                return new List<long>(new long[]{(long)array[1],
    (long)array[0]});\n            }\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n            return
    array;\n        }\n        else {\n            array.Sort();\n            return
    array;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b548375876644eb887509e7ee2d906a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5b548375876644eb887509e7ee2d906a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Your code
    goes here.\n        return null;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00010] in <881155066f1b4700907b75a59900d7e6>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00010] in <881155066f1b4700907b75a59900d7e6>:0
    \n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        List<long> result = new List<long>();\n        List<long>
    even = new List<long>();\n        List<long> odd = new List<long>();\n        for
    (int i = 0; i < array.Count; i++) {\n            if (array[i] % 2 == 0) {\n                even.Add(array[i]);\n
    \           } else {\n                odd.Add(array[i]);\n            }\n        }\n
    \       even.Sort();\n        odd.Sort();\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            even.Reverse();\n            odd.Reverse();\n        }\n
    \       result.AddRange(even);\n        result.AddRange(odd);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cb359c30566343c6abb143a3b754b931>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cb359c30566343c6abb143a3b754b931>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        List<long> result = new List<long>();\n        List<long>
    even = new List<long>();\n        List<long> odd = new List<long>();\n        for
    (int i = 0; i < array.Count; i++) {\n            if (array[i] % 2 == 0) {\n                even.Add(array[i]);\n
    \           } else {\n                odd.Add(array[i]);\n            }\n        }\n
    \       even.Sort();\n        odd.Sort();\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            even.Reverse();\n            odd.Reverse();\n        }\n
    \       for (int i = 0; i < even.Count; i++) {\n            result.Add(even[i]);\n
    \       }\n        for (int i = 0; i < odd.Count; i++) {\n            result.Add(odd[i]);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e168c4df97fb4616af846393ee12573a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e168c4df97fb4616af846393ee12573a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if (array.Count == 2) {\n            if
    (array[0] > array[1]) {\n                result.Add(array[1]);\n                result.Add(array[0]);\n
    \           } else {\n                result.Add(array[0]);\n                result.Add(array[1]);\n
    \           }\n            return result;\n        }\n        if ((array[0] +
    array[array.Count - 1]) % 2 == 0) {\n            result.Add(array[array.Count
    - 1]);\n            array.RemoveAt(array.Count - 1);\n            result.AddRange(SortArray(array));\n
    \       } else {\n            result.Add(array[0]);\n            array.RemoveAt(0);\n
    \           result.AddRange(SortArray(array));\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d68fa2106f204c39a819afaa2cb3ce54>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d68fa2106f204c39a819afaa2cb3ce54>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    sorted = new List<long>();\n        if (array.Count == 0) {\n            return
    sorted;\n        }\n        if (array.Count == 1) {\n            sorted.Add(array[0]);\n
    \           return sorted;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            sorted = array.OrderByDescending(x => x).ToList();\n
    \       } else {\n            sorted = array.OrderBy(x => x).ToList();\n        }\n
    \       return sorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2a246daf9f749fb8f2337a87b3c7f1d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2a246daf9f749fb8f2337a87b3c7f1d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    (array[0] > array[1]) {\n                long temp = array[0];\n                array[0]
    = array[1];\n                array[1] = temp;\n            }\n            return
    array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n
    \           array.Sort((a, b) => (int)(b - a));\n        } else {\n            array.Sort((a,
    b) => (int)(a - b));\n        }\n        return array;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e21544e5e7f545e38c139887d7971871>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e21544e5e7f545e38c139887d7971871>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        long first = array[0];\n        long
    last = array[array.Count - 1];\n        if ((first + last) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53ae499315bd40c99de27bcca9a7b5da>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53ae499315bd40c99de27bcca9a7b5da>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // your code
    here\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <de2a97de84a544918d50df2999aa6190>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <de2a97de84a544918d50df2999aa6190>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        long first = array[0];\n        long
    last = array[array.Count - 1];\n        if ((first + last) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53ae499315bd40c99de27bcca9a7b5da>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <53ae499315bd40c99de27bcca9a7b5da>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    (array[0] > array[1]) {\n                long temp = array[0];\n                array[0]
    = array[1];\n                array[1] = temp;\n            }\n            return
    array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n
    \           array.Sort((a, b) => (int)(b - a));\n        } else {\n            array.Sort((a,
    b) => (int)(a - b));\n        }\n        return array;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e21544e5e7f545e38c139887d7971871>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e21544e5e7f545e38c139887d7971871>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Your code
    goes here.\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    (array[0] > array[1]) {\n                long temp = array[0];\n                array[0]
    = array[1];\n                array[1] = temp;\n            }\n            return
    array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n
    \           return array.OrderByDescending(x => x).ToList();\n        }\n        return
    array.OrderBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0083266e00a486abaf7d1e8874f692f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a0083266e00a486abaf7d1e8874f692f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Your code
    goes here.\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    sorted = new List<long>();\n        if (array.Count == 0) {\n            return
    sorted;\n        }\n        if (array.Count == 1) {\n            sorted.Add(array[0]);\n
    \           return sorted;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            sorted = array.OrderByDescending(x => x).ToList();\n
    \       } else {\n            sorted = array.OrderBy(x => x).ToList();\n        }\n
    \       return sorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2a246daf9f749fb8f2337a87b3c7f1d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b2a246daf9f749fb8f2337a87b3c7f1d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    (array[0] > array[1]) {\n                long temp = array[0];\n                array[0]
    = array[1];\n                array[1] = temp;\n            }\n            return
    array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n
    \           array.Sort();\n            array.Reverse();\n        } else {\n            array.Sort();\n
    \       }\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b4e556d5a334eb8b61e61116ce3c642>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b4e556d5a334eb8b61e61116ce3c642>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    (array[0] > array[1]) {\n                long temp = array[0];\n                array[0]
    = array[1];\n                array[1] = temp;\n            }\n            return
    array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n
    \           array.Sort((a, b) => (int)(b - a));\n        } else {\n            array.Sort((a,
    b) => (int)(a - b));\n        }\n        return array;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e21544e5e7f545e38c139887d7971871>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e21544e5e7f545e38c139887d7971871>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if (array.Count == 2) {\n            if
    (array[0] > array[1]) {\n                result.Add(array[1]);\n                result.Add(array[0]);\n
    \           } else {\n                result.Add(array[0]);\n                result.Add(array[1]);\n
    \           }\n            return result;\n        }\n        if ((array[0] +
    array[array.Count - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n
    \           return array;\n        } else {\n            array.Sort();\n            return
    array;\n        }\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3f37cd29069e4ec3898384a73a40d568>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3f37cd29069e4ec3898384a73a40d568>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        long first = array[0];\n        long last
    = array[array.Count - 1];\n        if ((first + last) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n            return array;\n        }\n        array.Sort();\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00007] in <3fd8e7f3d4f74264a9f8922eb0eff317>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3fd8e7f3d4f74264a9f8922eb0eff317>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x00007] in <3fd8e7f3d4f74264a9f8922eb0eff317>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <3fd8e7f3d4f74264a9f8922eb0eff317>:0
    \n"
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    (array[0] > array[1]) {\n                long temp = array[0];\n                array[0]
    = array[1];\n                array[1] = temp;\n            }\n            return
    array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n
    \           array.Sort();\n            array.Reverse();\n        } else {\n            array.Sort();\n
    \       }\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b4e556d5a334eb8b61e61116ce3c642>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b4e556d5a334eb8b61e61116ce3c642>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Your code
    goes here.\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    (array[0] > array[1]) {\n                long temp = array[0];\n                array[0]
    = array[1];\n                array[1] = temp;\n            }\n            return
    array;\n        }\n        long sum = array[0] + array[array.Count - 1];\n        if
    (sum % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d94ae829d12b489eb874f13092dbe0b1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d94ae829d12b489eb874f13092dbe0b1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Your code
    goes here.\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    (array[0] > array[1]) {\n                long temp = array[0];\n                array[0]
    = array[1];\n                array[1] = temp;\n            }\n            return
    array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n
    \           array.Sort((a, b) => b.CompareTo(a));\n        } else {\n            array.Sort((a,
    b) => a.CompareTo(b));\n        }\n        return array;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7aaeb006a5548258db4661c7fb6d36b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7aaeb006a5548258db4661c7fb6d36b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    (array[0] > array[1]) {\n                long temp = array[0];\n                array[0]
    = array[1];\n                array[1] = temp;\n            }\n            return
    array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n
    \           array.Sort();\n            array.Reverse();\n        } else {\n            array.Sort();\n
    \       }\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b4e556d5a334eb8b61e61116ce3c642>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b4e556d5a334eb8b61e61116ce3c642>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    (array[0] > array[1]) {\n                long temp = array[0];\n                array[0]
    = array[1];\n                array[1] = temp;\n            }\n            return
    array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n
    \           array.Sort();\n            array.Reverse();\n        } else {\n            array.Sort();\n
    \       }\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b4e556d5a334eb8b61e61116ce3c642>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b4e556d5a334eb8b61e61116ce3c642>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    (array[0] > array[1]) {\n                long temp = array[0];\n                array[0]
    = array[1];\n                array[1] = temp;\n            }\n            return
    array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n
    \           array.Sort();\n            array.Reverse();\n        } else {\n            array.Sort();\n
    \       }\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b4e556d5a334eb8b61e61116ce3c642>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b4e556d5a334eb8b61e61116ce3c642>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        long first = array[0];\n        long
    last = array[array.Count - 1];\n        if ((first + last) % 2 == 0) {\n            array.Sort();\n
    \           array.Reverse();\n        } else {\n            array.Sort();\n        }\n
    \       return array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c21b099142e347d6b879d8730c43e458>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c21b099142e347d6b879d8730c43e458>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Your code
    goes here.\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    (array[0] > array[1]) {\n                var temp = array[0];\n                array[0]
    = array[1];\n                array[1] = temp;\n            }\n            return
    array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n
    \           array.Sort();\n            array.Reverse();\n        } else {\n            array.Sort();\n
    \       }\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4127f5631f114694bc74789e30e5c7e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4127f5631f114694bc74789e30e5c7e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    (array[0] > array[1]) {\n                long temp = array[0];\n                array[0]
    = array[1];\n                array[1] = temp;\n            }\n            return
    array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n
    \           array.Sort();\n            array.Reverse();\n        } else {\n            array.Sort();\n
    \       }\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b4e556d5a334eb8b61e61116ce3c642>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1b4e556d5a334eb8b61e61116ce3c642>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    (array[0] > array[1]) {\n                long temp = array[0];\n                array[0]
    = array[1];\n                array[1] = temp;\n            }\n            return
    array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n
    \           array.Sort((a, b) => b.CompareTo(a));\n        } else {\n            array.Sort((a,
    b) => a.CompareTo(b));\n        }\n        return array;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7aaeb006a5548258db4661c7fb6d36b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d7aaeb006a5548258db4661c7fb6d36b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    (array[0] > array[1]) {\n                long temp = array[0];\n                array[0]
    = array[1];\n                array[1] = temp;\n            }\n            return
    array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n
    \           array.Sort((x, y) => y.CompareTo(x));\n        } else {\n            array.Sort((x,
    y) => x.CompareTo(y));\n        }\n        return array;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5351b8b3e904a0b9bdfa3ae34c3adc8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5351b8b3e904a0b9bdfa3ae34c3adc8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00010] in <a9b62cb9dac94afebbff0fa40e871a9a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00010] in <a9b62cb9dac94afebbff0fa40e871a9a>:0
    \n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Your code
    goes here.\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    (array[0] > array[1]) {\n                long temp = array[0];\n                array[0]
    = array[1];\n                array[1] = temp;\n            }\n            return
    array;\n        }\n        if ((array[0] + array[array.Count - 1]) % 2 == 0) {\n
    \           array.Sort((a, b) => (int)(b - a));\n        } else {\n            array.Sort((a,
    b) => (int)(a - b));\n        }\n        return array;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e21544e5e7f545e38c139887d7971871>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e21544e5e7f545e38c139887d7971871>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        List<long> sorted = new List<long>();\n        sorted.Add(array[0]);\n
    \       sorted.Add(array[1]);\n        for (int i = 2; i < array.Count; i++) {\n
    \           long value = array[i];\n            int index = 0;\n            while
    (index < sorted.Count) {\n                if ((value + sorted[index]) % 2 == 0)
    {\n                    index++;\n                } else {\n                    break;\n
    \               }\n            }\n            sorted.Insert(index, value);\n        }\n
    \       return sorted;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5e8f9b31808040d598dd323c3c1ee8c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5e8f9b31808040d598dd323c3c1ee8c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800394
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            array.Reverse();\n        }\n        return array;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9c6e4b39fb74b718a697f0d72987e67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9c6e4b39fb74b718a697f0d72987e67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800394
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        List<long> result = new List<long>();\n        List<long>
    even = new List<long>();\n        List<long> odd = new List<long>();\n        for
    (int i = 0; i < array.Count; i++) {\n            if (array[i] % 2 == 0) {\n                even.Add(array[i]);\n
    \           } else {\n                odd.Add(array[i]);\n            }\n        }\n
    \       even.Sort();\n        odd.Sort();\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            even.Reverse();\n            odd.Reverse();\n        }\n
    \       for (int i = 0; i < even.Count; i++) {\n            result.Add(even[i]);\n
    \       }\n        for (int i = 0; i < odd.Count; i++) {\n            result.Add(odd[i]);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e168c4df97fb4616af846393ee12573a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e168c4df97fb4616af846393ee12573a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            array.Reverse();\n        }\n        return array;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9c6e4b39fb74b718a697f0d72987e67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9c6e4b39fb74b718a697f0d72987e67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800394
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        var result
    = new List<long>();\n        var length = array.Count;\n        var first = array[0];\n
    \       var last = array[length - 1];\n        var sum = first + last;\n        if
    (sum % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x0000e] in <c087960af3514a5f926b138bbe3584c5>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <c087960af3514a5f926b138bbe3584c5>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index
    was out of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] array) [0x0000e] in <c087960af3514a5f926b138bbe3584c5>:0
    \n  at Problem.Main (System.String[] args) [0x00006] in <c087960af3514a5f926b138bbe3584c5>:0
    \n"
  stdout: ''
  timestamp: 1659800394
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00010] in <a9b62cb9dac94afebbff0fa40e871a9a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00010] in <a9b62cb9dac94afebbff0fa40e871a9a>:0
    \n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        return array;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d8189f32b1b04e94b29c81f2bf1f61e8>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00010] in <a9b62cb9dac94afebbff0fa40e871a9a>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00010] in <a9b62cb9dac94afebbff0fa40e871a9a>:0
    \n"
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            return new List<long>(new long[]{array[array.Count - 1]}.Concat(SortArray(array.GetRange(1,
    array.Count - 2))).Concat(new long[]{array[0]}));\n        } else {\n            return
    new List<long>(new long[]{array[0]}.Concat(SortArray(array.GetRange(1, array.Count
    - 2))).Concat(new long[]{array[array.Count - 1]}));\n        }\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afe850363d91451aa727838dbed925a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afe850363d91451aa727838dbed925a4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Your code
    goes here.\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        List<long> result = new List<long>();\n        List<long>
    even = new List<long>();\n        List<long> odd = new List<long>();\n        for
    (int i = 0; i < array.Count; i++) {\n            if (array[i] % 2 == 0) {\n                even.Add(array[i]);\n
    \           } else {\n                odd.Add(array[i]);\n            }\n        }\n
    \       even.Sort();\n        odd.Sort();\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            even.Reverse();\n            odd.Reverse();\n        }\n
    \       for (int i = 0; i < odd.Count; i++) {\n            result.Add(odd[i]);\n
    \       }\n        for (int i = 0; i < even.Count; i++) {\n            result.Add(even[i]);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08393be8c4554acbbdc29a072ab208f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <08393be8c4554acbbdc29a072ab208f7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800394
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            array.Reverse();\n        }\n        return array;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9c6e4b39fb74b718a697f0d72987e67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f9c6e4b39fb74b718a697f0d72987e67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800394
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            array.Sort();\n            array.Reverse();\n        } else
    {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0c090ee0e63474fa4bbcb4b1a3a1623>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b0c090ee0e63474fa4bbcb4b1a3a1623>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Your code
    goes here.\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <afb1840c38654a85b9647689bc3c17cd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // Write your
    code here\n        return array;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fc94749e749e42c8b32d4771e7e1cdb3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort((a, b) => b.CompareTo(a));\n        }
    else {\n            array.Sort((a, b) => a.CompareTo(b));\n        }\n        return
    array;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)5L}))).Equals((new List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea3cee8f43594e618c5c94bff65c1767>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ea3cee8f43594e618c5c94bff65c1767>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800394
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        List<long>
    result = new List<long>();\n        if (array.Count == 0) {\n            return
    result;\n        }\n        if (array.Count == 1) {\n            result.Add(array[0]);\n
    \           return result;\n        }\n        if ((array[0] + array[array.Count
    - 1]) % 2 == 0) {\n            array.Sort();\n            array.Reverse();\n        }
    else {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fed0808f295a4557a3783caceba00934>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        // your code
    here\n        return array;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <de2a97de84a544918d50df2999aa6190>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <de2a97de84a544918d50df2999aa6190>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800393
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            array.Sort((a, b) => -1 * a.CompareTo(b));\n        } else
    {\n            array.Sort();\n        }\n        return array;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25576a8dc70e4beaae826d36799f1438>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25576a8dc70e4beaae826d36799f1438>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            array.Sort((a, b) => (int)(b - a));\n        } else {\n            array.Sort((a,
    b) => (int)(a - b));\n        }\n        return array;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23789e6515d14ab89d6f74c0572e8f4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23789e6515d14ab89d6f74c0572e8f4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800392
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given a list of non-negative integers, return a cocs of the
    given list after sorting,\n    // you will sort the given list in ascending order
    if the sum( first index value, last index value) is odd,\n    // or sort it in
    descending order if the sum( first index value, last index value) is even.\n    //
    Note:\n    // * don't change the given list.\n    // Examples:\n    // >>> SortArray((new
    List<long>()))\n    // (new List<long>())\n    // >>> SortArray((new List<long>(new
    long[]{(long)5L})))\n    // (new List<long>(new long[]{(long)5L}))\n    // >>>
    SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L,
    (long)5L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new long[]{(long)2L,
    (long)4L, (long)3L, (long)0L, (long)1L, (long)5L, (long)6L})))\n    // (new List<long>(new
    long[]{(long)6L, (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))\n
    \   public static List<long> SortArray(List<long> array) {\n        if (array.Count
    == 0) {\n            return array;\n        }\n        if (array.Count == 1) {\n
    \           return array;\n        }\n        if (array.Count == 2) {\n            if
    ((array[0] + array[1]) % 2 == 0) {\n                return new List<long>(new
    long[]{array[1], array[0]});\n            } else {\n                return array;\n
    \           }\n        }\n        if ((array[0] + array[array.Count - 1]) % 2
    == 0) {\n            return SortArray(array.GetRange(1, array.Count - 2)).Concat(new
    List<long>(new long[]{array[array.Count - 1], array[0]})).ToList();\n        }
    else {\n            return new List<long>(new long[]{array[0]}).Concat(SortArray(array.GetRange(1,
    array.Count - 1))).ToList();\n        }\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)5L}))).Equals((new
    List<long>(new long[]{(long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)3L, (long)0L, (long)1L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)3L,
    (long)0L, (long)1L, (long)5L, (long)6L}))).Equals((new List<long>(new long[]{(long)6L,
    (long)5L, (long)4L, (long)3L, (long)2L, (long)1L, (long)0L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)1L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)15L,
    (long)42L, (long)87L, (long)32L, (long)11L, (long)0L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)11L, (long)15L, (long)32L, (long)42L, (long)87L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)21L, (long)14L, (long)23L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)23L, (long)21L, (long)14L,
    (long)11L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32e0f005c510404bb99d1a996590a0c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <32e0f005c510404bb99d1a996590a0c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659800394
