name: HumanEval_140_fix_spaces
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string text, replace all spaces in it with underscores,\
  \ \n    // and if a string has more than 2 consecutive spaces, \n    // then replace\
  \ all consecutive spaces with - \n    // >>> FixSpaces((\" Example\"))\n    // (\"\
  Example\")\n    // >>> FixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n   \
  \ // >>> FixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> FixSpaces((\"\
  \ Example 3\"))\n    // (\"_Example-3\")\n    public static string FixSpaces(string\
  \ text) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FixSpaces((\"\
  Example\")).Equals((\"Example\")));\n    Debug.Assert(FixSpaces((\"Mudasir Hanif\
  \ \")).Equals((\"Mudasir_Hanif_\")));\n    Debug.Assert(FixSpaces((\"Yellow Yellow\
  \  Dirty  Fellow\")).Equals((\"Yellow_Yellow__Dirty__Fellow\")));\n    Debug.Assert(FixSpaces((\"\
  Exa   mple\")).Equals((\"Exa-mple\")));\n    Debug.Assert(FixSpaces((\"   Exa 1\
  \ 2 2 mple\")).Equals((\"-Exa_1_2_2_mple\")));\n    }\n\n}\n"
completions: ['        return text.Replace(" ", "_").Replace("__", "_").Replace("___",
    "-");', "        // your code here\n        return \"\";", "        // TODO: Implement\
    \ this function\n        return \"\";", "        string result = \"\";\n     \
    \   int count = 0;\n        for (int i = 0; i < text.Length; i++) {\n        \
    \    if (text[i] == ' ') {\n                count++;\n                if (count\
    \ > 2) {\n                    result += '-';\n                } else {\n     \
    \               result += '_';\n                }\n            } else {\n    \
    \            count = 0;\n                result += text[i];\n            }\n \
    \       }\n        return result;", "        // TODO: Implement this function\n\
    \        return \"\";", "        // TODO: Implement this function.\n        return\
    \ \"\";", "        // TODO: Implement this function\n        return \"\";", " \
    \       // TODO: Implement this function\n        return \"\";", "        string\
    \ result = \"\";\n        int count = 0;\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            if (text[i] == ' ') {\n                count++;\n      \
    \          if (count == 1) {\n                    result += '_';\n           \
    \     }\n                else if (count == 2) {\n                    result +=\
    \ '_';\n                }\n                else if (count > 2) {\n           \
    \         result += '-';\n                }\n            }\n            else {\n\
    \                count = 0;\n                result += text[i];\n            }\n\
    \        }\n        return result;", "        // TODO: Implement this method\n\
    \        return \"\";", "        string result = \"\";\n        int count = 0;\n\
    \        for (int i = 0; i < text.Length; i++) {\n            if (text[i] == '\
    \ ') {\n                count++;\n                if (count == 1) {\n        \
    \            result += \"_\";\n                }\n                else if (count\
    \ == 2) {\n                    result += \"_\";\n                }\n         \
    \       else if (count > 2) {\n                    result += \"-\";\n        \
    \        }\n            }\n            else {\n                count = 0;\n  \
    \              result += text[i];\n            }\n        }\n        return result;",
  "        // TODO: Implement this function\n        return \"\";", "        // TODO:\
    \ Implement this function\n        return \"\";", '        return text;', "  \
    \      // TODO: Implement this function\n        return \"\";", "        string\
    \ result = \"\";\n        int spaceCount = 0;\n        for (int i = 0; i < text.Length;\
    \ i++) {\n            if (text[i] == ' ') {\n                spaceCount++;\n \
    \               if (spaceCount > 2) {\n                    result += '-';\n  \
    \              } else {\n                    result += '_';\n                }\n\
    \            } else {\n                result += text[i];\n                spaceCount\
    \ = 0;\n            }\n        }\n        return result;", "        // TODO: Implement\
    \ this function\n        return \"\";", "        // your code here\n        return\
    \ text;", "        // TODO: Implement this method\n        return \"\";", "  \
    \      // Your code goes here\n        return text;"]
stop_tokens:
- "\n    }\n"
