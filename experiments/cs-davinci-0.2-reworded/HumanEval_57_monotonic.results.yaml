language: cs
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] > prev) {\n               \
    \ decreasing = false;\n            }\n            if (l[i] < prev) {\n       \
    \         increasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing)\
    \ {\n                if (l[i] < l[i - 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] > l[i - 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x < prev) {\n                increasing = false;\n\
    \            }\n            if (x > prev) {\n                decreasing = false;\n\
    \            }\n            prev = x;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long i in l) {\n            if (i < prev) {\n                increasing = false;\n\
    \            }\n            if (i > prev) {\n                decreasing = false;\n\
    \            }\n            prev = i;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 0;\
    \ i < l.Count - 1; i++) {\n            if (l[i] > l[i + 1]) {\n              \
    \  increasing = false;\n            }\n            if (l[i] < l[i + 1]) {\n  \
    \              decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing)\
    \ {\n                if (l[i] < l[i - 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] > l[i - 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 0;\
    \ i < l.Count - 1; i++) {\n            if (l[i] > l[i + 1]) {\n              \
    \  increasing = false;\n            }\n            if (l[i] < l[i + 1]) {\n  \
    \              decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing)\
    \ {\n                if (l[i] < l[i - 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] > l[i - 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing)\
    \ {\n                if (l[i] < l[i - 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] > l[i - 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing)\
    \ {\n                if (l[i - 1] > l[i]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i - 1] < l[i])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long v in l) {\n            if (v < last) {\n                increasing = false;\n\
    \            }\n            if (v > last) {\n                decreasing = false;\n\
    \            }\n            last = v;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        long diff = l[1] - l[0];\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (diff * (l[i] - l[i\
    \ - 1]) < 0) {\n                return false;\n            }\n        }\n    \
    \    return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        long d = l[(int)1L] - l[(int)0L];\n\
    \        for (long i = (long)1L; i < (long)l.Count; i++) {\n            if (d\
    \ * (l[(int)(i)] - l[(int)(i - 1L)]) < (long)0L) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            increasing = increasing && (l[i] >= l[i - 1]);\n\
    \            decreasing = decreasing && (l[i] <= l[i - 1]);\n        }\n     \
    \   return increasing || decreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        foreach (long x in l) {\n            if\
    \ (x != prev) {\n                increasing = x > prev;\n            }\n     \
    \       if (increasing && x < prev) {\n                return false;\n       \
    \     }\n            if (!increasing && x > prev) {\n                return false;\n\
    \            }\n            prev = x;\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234c80cedc0f47c38479dfc914a7708e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234c80cedc0f47c38479dfc914a7708e>:0 \n"
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long v in l) {\n            if (v < prev) {\n                increasing = false;\n\
    \            }\n            if (v > prev) {\n                decreasing = false;\n\
    \            }\n            prev = v;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x > prev) {\n                decreasing = false;\n\
    \            }\n            else if (x < prev) {\n                increasing =\
    \ false;\n            }\n            prev = x;\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x < last) {\n                increasing = false;\n\
    \            }\n            if (x > last) {\n                decreasing = false;\n\
    \            }\n            last = x;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing)\
    \ {\n                if (l[i] < l[i - 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] > l[i - 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x > prev) {\n                decreasing = false;\n\
    \            }\n            else if (x < prev) {\n                increasing =\
    \ false;\n            }\n            prev = x;\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing)\
    \ {\n                if (l[i] < l[i - 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] > l[i - 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x < prev) {\n                increasing = false;\n\
    \            }\n            if (x > prev) {\n                decreasing = false;\n\
    \            }\n            prev = x;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ inc = true;\n        bool dec = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            inc &= l[i] >= l[i - 1];\n            dec &= l[i] <= l[i\
    \ - 1];\n        }\n        return inc || dec;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        foreach (long x in l) {\n            if\
    \ (x != prev) {\n                increasing = x > prev;\n            }\n     \
    \       if (increasing && x < prev) {\n                return false;\n       \
    \     }\n            if (!increasing && x > prev) {\n                return false;\n\
    \            }\n            prev = x;\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234c80cedc0f47c38479dfc914a7708e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234c80cedc0f47c38479dfc914a7708e>:0 \n"
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        long prev = l[0];\n   \
    \     bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool inc = l[1] > l[0];\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (inc && l[i] < l[i\
    \ - 1]) {\n                return false;\n            }\n            if (!inc\
    \ && l[i] > l[i - 1]) {\n                return false;\n            }\n      \
    \  }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x > prev) {\n                decreasing = false;\n\
    \            }\n            if (x < prev) {\n                increasing = false;\n\
    \            }\n            prev = x;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long d = l[(int)1L] -\
    \ l[(int)0L];\n        for (long i = (long)1L; i < (long)l.Count; i++) {\n   \
    \         if (l[(int)(i)] - l[(int)(i - 1L)] != d) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6eee6818e2e45b69c0cb5e5f3354ba5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6eee6818e2e45b69c0cb5e5f3354ba5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            if (l[i] == prev) {\n                continue;\n            }\n \
    \           if (increasing) {\n                if (l[i] < prev) {\n          \
    \          increasing = false;\n                }\n            } else {\n    \
    \            if (l[i] > prev) {\n                    return false;\n         \
    \       }\n            }\n            prev = l[i];\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      bool increasing = true;\n        foreach (long x in l) {\n            if\
    \ (x != last) {\n                increasing = x > last;\n            }\n     \
    \       if (increasing && x < last) {\n                return false;\n       \
    \     }\n            if (!increasing && x > last) {\n                return false;\n\
    \            }\n            last = x;\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0649ccec38944b889075e38dd3dd44cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0649ccec38944b889075e38dd3dd44cf>:0 \n"
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (long i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpptoc7qdp.cs(22,33): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpptoc7qdp.cs(22,40): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpptoc7qdp.cs(25,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpptoc7qdp.cs(25,41): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        if (l[0] < l[1]) {\n \
    \           for (int i = 1; i < l.Count - 1; i++) {\n                if (l[i]\
    \ > l[i + 1]) {\n                    return false;\n                }\n      \
    \      }\n        }\n        else {\n            for (int i = 1; i < l.Count -\
    \ 1; i++) {\n                if (l[i] < l[i + 1]) {\n                    return\
    \ false;\n                }\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        long delta = l[1] - l[0];\n\
    \        for (int i = 2; i < l.Count; i++) {\n            if (delta * (l[i] -\
    \ l[i - 1]) < 0) {\n                return false;\n            }\n        }\n\
    \        return true;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i - 1] > l[i]) {\n                increasing\
    \ = false;\n            }\n            if (l[i - 1] < l[i]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x > prev) {\n                decreasing = false;\n\
    \            }\n            else if (x < prev) {\n                increasing =\
    \ false;\n            }\n            prev = x;\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        long prev = l[0];\n   \
    \     bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] > prev) {\n               \
    \ decreasing = false;\n            }\n            if (l[i] < prev) {\n       \
    \         increasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 0;\
    \ i < l.Count - 1; i++) {\n            if (l[i] > l[i + 1]) {\n              \
    \  increasing = false;\n            }\n            if (l[i] < l[i + 1]) {\n  \
    \              decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        var inc = l[1] > l[0];\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (inc && l[i] < l[i\
    \ - 1]) {\n                return false;\n            }\n            if (!inc\
    \ && l[i] > l[i - 1]) {\n                return false;\n            }\n      \
    \  }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] > last) {\n               \
    \ decreasing = false;\n            }\n            if (l[i] < last) {\n       \
    \         increasing = false;\n            }\n            last = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        long d = l[(int)1L] - l[(int)0L];\n\
    \        for (long i = (long)1L; i < len(l); i++) {\n            if (d * (l[(int)(i)]\
    \ - l[(int)(i - 1L)]) < (long)0L) {\n                return false;\n         \
    \   }\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuaxu5yzm.cs(21,37): error CS0103: The name ''len'' does not exist in the
    current context

    '
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x > last) {\n                decreasing = false;\n\
    \            }\n            if (x < last) {\n                increasing = false;\n\
    \            }\n            last = x;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] > prev) {\n               \
    \ decreasing = false;\n            }\n            if (l[i] < prev) {\n       \
    \         increasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x < prev) {\n                increasing = false;\n\
    \            }\n            if (x > prev) {\n                decreasing = false;\n\
    \            }\n            prev = x;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i - 1] > l[i]) {\n                increasing\
    \ = false;\n            }\n            if (l[i - 1] < l[i]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        foreach (long x in l) {\n            if\
    \ (x != prev) {\n                increasing = x > prev;\n            }\n     \
    \       if (increasing && x < prev) {\n                return false;\n       \
    \     }\n            if (!increasing && x > prev) {\n                return false;\n\
    \            }\n            prev = x;\n        }\n        return true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234c80cedc0f47c38479dfc914a7708e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <234c80cedc0f47c38479dfc914a7708e>:0 \n"
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] > last) {\n               \
    \ decreasing = false;\n            }\n            if (l[i] < last) {\n       \
    \         increasing = false;\n            }\n            last = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x > last) {\n                decreasing = false;\n\
    \            }\n            if (x < last) {\n                increasing = false;\n\
    \            }\n            last = x;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 0;\
    \ i < l.Count - 1; i++) {\n            if (l[i] > l[i + 1]) {\n              \
    \  increasing = false;\n            }\n            if (l[i] < l[i + 1]) {\n  \
    \              decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing)\
    \ {\n                if (l[i - 1] > l[i]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i - 1] < l[i])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x < prev) {\n                increasing = false;\n\
    \            }\n            if (x > prev) {\n                decreasing = false;\n\
    \            }\n            prev = x;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long d = l[(int)1L] -\
    \ l[(int)0L];\n        for (long i = (long)1L; i < (long)l.Count; i++) {\n   \
    \         if (d * (l[(int)(i)] - l[(int)(i - 1L)]) < (long)0L) {\n           \
    \     return false;\n            }\n        }\n        return true;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        if (l[0] < l[1]) {\n \
    \           for (int i = 1; i < l.Count; i++) {\n                if (l[i - 1]\
    \ > l[i]) {\n                    return false;\n                }\n          \
    \  }\n        }\n        else {\n            for (int i = 1; i < l.Count; i++)\
    \ {\n                if (l[i - 1] < l[i]) {\n                    return false;\n\
    \                }\n            }\n        }\n        return true;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799489
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x > last) {\n                decreasing = false;\n\
    \            }\n            if (x < last) {\n                increasing = false;\n\
    \            }\n            last = x;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x < prev) {\n                increasing = false;\n\
    \            }\n            if (x > prev) {\n                decreasing = false;\n\
    \            }\n            prev = x;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            increasing = increasing && (l[i] >= l[i - 1]);\n\
    \            decreasing = decreasing && (l[i] <= l[i - 1]);\n        }\n     \
    \   return increasing || decreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            if (l[i] == prev) {\n                continue;\n            }\n \
    \           if (l[i] > prev) {\n                if (!increasing) {\n         \
    \           return false;\n                }\n            } else {\n         \
    \       if (increasing) {\n                    increasing = false;\n         \
    \       }\n            }\n            prev = l[i];\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799489
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      bool increasing = true;\n        foreach (long x in l) {\n            if\
    \ (x != last) {\n                increasing = x > last;\n            }\n     \
    \       if (increasing != (x >= last)) {\n                return false;\n    \
    \        }\n            last = x;\n        }\n        return true;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c95c4301d40f4aaa8c66406ef84b2c4b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c95c4301d40f4aaa8c66406ef84b2c4b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799489
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i - 1] > l[i]) {\n                increasing\
    \ = false;\n            }\n            if (l[i - 1] < l[i]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] > prev) {\n               \
    \ decreasing = false;\n            }\n            if (l[i] < prev) {\n       \
    \         increasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799489
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < last) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > last) {\n       \
    \         decreasing = false;\n            }\n            last = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799489
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x > last) {\n                decreasing = false;\n\
    \            }\n            if (x < last) {\n                increasing = false;\n\
    \            }\n            last = x;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x < prev) {\n                increasing = false;\n\
    \            }\n            if (x > prev) {\n                decreasing = false;\n\
    \            }\n            prev = x;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] > prev) {\n               \
    \ decreasing = false;\n            }\n            if (l[i] < prev) {\n       \
    \         increasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799489
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x > last) {\n                decreasing = false;\n\
    \            }\n            if (x < last) {\n                increasing = false;\n\
    \            }\n            last = x;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799489
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i - 1] > l[i]) {\n                increasing\
    \ = false;\n            }\n            if (l[i - 1] < l[i]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing)\
    \ {\n                if (l[i - 1] > l[i]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i - 1] < l[i])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < last) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > last) {\n       \
    \         decreasing = false;\n            }\n            last = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799489
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799489
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x < prev) {\n                increasing = false;\n\
    \            }\n            if (x > prev) {\n                decreasing = false;\n\
    \            }\n            prev = x;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = (l[(int)1L]\
    \ > l[(int)0L]);\n        for (long i = (long)1L; i < (long)l.Count; i++) {\n\
    \            if (increasing && l[(int)i] < l[(int)(i - (long)1L)]) {\n       \
    \         return false;\n            }\n            if (!increasing && l[(int)i]\
    \ > l[(int)(i - (long)1L)]) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799489
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x > prev) {\n                decreasing = false;\n\
    \            }\n            if (x < prev) {\n                increasing = false;\n\
    \            }\n            prev = x;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        long prev = l[0];\n   \
    \     bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ last = l[0];\n        bool increasing = true;\n        bool decreasing = true;\n\
    \        for (int i = 1; i < l.Count; i++) {\n            if (l[i] < last) {\n\
    \                increasing = false;\n            }\n            if (l[i] > last)\
    \ {\n                decreasing = false;\n            }\n            last = l[i];\n\
    \        }\n        return increasing || decreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799489
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long d = l[(int)0L];\n\
    \        long sign = Math.Sign(d);\n        if (sign == 0L) {\n            sign\
    \ = 1L;\n        }\n        foreach (var _ in l)\n        {\n            if (Math.Sign(d)\
    \ != sign)\n            {\n                return false;\n            }\n    \
    \        d = _;\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8706736d238453e81920c22af17fe00>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d8706736d238453e81920c22af17fe00>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799489
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x > last) {\n                decreasing = false;\n\
    \            }\n            if (x < last) {\n                increasing = false;\n\
    \            }\n            last = x;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        long d = l[(int)1L] - l[(int)0L];\n\
    \        for (long i = (long)1L; i < (long)l.Count; i++) {\n            if (d\
    \ * (l[(int)(i)] - l[(int)(i - 1L)]) < (long)0L) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        foreach (long x in l) {\n            if\
    \ (x == prev) {\n                continue;\n            }\n            if (x >\
    \ prev) {\n                if (!increasing) {\n                    return false;\n\
    \                }\n            }\n            else {\n                if (increasing)\
    \ {\n                    increasing = false;\n                }\n            }\n\
    \            prev = x;\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799489
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x < prev) {\n                increasing = false;\n\
    \            }\n            if (x > prev) {\n                decreasing = false;\n\
    \            }\n            prev = x;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing)\
    \ {\n                if (l[i] < l[i - 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] > l[i - 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        long prev = l[0];\n   \
    \     bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing)\
    \ {\n                if (l[i] > l[i + 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] < l[i + 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799489
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i - 1] > l[i]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i - 1] < l[i]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 2; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799488
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] > l[i - 1]) {\n                decreasing\
    \ = false;\n            }\n            if (l[i] < l[i - 1]) {\n              \
    \  increasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799489
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        long d = l[(int)1L] - l[(int)0L];\n\
    \        for (long i = (long)1L; i < (long)l.Count; i++) {\n            if (d\
    \ * (l[(int)(i)] - l[(int)(i - 1L)]) < (long)0L) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x < prev) {\n                increasing = false;\n\
    \            }\n            if (x > prev) {\n                decreasing = false;\n\
    \            }\n            prev = x;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 0;\
    \ i < l.Count - 1; i++) {\n            if (l[i] > l[i + 1]) {\n              \
    \  increasing = false;\n            }\n            if (l[i] < l[i + 1]) {\n  \
    \              decreasing = false;\n            }\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < prev) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > prev) {\n       \
    \         decreasing = false;\n            }\n            prev = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing)\
    \ {\n                if (l[i] < l[i - 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] > l[i - 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long prev = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l) {\n            if (x < prev) {\n                increasing = false;\n\
    \            }\n            if (x > prev) {\n                decreasing = false;\n\
    \            }\n            prev = x;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[0]\
    \ < l[1];\n        for (int i = 1; i < l.Count - 1; i++) {\n            if (increasing\
    \ && l[i] > l[i + 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] < l[i + 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing)\
    \ {\n                if (l[i] < l[i - 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] > l[i - 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing)\
    \ {\n                if (l[i] < l[i - 1]) {\n                    return false;\n\
    \                }\n            } else {\n                if (l[i] > l[i - 1])\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            if (l[i] < last) {\n               \
    \ increasing = false;\n            }\n            if (l[i] > last) {\n       \
    \         decreasing = false;\n            }\n            last = l[i];\n     \
    \   }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799489
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        bool increasing = l[1]\
    \ > l[0];\n        for (int i = 1; i < l.Count; i++) {\n            if (increasing\
    \ && l[i] < l[i - 1]) {\n                return false;\n            }\n      \
    \      if (!increasing && l[i] > l[i - 1]) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799489
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ <= 1) {\n            return true;\n        }\n        int dir = 0;\n       \
    \ for (int i = 1; i < l.Count; i++) {\n            if (l[i] > l[i - 1]) {\n  \
    \              if (dir < 0) {\n                    return false;\n           \
    \     }\n                dir = 1;\n            }\n            else if (l[i] <\
    \ l[i - 1]) {\n                if (dir > 0) {\n                    return false;\n\
    \                }\n                dir = -1;\n            }\n        }\n    \
    \    return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799489
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        bool\
    \ increasing = true;\n        bool decreasing = true;\n        for (int i = 1;\
    \ i < l.Count; i++) {\n            if (l[i] < l[i - 1]) {\n                increasing\
    \ = false;\n            }\n            if (l[i] > l[i - 1]) {\n              \
    \  decreasing = false;\n            }\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        long d = l[(int)1L] - l[(int)0L];\n\
    \        if (d == 0L) {\n            return false;\n        }\n        for (long\
    \ i = (long)1L; i < (long)l.Count; i++) {\n            if (d * (l[(int)(i)] -\
    \ l[(int)(i - 1L)]) < 0L) {\n                return false;\n            }\n  \
    \      }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <02667251ca5040059795c922784bcc49>:0 \n"
  stdout: ''
  timestamp: 1659799489
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) {\n            return true;\n        }\n        long last = l[0];\n  \
    \      bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long v in l) {\n            if (v < last) {\n                increasing = false;\n\
    \            }\n            if (v > last) {\n                decreasing = false;\n\
    \            }\n            last = v;\n        }\n        return increasing ||\
    \ decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799487
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) {\n            return true;\n        }\n        var inc = l[(int)1L] >\
    \ l[(int)0L];\n        for (var i = (long)2L; i < len(l); i++) {\n           \
    \ if (inc && l[(int)i] < l[(int)(i - (long)1L)]) {\n                return false;\n\
    \            }\n            if (!inc && l[(int)i] > l[(int)(i - (long)1L)]) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuutnic4a.cs(21,36): error CS0103: The name ''len'' does not exist in the
    current context

    '
  timestamp: 1659799489
