language: cs
name: HumanEval_2_truncate_number
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a positive floating point number, it can be decomposed\
    \ into\n    // and integer part (largest integer smaller than given number) and\
    \ decimals\n    // (leftover part always smaller than 1).\n    // Return the decimal\
    \ part of the number.\n    // >>> TruncateNumber((3.5f))\n    // (0.5f)\n    public\
    \ static float TruncateNumber(float number) {\n        return number - (int)number;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(TruncateNumber((3.5f))\
    \ == (0.5f));\n    Debug.Assert(TruncateNumber((1.25f)) == (0.25f));\n    Debug.Assert(TruncateNumber((123.0f))\
    \ == (0.0f));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803891
