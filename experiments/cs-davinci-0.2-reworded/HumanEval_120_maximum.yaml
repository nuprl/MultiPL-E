name: HumanEval_120_maximum
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list arr of integers and a positive integer k, return\
  \ a sorted list \n    // of length k with the maximum k numbers in arr.\n    //\
  \ Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
  \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))\n\
  \    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L, (long)-4L,\
  \ (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
  \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
  \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
  \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
  \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
  \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
  \ Maximum(List<long> arr, long k) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
  \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
  \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
  \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
  \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
  \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
  \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
  \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
  \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
  \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
  \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
  \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
  \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
  \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
  \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
  \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
  \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
  \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
  \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
  \    }\n\n}\n"
completions: ["        // Write your code here.\n        return arr;", "        //\
    \ Your code goes here.\n        return null;", "        // Your code here\n  \
    \      return arr;", "        var res = new List<long>();\n        var pq = new\
    \ PriorityQueue<long>();\n        foreach (var x in arr) {\n            pq.Add(x);\n\
    \            if (pq.Count > k) {\n                pq.Remove();\n            }\n\
    \        }\n        while (pq.Count > 0) {\n            res.Add(pq.Remove());\n\
    \        }\n        res.Reverse();\n        return res;", "        // Write your\
    \ code here\n        return new List<long>();", "        // Your code goes here.\n\
    \        return null;", "        // Write your code here.\n        return new\
    \ List<long>();", "        // Your code goes here.\n        return null;", " \
    \       // Your code goes here.\n        return null;", "        // TODO: Implement\
    \ your solution here.\n        return null;", "        // Your code goes here.\n\
    \        return null;", "        // Your code goes here.\n        return null;",
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here.\n        return\
    \ null;", "        // TODO: Implement your solution here\n        return null;",
  "        // Your code goes here.\n        return null;", "        // Your code here\n\
    \        return new List<long>();", "        // Your code goes here.\n       \
    \ return new List<long>();", "        // your code goes here\n        return arr;",
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return null;", "        // TODO: Implement your solution here\n\
    \        return new List<long>();", "        List<long> result = new List<long>();\n\
    \        for (long i = 0; i < k; i++) {\n            result.Add(arr[(int)i]);\n\
    \        }\n        result.Sort();\n        for (long i = k; i < arr.Count; i++)\
    \ {\n            if (arr[(int)i] > result[0]) {\n                result[0] = arr[(int)i];\n\
    \                result.Sort();\n            }\n        }\n        return result;",
  "        if (k == 0) {\n            return new List<long>();\n        }\n      \
    \  if (k == arr.Count) {\n            return arr;\n        }\n        List<long>\
    \ result = new List<long>();\n        for (int i = 0; i < k; i++) {\n        \
    \    result.Add(arr[i]);\n        }\n        result.Sort();\n        for (int\
    \ i = k; i < arr.Count; i++) {\n            if (arr[i] > result[0]) {\n      \
    \          result[0] = arr[i];\n                result.Sort();\n            }\n\
    \        }\n        return result;", "        var result = new List<long>();\n\
    \        var heap = new Heap<long>();\n        foreach (var item in arr) {\n \
    \           heap.Insert(item);\n        }\n        for (int i = 0; i < k; i++)\
    \ {\n            result.Add(heap.ExtractMax());\n        }\n        return result;",
  "        // Your code goes here.\n        return arr;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here.\n        return\
    \ arr;", '        return arr.OrderByDescending(x => x).Take((int)k).ToList();',
  "        // Your code goes here.\n        return null;", "        // Your code here\n\
    \        return arr;", "        // Your code goes here.\n        return arr;",
  "        // Your code goes here.\n        return new List<long>();", "        //\
    \ Your code goes here.\n        return null;", "        // Fill in your code here\n\
    \        return new List<long>();", "        // Your code goes here.\n       \
    \ return null;", "        // Your code goes here.\n        return null;", "  \
    \      List<long> result = new List<long>();\n        if (k == 0) {\n        \
    \    return result;\n        }\n        if (k == arr.Count) {\n            return\
    \ arr;\n        }\n        List<long> sorted = arr.OrderByDescending(x => x).ToList();\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(sorted[i]);\n \
    \       }\n        return result;", "        // Write your code here.\n      \
    \  return null;", "        // Your code goes here.\n        return null;", " \
    \       // Your code goes here.\n        return null;", "        // Write your\
    \ code here\n        return arr;", "        // TODO: Implement your solution here\n\
    \        return arr;", "        // your code goes here\n        return null;",
  "        // Your code goes here.\n        return arr;", "        // Your code goes\
    \ here.\n        return new List<long>();", "        // Your code goes here.\n\
    \        return null;", "        // Your code goes here.\n        return null;",
  "        // Your code here\n        return arr;", "        // >>> Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L))\n        // (new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))\n        // >>> Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L))\n        // (new List<long>(new\
    \ long[]{(long)4L, (long)4L}))\n        // >>> Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n   \
    \     // (new List<long>(new long[]{(long)2L}))\n        // >>> Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})),\
    \ (2L))\n        // (new List<long>(new long[]{(long)2L, (long)2L}))\n       \
    \ // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L,\
    \ (long)-1L, (long)-2L, (long)1L})), (3L))\n        // (new List<long>(new long[]{(long)2L,\
    \ (long)2L, (long)1L}))\n        // >>> Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (4L))\n   \
    \     // (new List<long>(new long[]{(long)2L, (long)2L, (long)1L, (long)1L}))\n\
    \        // >>> Maximum((new List<long>(new long[]", "        // Your code here\n\
    \        return null;", "        // Your code here.\n        return arr;", " \
    \       // Your code goes here.\n        return arr;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code here\n        return null;",
  "        // Your code goes here.\n        return arr;", "        // Your code goes\
    \ here.\n        return new List<long>();", "        // Your code goes here.\n\
    \        return null;", "        // Your code goes here.\n        return new List<long>();",
  '        return arr.OrderByDescending(x => x).Take((int)k).ToList();', "       \
    \ // Your code goes here.\n        return arr;", "        // Your code goes here\n\
    \        return arr;", "        // Your code goes here.\n        return null;",
  "        // Your code goes here.\n        return arr;", "        // TODO: Implement\
    \ this function\n        return new List<long>();", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here.\n        return\
    \ new List<long>();", "        // Your code goes here.\n        return null;",
  "        // Your code here\n        return null;", "        // Your code goes here.\n\
    \        return null;", "        // TODO: Implement your solution here\n     \
    \   return null;", "        // Your code goes here\n        return arr;", "  \
    \      var res = new List<long>();\n        var pq = new PriorityQueue<long>();\n\
    \        foreach (var i in arr) {\n            pq.Push(i);\n            if (pq.Count\
    \ > k) {\n                pq.Pop();\n            }\n        }\n        while (pq.Count\
    \ > 0) {\n            res.Add(pq.Pop());\n        }\n        res.Reverse();\n\
    \        return res;", "        // Your code goes here.\n        return null;",
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here.\n        return\
    \ arr;", "        // Your code goes here.\n        return null;", "        //\
    \ Your code goes here.\n        return null;", "        // Your code goes here.\n\
    \        return null;", "        // Your code goes here.\n        return null;",
  "        // your code goes here\n        return null;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here.\n        return\
    \ null;", "        // Your code goes here.\n        return null;", "        //\
    \ Your code goes here.\n        return null;", "        // Insert your code here.\n\
    \        return new List<long>();", '        return arr.OrderByDescending(x =>
    x).Take((int)k).ToList();', "        // Your code goes here.\n        return null;",
  "        var result = new List<long>();\n        var heap = new Heap<long>();\n\
    \        foreach (var item in arr) {\n            heap.Insert(item);\n       \
    \ }\n        for (var i = 0; i < k; i++) {\n            result.Add(heap.ExtractMax());\n\
    \        }\n        return result;", "        // TODO: Implement your solution\
    \ here.\n        return new List<long>();", "        // Your code goes here.\n\
    \        return null;", "        // Your code goes here.\n        return null;",
  "        List<long> result = new List<long>();\n        for (int i = 0; i < k; i++)\
    \ {\n            result.Add(arr[i]);\n        }\n        result.Sort();\n    \
    \    for (int i = k; i < arr.Count; i++) {\n            if (arr[i] > result[0])\
    \ {\n                result[0] = arr[i];\n                result.Sort();\n   \
    \         }\n        }\n        return result;", "        // Your code goes here.\n\
    \        return arr;", "        // Your code goes here.\n        return null;",
  "        // Your code here.\n        return null;", "        // Your code here\n\
    \        return null;", "        // TODO: Implement your solution here\n     \
    \   return arr;", "        // Your code goes here\n        return null;", "  \
    \      // Your code here\n        return arr;", "        // Your code goes here.\n\
    \        // You can add functions and other code here.\n        // You can modify\
    \ the return type.\n        // Do not modify the function signature.\n       \
    \ return arr;", "        // Your code goes here.\n        return new List<long>();",
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return new List<long>();", "        // Implement your solution\
    \ here\n        return arr;", "        // Your code goes here.\n        return\
    \ arr;", "        // Your code here\n        return arr;", "        // Your code\
    \ here\n        return new List<long>();", "        // Your code goes here.\n\
    \        return null;", '        return arr.OrderByDescending(x => x).Take((int)k).ToList();',
  '        return arr.OrderByDescending(x => x).Take((int)k).ToList();', "       \
    \ // Your code goes here.\n        return null;", "        // Write your code\
    \ here\n        return null;", "        // Your code goes here.\n        return\
    \ null;", "        // Your code goes here.\n        return new List<long>();",
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return arr;", "        // Your code goes here.\n        return\
    \ null;", "        // Your code goes here.\n        return null;", "        //\
    \ Your code goes here.\n        return null;", "        // Write your code here.\n\
    \        return null;", "        // Your code goes here.\n        return new List<long>();",
  "        // Your code goes here\n        return null;", "        // TODO: Implement\n\
    \        return null;", "        List<long> result = new List<long>();\n     \
    \   for (long i = 0; i < k; i++) {\n            long max = arr[0];\n         \
    \   long maxIndex = 0;\n            for (long j = 0; j < arr.Count; j++) {\n \
    \               if (arr[(int)j] > max) {\n                    max = arr[(int)j];\n\
    \                    maxIndex = j;\n                }\n            }\n       \
    \     result.Add(max);\n            arr.RemoveAt((int)maxIndex);\n        }\n\
    \        return result;", '        return arr.OrderByDescending(x => x).Take((int)k).ToList();',
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here.\n        return\
    \ null;", "        // Your code goes here.\n        return null;", "        //\
    \ Your code goes here.\n        return null;", "        // Your code goes here.\n\
    \        return new List<long>();", "        // Your code here\n        return\
    \ null;", '        return arr.OrderByDescending(x => x).Take((int)k).ToList();',
  "        // Your code here\n        return new List<long>();", "        // Your\
    \ code goes here.\n        return null;", "        if (k == 0) {\n           \
    \ return new List<long>();\n        }\n        if (k == arr.Count) {\n       \
    \     return arr;\n        }\n        List<long> result = new List<long>();\n\
    \        for (int i = 0; i < k; i++) {\n            result.Add(arr[i]);\n    \
    \    }\n        result.Sort();\n        for (int i = k; i < arr.Count; i++) {\n\
    \            if (arr[i] > result[0]) {\n                result.RemoveAt(0);\n\
    \                result.Add(arr[i]);\n                result.Sort();\n       \
    \     }\n        }\n        return result;", "        // Your code goes here.\n\
    \        return null;", "        // Your code goes here\n        return null;",
  "        // Your code goes here.\n        return null;", "        // Your code here\n\
    \        return new List<long>();", "        // Your code goes here.\n       \
    \ return null;", "        // Your code goes here.\n        return null;", "  \
    \      // Your code goes here.\n        return arr;", "        // Your code goes\
    \ here\n        return new List<long>();", "        // Your code here\n      \
    \  return null;", "        // Your code goes here.\n        return null;", " \
    \       // Your code goes here.\n        return null;", "        // Your code\
    \ goes here.\n        return null;", "        // Write your code here\n      \
    \  return arr;", "        // Your code goes here.\n        return null;", "  \
    \      // Your code goes here.\n        return null;", "        // Your code goes\
    \ here\n        return null;", "        // your code goes here\n        return\
    \ new List<long>();", "        // Your code goes here.\n        return arr;",
  "        // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here.\n        return\
    \ arr;", "        // Your code goes here.\n        return arr;", "        // Your\
    \ code goes here.\n        return arr;", "        List<long> result = new List<long>();\n\
    \        for (long i = 0; i < k; i++) {\n            long max = arr[0];\n    \
    \        long maxIndex = 0;\n            for (long j = 0; j < arr.Count; j++)\
    \ {\n                if (arr[(int)j] > max) {\n                    max = arr[(int)j];\n\
    \                    maxIndex = j;\n                }\n            }\n       \
    \     result.Add(max);\n            arr.RemoveAt((int)maxIndex);\n        }\n\
    \        return result;", "        // Your code goes here.\n        return arr;",
  "        // Your code goes here.\n        return null;", "        // TODO: Implement\n\
    \        return null;", "        // Your code goes here.\n        return null;",
  "        var result = new List<long>();\n        var maxHeap = new MaxHeap<long>(arr);\n\
    \        for (var i = 0; i < k; i++) {\n            result.Add(maxHeap.Pop());\n\
    \        }\n        return result;", "        // Your code goes here.\n      \
    \  return new List<long>();", "        // Your code goes here.\n        return\
    \ null;", "        // Your code goes here.\n        return null;", "        //\
    \ Write your code here.\n        return arr;", "        var result = new List<long>();\n\
    \        var heap = new Heap<long>();\n        foreach (var item in arr) {\n \
    \           heap.Push(item);\n        }\n        for (var i = 0; i < k; i++) {\n\
    \            result.Add(heap.Pop());\n        }\n        return result;", '        return
    arr.OrderByDescending(x => x).Take((int)k).ToList();', "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here.\n        return\
    \ null;", "        // Your code here\n        return arr;", "        // Your code\
    \ goes here.\n        return null;", "        // Your code goes here.\n      \
    \  return null;", "        // Your code goes here.\n        return null;", " \
    \       // Your code goes here.\n        return null;", "        // Your code\
    \ here\n        return null;", "        // Your code goes here.\n        return\
    \ arr;", "        // Your code goes here.\n        return null;", "        //\
    \ Your code goes here.\n        return null;", "        // TODO: Implement me!\n\
    \        return new List<long>();", "        // Your code goes here.\n       \
    \ return null;", "        // Write your code here\n        return arr;", "   \
    \     // Your code goes here.\n        return null;", "        // Your code goes\
    \ here.\n        return null;", "        // Your code goes here.\n        return\
    \ null;", "        // Your code goes here.\n        return null;", "        //\
    \ Your code goes here.\n        return new List<long>();", '        return arr.OrderByDescending(x
    => x).Take((int)k).ToList();', "        // Your code goes here.\n        return\
    \ null;", "        // Your code goes here.\n        return null;", "        //\
    \ TODO: Implement your solution here\n        return null;", "        // Your\
    \ code goes here.\n        return arr;", "        // Your code goes here.\n  \
    \      return null;", "        // Your code goes here.\n        return arr;"]
stop_tokens:
- "\n    }\n"
