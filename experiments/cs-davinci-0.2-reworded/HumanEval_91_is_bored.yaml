name: HumanEval_91_is_bored
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You'll be given a string of words, and your task is to count\
  \ the number\n    // of boredoms. A boredom is a sentence that starts with the word\
  \ \"I\".\n    // Sentences are delimited by '.', '?' or '!'.\n    // For example:\n\
  \    // >>> IsBored((\"Hello world\"))\n    // (0L)\n    // >>> IsBored((\"The sky\
  \ is blue. The sun is shining. I love this weather\"))\n    // (1L)\n    public\
  \ static long IsBored(string S) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsBored((\"\
  Hello world\")) == (0L));\n    Debug.Assert(IsBored((\"Is the sky blue?\")) == (0L));\n\
  \    Debug.Assert(IsBored((\"I love It !\")) == (1L));\n    Debug.Assert(IsBored((\"\
  bIt\")) == (0L));\n    Debug.Assert(IsBored((\"I feel good today. I will be productive.\
  \ will kill It\")) == (2L));\n    Debug.Assert(IsBored((\"You and I are going for\
  \ a walk\")) == (0L));\n    }\n\n}\n"
completions: ["        int count = 0;\n        string[] sentences = S.Split(new char[]\
    \ { '.', '?', '!' });\n        foreach (string sentence in sentences) {\n    \
    \        if (sentence.Trim().StartsWith(\"I\")) {\n                count++;\n\
    \            }\n        }\n        return count;", "        // Your code here\n\
    \        return 0;", "        var boredoms = 0L;\n        var sentences = S.Split(new\
    \ char[] { '.', '?', '!' });\n        foreach (var sentence in sentences) {\n\
    \            var words = sentence.Split(new char[] { ' ' });\n            if (words.Length\
    \ > 0 && words[0] == \"I\") {\n                boredoms++;\n            }\n  \
    \      }\n        return boredoms;", "        // Your code goes here.\n      \
    \  return 0L;", "        long count = 0;\n        string[] sentences = S.Split(new\
    \ char[] { '.', '?', '!' }, StringSplitOptions.RemoveEmptyEntries);\n        foreach\
    \ (string sentence in sentences) {\n            if (sentence.TrimStart().StartsWith(\"\
    I\")) {\n                count++;\n            }\n        }\n        return count;",
  "        return S.Split(new char[] { '.', '?', '!' }).Count(x => x.Trim().StartsWith(\"\
    I\"));", "        long count = 0;\n        string[] sentences = S.Split(new char[]\
    \ { '.', '?', '!' });\n        foreach (string sentence in sentences) {\n    \
    \        if (sentence.Trim().StartsWith(\"I\")) {\n                count++;\n\
    \            }\n        }\n        return count;", "        var boredoms = 0L;\n\
    \        var sentences = S.Split(new char[] { '.', '?', '!' });\n        foreach\
    \ (var sentence in sentences) {\n            var words = sentence.Split(new char[]\
    \ { ' ' });\n            if (words.Length > 0 && words[0] == \"I\") {\n      \
    \          boredoms++;\n            }\n        }\n        return boredoms;", " \
    \       // Your code here\n        return 0;", "        // Your code here.\n \
    \       return 0L;", "        return S.Split(new char[] { '.', '?', '!' }).Count(s\
    \ => s.Trim().StartsWith(\"I\"));", "        long count = 0;\n        string[]\
    \ sentences = S.Split(new char[] { '.', '?', '!' });\n        foreach (string\
    \ sentence in sentences) {\n            if (sentence.Trim().StartsWith(\"I\"))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        long count = 0;\n        string[] sentences = S.Split(new char[] { '.',\
    \ '?', '!' });\n        foreach (string sentence in sentences) {\n           \
    \ if (sentence.Trim().StartsWith(\"I\")) {\n                count++;\n       \
    \     }\n        }\n        return count;", "        // Your code goes here.\n\
    \        return 0L;", "        long count = 0;\n        string[] sentences = S.Split(new\
    \ char[] { '.', '?', '!' });\n        foreach (string sentence in sentences) {\n\
    \            if (sentence.StartsWith(\"I\")) {\n                count++;\n   \
    \         }\n        }\n        return count;", "        long boredoms = 0;\n\
    \        string[] sentences = S.Split(new char[] { '.', '?', '!' });\n       \
    \ foreach (string sentence in sentences) {\n            if (sentence.Trim().StartsWith(\"\
    I\")) {\n                boredoms++;\n            }\n        }\n        return\
    \ boredoms;", "        var boredoms = 0L;\n        var words = S.Split(' ', '.',\
    \ '?', '!');\n        foreach (var word in words) {\n            if (word == \"\
    I\") {\n                boredoms++;\n            }\n        }\n        return\
    \ boredoms;", "        return S.Split(new char[] { '.', '?', '!' }).Count(s =>\
    \ s.Trim().StartsWith(\"I\"));", "        long boredoms = 0;\n        string[]\
    \ sentences = S.Split(new char[] { '.', '?', '!' });\n        foreach (string\
    \ sentence in sentences) {\n            if (sentence.Trim().StartsWith(\"I\"))\
    \ {\n                boredoms++;\n            }\n        }\n        return boredoms;",
  "        return S.Split(new char[] { '.', '?', '!' }).Count(s => s.Trim().StartsWith(\"\
    I\"));"]
stop_tokens:
- "\n    }\n"
