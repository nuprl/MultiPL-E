name: HumanEval_8_sum_product
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // For a given list of integers, return a tuple consisting of a\
  \ sum and a product of all the integers in a list.\n    // Empty sum should be equal\
  \ to 0 and empty product should be equal to 1.\n    // >>> SumProduct((new List<long>()))\n\
  \    // (Tuple.Create(0L, 1L))\n    // >>> SumProduct((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L})))\n    // (Tuple.Create(10L, 24L))\n    public\
  \ static Tuple<long, long> SumProduct(List<long> numbers) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumProduct((new\
  \ List<long>())).Equals((Tuple.Create(0L, 1L))));\n    Debug.Assert(SumProduct((new\
  \ List<long>(new long[]{(long)1L, (long)1L, (long)1L}))).Equals((Tuple.Create(3L,\
  \ 1L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)100L, (long)0L}))).Equals((Tuple.Create(100L,\
  \ 0L))));\n    Debug.Assert(SumProduct((new List<long>(new long[]{(long)3L, (long)5L,\
  \ (long)7L}))).Equals((Tuple.Create(15L, 105L))));\n    Debug.Assert(SumProduct((new\
  \ List<long>(new long[]{(long)10L}))).Equals((Tuple.Create(10L, 10L))));\n    }\n\
  \n}\n"
completions: ["        long sum = 0;\n        long product = 1;\n        for (int\
    \ i = 0; i < numbers.Count; i++) {\n            sum += numbers[i];\n         \
    \   product *= numbers[i];\n        }\n        return Tuple.Create(sum, product);",
  "        long sum = 0;\n        long product = 1;\n        foreach (long n in numbers)\
    \ {\n            sum += n;\n            product *= n;\n        }\n        return\
    \ Tuple.Create(sum, product);", "        long sum = 0;\n        long product =\
    \ 1;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return Tuple.Create(sum, product);",
  "        long sum = 0;\n        long product = 1;\n        foreach (long num in\
    \ numbers) {\n            sum += num;\n            product *= num;\n        }\n\
    \        return Tuple.Create(sum, product);", "        long sum = 0;\n       \
    \ long product = 1;\n        foreach (long number in numbers) {\n            sum\
    \ += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,\
    \ product);", "        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return Tuple.Create(sum, product);", "      \
    \  long sum = 0;\n        long product = 1;\n        foreach (long number in numbers)\
    \ {\n            sum += number;\n            product *= number;\n        }\n \
    \       return Tuple.Create(sum, product);", "        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long num in numbers) {\n            sum += num;\n\
    \            product *= num;\n        }\n        return Tuple.Create(sum, product);",
  '        return Tuple.Create(numbers.Sum(), numbers.Aggregate(1L, (a, b) => a *
    b));', "        long sum = 0;\n        long product = 1;\n        foreach (long\
    \ n in numbers) {\n            sum += n;\n            product *= n;\n        }\n\
    \        return Tuple.Create(sum, product);", "        long sum = 0;\n       \
    \ long product = 1;\n        foreach (long number in numbers) {\n            sum\
    \ += number;\n            product *= number;\n        }\n        return Tuple.Create(sum,\
    \ product);", "        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return Tuple.Create(sum, product);", "      \
    \  long sum = 0;\n        long product = 1;\n        foreach (long number in numbers)\
    \ {\n            sum += number;\n            product *= number;\n        }\n \
    \       return Tuple.Create(sum, product);", "        long sum = 0;\n        long\
    \ product = 1;\n        foreach (long number in numbers) {\n            sum +=\
    \ number;\n            product *= number;\n        }\n        return Tuple.Create(sum,\
    \ product);", "        long sum = 0;\n        long product = 1;\n        foreach\
    \ (long number in numbers) {\n            sum += number;\n            product\
    \ *= number;\n        }\n        return Tuple.Create(sum, product);", "      \
    \  long sum = 0;\n        long product = 1;\n        foreach (long n in numbers)\
    \ {\n            sum += n;\n            product *= n;\n        }\n        return\
    \ Tuple.Create(sum, product);", "        // Write your code here\n        return\
    \ Tuple.Create(numbers.Sum(), numbers.Aggregate(1L, (a, b) => a * b));", "   \
    \     long sum = 0;\n        long product = 1;\n        foreach (long number in\
    \ numbers) {\n            sum += number;\n            product *= number;\n   \
    \     }\n        return Tuple.Create(sum, product);", "        long sum = 0;\n\
    \        long product = 1;\n        foreach (long number in numbers) {\n     \
    \       sum += number;\n            product *= number;\n        }\n        return\
    \ Tuple.Create(sum, product);", "        long sum = 0;\n        long product =\
    \ 1;\n        foreach (long number in numbers) {\n            sum += number;\n\
    \            product *= number;\n        }\n        return Tuple.Create(sum, product);"]
stop_tokens:
- "\n    }\n"
