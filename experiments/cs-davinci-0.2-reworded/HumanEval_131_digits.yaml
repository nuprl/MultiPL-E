name: HumanEval_131_digits
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a positive integer n, return the product of the odd digits.\n\
  \    // Return 0 if all digits are even.\n    // For example:\n    // >>> Digits((1L))\n\
  \    // (1L)\n    // >>> Digits((4L))\n    // (0L)\n    // >>> Digits((235L))\n\
  \    // (15L)\n    public static long Digits(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Digits((5L))\
  \ == (5L));\n    Debug.Assert(Digits((54L)) == (5L));\n    Debug.Assert(Digits((120L))\
  \ == (1L));\n    Debug.Assert(Digits((5014L)) == (5L));\n    Debug.Assert(Digits((98765L))\
  \ == (315L));\n    Debug.Assert(Digits((5576543L)) == (2625L));\n    Debug.Assert(Digits((2468L))\
  \ == (0L));\n    }\n\n}\n"
completions: ["        long product = 1;\n        while (n > 0) {\n            long\
    \ digit = n % 10;\n            if (digit % 2 == 1) {\n                product\
    \ *= digit;\n            }\n            n /= 10;\n        }\n        return product;",
  "        long result = 1;\n        while (n > 0) {\n            long digit = n %\
    \ 10;\n            if (digit % 2 == 1) {\n                result *= digit;\n \
    \           }\n            n /= 10;\n        }\n        return result;", "   \
    \     long prod = 1;\n        while (n > 0) {\n            long digit = n % 10;\n\
    \            if (digit % 2 == 1) {\n                prod *= digit;\n         \
    \   }\n            n /= 10;\n        }\n        return prod;", "        long product\
    \ = 1;\n        while (n > 0) {\n            long digit = n % 10;\n          \
    \  if (digit % 2 == 1) {\n                product *= digit;\n            }\n \
    \           n /= 10;\n        }\n        return product;", "        long result\
    \ = 1;\n        while (n > 0) {\n            long digit = n % 10;\n          \
    \  if (digit % 2 == 1) {\n                result *= digit;\n            }\n  \
    \          n /= 10;\n        }\n        return result;", "        long result\
    \ = 1;\n        while (n > 0) {\n            long digit = n % 10;\n          \
    \  if (digit % 2 == 1) {\n                result *= digit;\n            }\n  \
    \          n /= 10;\n        }\n        return result;", "        long prod =\
    \ 1;\n        while (n > 0) {\n            long digit = n % 10;\n            if\
    \ (digit % 2 == 1) {\n                prod *= digit;\n            }\n        \
    \    n /= 10;\n        }\n        return prod;", "        long product = 1;\n\
    \        while (n > 0) {\n            long digit = n % 10;\n            if (digit\
    \ % 2 == 1) {\n                product *= digit;\n            }\n            n\
    \ /= 10;\n        }\n        return product;", "        long result = 1;\n   \
    \     while (n > 0) {\n            long digit = n % 10;\n            if (digit\
    \ % 2 == 1) {\n                result *= digit;\n            }\n            n\
    \ /= 10;\n        }\n        return result;", "        long prod = 1;\n      \
    \  while (n > 0) {\n            long digit = n % 10;\n            if (digit %\
    \ 2 == 1) {\n                prod *= digit;\n            }\n            n /= 10;\n\
    \        }\n        return prod;", "        long product = 1;\n        while (n\
    \ > 0) {\n            long digit = n % 10;\n            if (digit % 2 == 1) {\n\
    \                product *= digit;\n            }\n            n /= 10;\n    \
    \    }\n        return product;", "        long product = 1;\n        while (n\
    \ > 0) {\n            long digit = n % 10;\n            if (digit % 2 == 1) {\n\
    \                product *= digit;\n            }\n            n /= 10;\n    \
    \    }\n        return product;", "        long result = 1;\n        while (n\
    \ > 0) {\n            long digit = n % 10;\n            if (digit % 2 == 1) {\n\
    \                result *= digit;\n            }\n            n /= 10;\n     \
    \   }\n        return result;", "        long result = 1;\n        while (n >\
    \ 0) {\n            long digit = n % 10;\n            if (digit % 2 == 1) {\n\
    \                result *= digit;\n            }\n            n /= 10;\n     \
    \   }\n        return result;", "        long product = 1;\n        while (n >\
    \ 0) {\n            long digit = n % 10;\n            if (digit % 2 == 1) {\n\
    \                product *= digit;\n            }\n            n /= 10;\n    \
    \    }\n        return product;", "        long result = 1;\n        while (n\
    \ > 0) {\n            long digit = n % 10;\n            if (digit % 2 == 1) {\n\
    \                result *= digit;\n            }\n            n /= 10;\n     \
    \   }\n        return result;", "        long result = 1;\n        while (n >\
    \ 0) {\n            long digit = n % 10;\n            if (digit % 2 == 1) {\n\
    \                result *= digit;\n            }\n            n /= 10;\n     \
    \   }\n        return result;", "        long result = 1;\n        while (n >\
    \ 0) {\n            long digit = n % 10;\n            if (digit % 2 == 1) {\n\
    \                result *= digit;\n            }\n            n /= 10;\n     \
    \   }\n        return result;", "        long result = 1;\n        while (n >\
    \ 0) {\n            long digit = n % 10;\n            if (digit % 2 == 1) {\n\
    \                result *= digit;\n            }\n            n /= 10;\n     \
    \   }\n        return result;", "        long result = 1;\n        while (n >\
    \ 0) {\n            long digit = n % 10;\n            if (digit % 2 == 1) {\n\
    \                result *= digit;\n            }\n            n /= 10;\n     \
    \   }\n        return result;"]
stop_tokens:
- "\n    }\n"
