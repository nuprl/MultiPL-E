name: HumanEval_69_search
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a non-empty list of positive integers. Return\
  \ the greatest integer that is greater than \n    // zero, and has a frequency greater\
  \ than or equal to the value of the integer itself. \n    // The frequency of an\
  \ integer is the number of times it appears in the list.\n    // If no such a value\
  \ exist, return -1.\n    // Examples:\n    // >>> Search((new List<long>(new long[]{(long)4L,\
  \ (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n    // (2L)\n    // >>>\
  \ Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L, (long)3L,\
  \ (long)3L, (long)4L, (long)4L, (long)4L})))\n    // (3L)\n    // >>> Search((new\
  \ List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L, (long)4L})))\n \
  \   // (-1L)\n    public static long Search(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)5L, (long)5L, (long)5L, (long)5L, (long)1L}))) ==\
  \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)4L, (long)1L,\
  \ (long)4L, (long)1L, (long)4L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)3L, (long)3L}))) == (-1L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)8L, (long)8L, (long)8L, (long)8L, (long)8L, (long)8L,\
  \ (long)8L, (long)8L}))) == (8L));\n    Debug.Assert(Search((new List<long>(new\
  \ long[]{(long)2L, (long)3L, (long)3L, (long)2L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)2L, (long)7L, (long)8L, (long)8L, (long)4L, (long)8L,\
  \ (long)7L, (long)3L, (long)9L, (long)6L, (long)5L, (long)10L, (long)4L, (long)3L,\
  \ (long)6L, (long)7L, (long)1L, (long)7L, (long)4L, (long)10L, (long)8L, (long)1L})))\
  \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)2L,\
  \ (long)8L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new List<long>(new\
  \ long[]{(long)6L, (long)7L, (long)1L, (long)8L, (long)8L, (long)10L, (long)5L,\
  \ (long)8L, (long)5L, (long)3L, (long)10L}))) == (1L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)8L, (long)8L, (long)3L, (long)6L, (long)5L, (long)6L,\
  \ (long)4L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)6L,\
  \ (long)9L, (long)6L, (long)7L, (long)1L, (long)4L, (long)7L, (long)1L, (long)8L,\
  \ (long)8L, (long)9L, (long)8L, (long)10L, (long)10L, (long)8L, (long)4L, (long)10L,\
  \ (long)4L, (long)10L, (long)1L, (long)2L, (long)9L, (long)5L, (long)7L, (long)9L})))\
  \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L, (long)9L,\
  \ (long)10L, (long)1L, (long)3L}))) == (1L));\n    Debug.Assert(Search((new List<long>(new\
  \ long[]{(long)6L, (long)9L, (long)7L, (long)5L, (long)8L, (long)7L, (long)5L, (long)3L,\
  \ (long)7L, (long)5L, (long)10L, (long)10L, (long)3L, (long)6L, (long)10L, (long)2L,\
  \ (long)8L, (long)6L, (long)5L, (long)4L, (long)9L, (long)5L, (long)3L, (long)10L})))\
  \ == (5L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)1L}))) ==\
  \ (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)8L, (long)8L,\
  \ (long)10L, (long)6L, (long)4L, (long)3L, (long)5L, (long)8L, (long)2L, (long)4L,\
  \ (long)2L, (long)8L, (long)4L, (long)6L, (long)10L, (long)4L, (long)2L, (long)1L,\
  \ (long)10L, (long)2L, (long)1L, (long)1L, (long)5L}))) == (4L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)2L, (long)10L, (long)4L, (long)8L, (long)2L, (long)10L,\
  \ (long)5L, (long)1L, (long)2L, (long)9L, (long)5L, (long)5L, (long)6L, (long)3L,\
  \ (long)8L, (long)6L, (long)4L, (long)10L}))) == (2L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)1L, (long)6L, (long)10L, (long)1L, (long)6L, (long)9L,\
  \ (long)10L, (long)8L, (long)6L, (long)8L, (long)7L, (long)3L}))) == (1L));\n  \
  \  Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)2L, (long)4L,\
  \ (long)1L, (long)5L, (long)1L, (long)5L, (long)2L, (long)5L, (long)7L, (long)7L,\
  \ (long)7L, (long)3L, (long)10L, (long)1L, (long)5L, (long)4L, (long)2L, (long)8L,\
  \ (long)4L, (long)1L, (long)9L, (long)10L, (long)7L, (long)10L, (long)2L, (long)8L,\
  \ (long)10L, (long)9L, (long)4L}))) == (4L));\n    Debug.Assert(Search((new List<long>(new\
  \ long[]{(long)2L, (long)6L, (long)4L, (long)2L, (long)8L, (long)7L, (long)5L, (long)6L,\
  \ (long)4L, (long)10L, (long)4L, (long)6L, (long)3L, (long)7L, (long)8L, (long)8L,\
  \ (long)3L, (long)1L, (long)4L, (long)2L, (long)2L, (long)10L, (long)7L}))) == (4L));\n\
  \    Debug.Assert(Search((new List<long>(new long[]{(long)9L, (long)8L, (long)6L,\
  \ (long)10L, (long)2L, (long)6L, (long)10L, (long)2L, (long)7L, (long)8L, (long)10L,\
  \ (long)3L, (long)8L, (long)2L, (long)6L, (long)2L, (long)3L, (long)1L}))) == (2L));\n\
  \    Debug.Assert(Search((new List<long>(new long[]{(long)5L, (long)5L, (long)3L,\
  \ (long)9L, (long)5L, (long)6L, (long)3L, (long)2L, (long)8L, (long)5L, (long)6L,\
  \ (long)10L, (long)10L, (long)6L, (long)8L, (long)4L, (long)10L, (long)7L, (long)7L,\
  \ (long)10L, (long)8L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new\
  \ long[]{(long)10L}))) == (-1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)9L,\
  \ (long)7L, (long)7L, (long)2L, (long)4L, (long)7L, (long)2L, (long)10L, (long)9L,\
  \ (long)7L, (long)5L, (long)7L, (long)2L}))) == (2L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)5L, (long)4L, (long)10L, (long)2L, (long)1L, (long)1L,\
  \ (long)10L, (long)3L, (long)6L, (long)1L, (long)8L}))) == (1L));\n    Debug.Assert(Search((new\
  \ List<long>(new long[]{(long)7L, (long)9L, (long)9L, (long)9L, (long)3L, (long)4L,\
  \ (long)1L, (long)5L, (long)9L, (long)1L, (long)2L, (long)1L, (long)1L, (long)10L,\
  \ (long)7L, (long)5L, (long)6L, (long)7L, (long)6L, (long)7L, (long)7L, (long)6L})))\
  \ == (1L));\n    Debug.Assert(Search((new List<long>(new long[]{(long)3L, (long)10L,\
  \ (long)10L, (long)9L, (long)2L}))) == (-1L));\n    }\n\n}\n"
completions: ["        var dict = new Dictionary<long, long>();\n        foreach (var\
    \ item in lst) {\n            if (dict.ContainsKey(item)) {\n                dict[item]++;\n\
    \            } else {\n                dict[item] = 1;\n            }\n      \
    \  }\n        var max = -1L;\n        foreach (var item in dict) {\n         \
    \   if (item.Key <= item.Value && item.Key > max) {\n                max = item.Key;\n\
    \            }\n        }\n        return max;", "        // Your code goes here.\n\
    \        return 0;", "        // Your code goes here.\n        return -1;", " \
    \       // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ 0;", "        // Your code goes here.\n        return -1;", "        // Your\
    \ code goes here.\n        return -1;", "        // Your code goes here.\n   \
    \     return -1;", "        // Your code goes here.\n        return -1;", "  \
    \      // Your code goes here.\n        return 0;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ 0;", "        // Your code goes here.\n        return -1;", "        // Your\
    \ code goes here.\n        return -1;", "        var dict = new Dictionary<long,\
    \ long>();\n        foreach (var item in lst) {\n            if (dict.ContainsKey(item))\
    \ {\n                dict[item]++;\n            } else {\n                dict[item]\
    \ = 1;\n            }\n        }\n        var max = -1L;\n        foreach (var\
    \ item in dict) {\n            if (item.Key > 0 && item.Value >= item.Key && item.Key\
    \ > max) {\n                max = item.Key;\n            }\n        }\n      \
    \  return max;", "        // Your code goes here.\n        return -1;", "    \
    \    // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        long result\
    \ = -1;\n        Dictionary<long, long> dic = new Dictionary<long, long>();\n\
    \        foreach (long i in lst) {\n            if (dic.ContainsKey(i)) {\n  \
    \              dic[i]++;\n            } else {\n                dic.Add(i, 1);\n\
    \            }\n        }\n        foreach (long i in dic.Keys) {\n          \
    \  if (i > 0 && dic[i] >= i) {\n                result = i;\n            }\n \
    \       }\n        return result;", "        // Your code goes here.\n       \
    \ return -1;", "        // Your code goes here.\n        return 0;", "       \
    \ // Your code goes here.\n        return -1;", "        // Your code goes here.\n\
    \        return -1;", "        // Your code goes here.\n        return -1;", " \
    \       var dict = new Dictionary<long, long>();\n        foreach (var item in\
    \ lst) {\n            if (dict.ContainsKey(item)) {\n                dict[item]++;\n\
    \            } else {\n                dict[item] = 1;\n            }\n      \
    \  }\n        var max = -1L;\n        foreach (var item in dict) {\n         \
    \   if (item.Key > 0 && item.Value >= item.Key && item.Key > max) {\n        \
    \        max = item.Key;\n            }\n        }\n        return max;", "  \
    \      // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        // Your\
    \ code goes here.\n        return -1;", "        // Your code goes here.\n   \
    \     return -1;", "        // Your code goes here.\n        return 0;", "   \
    \     // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        // Your\
    \ code goes here.\n        return -1;", "        // Your code goes here.\n   \
    \     return 0;", "        // Your code goes here.\n        return -1;", "   \
    \     // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ 0;", "        // Your code goes here.\n        return -1;", "        var dict\
    \ = new Dictionary<long, long>();\n        foreach (var item in lst) {\n     \
    \       if (dict.ContainsKey(item)) {\n                dict[item]++;\n       \
    \     } else {\n                dict[item] = 1;\n            }\n        }\n  \
    \      long max = -1;\n        foreach (var item in dict) {\n            if (item.Key\
    \ <= item.Value && item.Key > max) {\n                max = item.Key;\n      \
    \      }\n        }\n        return max;", "        // Your code goes here.\n\
    \        return -1;", "        // Your code goes here.\n        return -1;", " \
    \       // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        // Your\
    \ code goes here.\n        return -1;", "        // Your code goes here.\n   \
    \     return -1;", "        // Your code goes here.\n        return -1;", "  \
    \      // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        // Your\
    \ code goes here.\n        return -1;", "        // Your code goes here.\n   \
    \     return 0;", "        // Your code goes here.\n        return -1;", "   \
    \     // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        // Your\
    \ code goes here.\n        return -1;", "        long result = -1;\n        Dictionary<long,\
    \ long> dict = new Dictionary<long, long>();\n        foreach (long i in lst)\
    \ {\n            if (dict.ContainsKey(i)) {\n                dict[i]++;\n    \
    \        } else {\n                dict[i] = 1;\n            }\n        }\n  \
    \      foreach (long i in dict.Keys) {\n            if (i > 0 && dict[i] >= i)\
    \ {\n                result = i;\n            }\n        }\n        return result;",
  "        Dictionary<long, long> freq = new Dictionary<long, long>();\n        foreach\
    \ (long i in lst) {\n            if (freq.ContainsKey(i)) {\n                freq[i]\
    \ += 1;\n            } else {\n                freq[i] = 1;\n            }\n \
    \       }\n        long max = -1;\n        foreach (long i in freq.Keys) {\n \
    \           if (i > 0 && freq[i] >= i && i > max) {\n                max = i;\n\
    \            }\n        }\n        return max;", "        // Your code goes here.\n\
    \        return -1;", "        // Your code goes here.\n        return -1;", " \
    \       // Your code goes here.\n        return 0;", "        // Your code goes\
    \ here.\n        return -1;", "        // >>> Search((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)2L, (long)2L, (long)3L, (long)1L})))\n        // (2L)\n    \
    \    // >>> Search((new List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)3L,\
    \ (long)3L, (long)3L, (long)4L, (long)4L, (long)4L})))\n        // (3L)\n    \
    \    // >>> Search((new List<long>(new long[]{(long)5L, (long)5L, (long)4L, (long)4L,\
    \ (long)4L})))\n        // (-1L)\n        // >>> Search((new List<long>(new long[]{(long)1L,\
    \ (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L,\
    \ (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L,\
    \ (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L,\
    \ (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L,\
    \ (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L,\
    \ (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L, (long)1L,\
    \ (long)1L, (long)1L, (long", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here\n        return 0;", "        // Your\
    \ code goes here.\n        return -1;", "        // Your code goes here.\n   \
    \     return -1;", "        // Your code goes here.\n        return -1;", "  \
    \      // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        // Your\
    \ code goes here.\n        return 0;", "        // Your code goes here.\n    \
    \    return -1;", "        // Your code goes here.\n        return 0;", "    \
    \    // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        // Your\
    \ code goes here.\n        return 0;", "        var d = new Dictionary<long, long>();\n\
    \        foreach (var i in lst) {\n            if (d.ContainsKey(i)) {\n     \
    \           d[i] += 1;\n            } else {\n                d[i] = 1;\n    \
    \        }\n        }\n        var max = -1L;\n        foreach (var k in d.Keys)\
    \ {\n            if (k <= d[k]) {\n                max = Math.Max(max, k);\n \
    \           }\n        }\n        return max;", "        // Your code goes here.\n\
    \        return -1;", "        // Your code goes here.\n        return -1;", " \
    \       var dict = new Dictionary<long, long>();\n        foreach (var item in\
    \ lst) {\n            if (dict.ContainsKey(item)) {\n                dict[item]++;\n\
    \            } else {\n                dict[item] = 1;\n            }\n      \
    \  }\n        long max = -1;\n        foreach (var item in dict) {\n         \
    \   if (item.Key > item.Value) {\n                continue;\n            }\n \
    \           if (item.Key > max) {\n                max = item.Key;\n         \
    \   }\n        }\n        return max;", "        // Your code goes here.\n   \
    \     return -1;", "        // Your code goes here.\n        return -1;", "  \
    \      // Your code goes here.\n        return -1;", "        var dict = new Dictionary<long,\
    \ long>();\n        foreach (var item in lst) {\n            if (dict.ContainsKey(item))\
    \ {\n                dict[item]++;\n            } else {\n                dict[item]\
    \ = 1;\n            }\n        }\n        var max = -1L;\n        foreach (var\
    \ item in dict) {\n            if (item.Key > 0 && item.Value >= item.Key && item.Key\
    \ > max) {\n                max = item.Key;\n            }\n        }\n      \
    \  return max;", "        // Your code goes here.\n        return -1;", "    \
    \    // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        var dict = new Dictionary<long, long>();\n\
    \        foreach (var item in lst) {\n            if (dict.ContainsKey(item))\
    \ {\n                dict[item]++;\n            } else {\n                dict[item]\
    \ = 1;\n            }\n        }\n        long max = -1;\n        foreach (var\
    \ item in dict) {\n            if (item.Key > 0 && item.Value >= item.Key && item.Key\
    \ > max) {\n                max = item.Key;\n            }\n        }\n      \
    \  return max;", "        // Your code goes here.\n        return -1;", "    \
    \    // Your code goes here.\n        return -1;", "        Dictionary<long, long>\
    \ d = new Dictionary<long, long>();\n        foreach (long i in lst) {\n     \
    \       if (d.ContainsKey(i)) {\n                d[i]++;\n            } else {\n\
    \                d[i] = 1;\n            }\n        }\n        long max = -1;\n\
    \        foreach (KeyValuePair<long, long> kvp in d) {\n            if (kvp.Key\
    \ > 0 && kvp.Value >= kvp.Key && kvp.Key > max) {\n                max = kvp.Key;\n\
    \            }\n        }\n        return max;", "        // Your code goes here.\n\
    \        return -1;", "        // Your code goes here.\n        return 0;", " \
    \       // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        var freq\
    \ = new Dictionary<long, long>();\n        foreach (var item in lst) {\n     \
    \       if (freq.ContainsKey(item)) {\n                freq[item]++;\n       \
    \     } else {\n                freq[item] = 1;\n            }\n        }\n  \
    \      long max = -1;\n        foreach (var item in freq) {\n            if (item.Key\
    \ > 0 && item.Value >= item.Key && item.Key > max) {\n                max = item.Key;\n\
    \            }\n        }\n        return max;", "        // Your code goes here.\n\
    \        long result = -1;\n        long max = lst.Max();\n        for (long i\
    \ = 1; i <= max; i++) {\n            if (lst.Count(x => x == i) >= i) {\n    \
    \            result = i;\n            }\n        }\n        return result;", " \
    \       // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return 0;", "        long result = -1;\n        // Your code\
    \ goes here.\n        return result;", "        // Your code goes here.\n    \
    \    return 0;", "        // Your code goes here.\n        return 0;", "     \
    \   // Your code goes here.\n        return -1;", "        // Your code goes here.\n\
    \        return -1;", "        // Your code goes here.\n        return 0;", " \
    \       // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        // Your\
    \ code goes here.\n        return -1;", "        // Your code goes here.\n   \
    \     return -1;", "        var dict = new Dictionary<long, long>();\n       \
    \ foreach (var i in lst) {\n            if (dict.ContainsKey(i)) {\n         \
    \       dict[i]++;\n            } else {\n                dict[i] = 1;\n     \
    \       }\n        }\n        var max = 0L;\n        foreach (var i in dict.Keys)\
    \ {\n            if (i > 0 && dict[i] >= i && i > max) {\n                max\
    \ = i;\n            }\n        }\n        return max == 0 ? -1 : max;", "    \
    \    // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ 0;", "        // Your code goes here.\n        return 0;", "        // Your\
    \ code goes here.\n        return -1;", "        // Your code goes here.\n   \
    \     return -1;", "        // Your code goes here.\n        return -1;", "  \
    \      // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code here\n        return 0;",
  "        // Your code here\n        return -1;", "        // Your code goes here.\n\
    \        return -1;", "        var frequencies = new Dictionary<long, long>();\n\
    \        foreach (var item in lst) {\n            if (frequencies.ContainsKey(item))\
    \ {\n                frequencies[item]++;\n            } else {\n            \
    \    frequencies[item] = 1;\n            }\n        }\n        var result = -1L;\n\
    \        foreach (var item in frequencies) {\n            if (item.Key > 0 &&\
    \ item.Value >= item.Key && item.Key > result) {\n                result = item.Key;\n\
    \            }\n        }\n        return result;", "        // Your code goes\
    \ here\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return 0;", "        // Your\
    \ code goes here.\n        return -1;", "        // Your code goes here.\n   \
    \     return -1;", "        // Your code goes here.\n        return -1;", "  \
    \      // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        // Your\
    \ code goes here.\n        return -1;", "        // Your code goes here.\n   \
    \     return -1;", "        // Your code goes here\n        return -1;", "   \
    \     // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        Dictionary<long, long> dict = new Dictionary<long,\
    \ long>();\n        foreach (long i in lst) {\n            if (dict.ContainsKey(i))\
    \ {\n                dict[i]++;\n            } else {\n                dict[i]\
    \ = 1;\n            }\n        }\n        long max = -1;\n        foreach (KeyValuePair<long,\
    \ long> kvp in dict) {\n            if (kvp.Key > 0 && kvp.Value >= kvp.Key &&\
    \ kvp.Key > max) {\n                max = kvp.Key;\n            }\n        }\n\
    \        return max;", "        // Your code goes here.\n        return 0;", " \
    \       // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        var dict = new Dictionary<long, long>();\n\
    \        foreach (var item in lst) {\n            if (dict.ContainsKey(item))\
    \ {\n                dict[item]++;\n            } else {\n                dict[item]\
    \ = 1;\n            }\n        }\n        var max = -1L;\n        foreach (var\
    \ item in dict) {\n            if (item.Key <= item.Value) {\n               \
    \ max = Math.Max(max, item.Key);\n            }\n        }\n        return max;",
  "        // Your code goes here.\n        Dictionary<long, long> dict = new Dictionary<long,\
    \ long>();\n        foreach (long i in lst) {\n            if (dict.ContainsKey(i))\
    \ {\n                dict[i]++;\n            } else {\n                dict[i]\
    \ = 1;\n            }\n        }\n        long max = -1;\n        foreach (long\
    \ i in dict.Keys) {\n            if (i > 0 && dict[i] >= i && i > max) {\n   \
    \             max = i;\n            }\n        }\n        return max;", "    \
    \    // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here\n        return -1;", "        // Your code goes here.\n        return\
    \ 0;", "        // Your code goes here.\n        return -1;", "        // Your\
    \ code goes here.\n        return -1;", "        var max = lst.Max();\n      \
    \  var counts = new Dictionary<long, long>();\n        foreach (var item in lst)\
    \ {\n            if (counts.ContainsKey(item)) {\n                counts[item]++;\n\
    \            } else {\n                counts[item] = 1;\n            }\n    \
    \    }\n        for (long i = max; i > 0; i--) {\n            if (counts.ContainsKey(i)\
    \ && counts[i] >= i) {\n                return i;\n            }\n        }\n\
    \        return -1;", "        // Your code goes here.\n        return 0;", " \
    \       // Your code goes here.\n        return -1;", "        var dict = new\
    \ Dictionary<long, long>();\n        foreach (var item in lst) {\n           \
    \ if (dict.ContainsKey(item)) {\n                dict[item] += 1;\n          \
    \  } else {\n                dict[item] = 1;\n            }\n        }\n     \
    \   long max = -1;\n        foreach (var item in dict) {\n            if (item.Key\
    \ <= item.Value) {\n                max = Math.Max(max, item.Key);\n         \
    \   }\n        }\n        return max;", "        var d = new Dictionary<long,\
    \ long>();\n        foreach (var i in lst) {\n            if (d.ContainsKey(i))\
    \ {\n                d[i] += 1;\n            } else {\n                d[i] =\
    \ 1;\n            }\n        }\n        var max = -1L;\n        foreach (var k\
    \ in d.Keys) {\n            if (k <= d[k]) {\n                max = Math.Max(max,\
    \ k);\n            }\n        }\n        return max;", "        var dict = new\
    \ Dictionary<long, long>();\n        foreach (var item in lst) {\n           \
    \ if (dict.ContainsKey(item)) {\n                dict[item]++;\n            }\
    \ else {\n                dict[item] = 1;\n            }\n        }\n        var\
    \ max = -1L;\n        foreach (var item in dict) {\n            if (item.Key <=\
    \ item.Value) {\n                max = Math.Max(max, item.Key);\n            }\n\
    \        }\n        return max;", "        // Your code goes here.\n        return\
    \ -1;", "        long result = -1;\n        long max = lst.Max();\n        for\
    \ (long i = max; i > 0; i--) {\n            if (lst.Count(x => x == i) >= i) {\n\
    \                result = i;\n                break;\n            }\n        }\n\
    \        return result;", "        // Your code goes here.\n        return -1;",
  "        // Your code goes here.\n        return -1;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        var dict\
    \ = new Dictionary<long, long>();\n        foreach (var i in lst) {\n        \
    \    if (dict.ContainsKey(i)) {\n                dict[i]++;\n            } else\
    \ {\n                dict[i] = 1;\n            }\n        }\n        long max\
    \ = -1;\n        foreach (var i in dict) {\n            if (i.Key > 0 && i.Value\
    \ >= i.Key && i.Key > max) {\n                max = i.Key;\n            }\n  \
    \      }\n        return max;", "        // Your code goes here.\n        return\
    \ 0;", "        // Your code goes here.\n        return -1;", "        var dict\
    \ = new Dictionary<long, long>();\n        foreach (var item in lst) {\n     \
    \       if (dict.ContainsKey(item)) {\n                dict[item]++;\n       \
    \     } else {\n                dict[item] = 1;\n            }\n        }\n  \
    \      var result = -1L;\n        foreach (var item in dict) {\n            if\
    \ (item.Key > 0 && item.Value >= item.Key && item.Key > result) {\n          \
    \      result = item.Key;\n            }\n        }\n        return result;",
  "        // Your code goes here.\n        return 0;", "        // Your code goes\
    \ here\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        // Your\
    \ code goes here.\n        return -1;", "        // Your code goes here.\n   \
    \     return -1;", '        // Your code goes here', "        var dict = new Dictionary<long,\
    \ long>();\n        foreach (var x in lst) {\n            if (dict.ContainsKey(x))\
    \ {\n                dict[x] += 1;\n            } else {\n                dict[x]\
    \ = 1;\n            }\n        }\n        long max = -1;\n        foreach (var\
    \ x in dict.Keys) {\n            if (x <= dict[x]) {\n                max = Math.Max(max,\
    \ x);\n            }\n        }\n        return max;", "        // Your code goes\
    \ here.\n        return -1;", "        // Your code goes here.\n        return\
    \ -1;", "        // Your code goes here.\n        return -1;", "        // Your\
    \ code goes here\n        return -1;", "        // Your code goes here.\n    \
    \    return -1;", "        var freq = new Dictionary<long, long>();\n        foreach\
    \ (var item in lst) {\n            if (freq.ContainsKey(item)) {\n           \
    \     freq[item]++;\n            } else {\n                freq[item] = 1;\n \
    \           }\n        }\n        var result = -1L;\n        foreach (var item\
    \ in freq) {\n            if (item.Key > 0 && item.Value >= item.Key && item.Key\
    \ > result) {\n                result = item.Key;\n            }\n        }\n\
    \        return result;"]
stop_tokens:
- "\n    }\n"
