name: HumanEval_61_correct_bracketing
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // brackets is a string of \"(\" and \")\".\n    // return true\
  \ if every opening bracket has a corresponding closing bracket.\n    // >>> CorrectBracketing((\"\
  (\"))\n    // (false)\n    // >>> CorrectBracketing((\"()\"))\n    // (true)\n \
  \   // >>> CorrectBracketing((\"(()())\"))\n    // (true)\n    // >>> CorrectBracketing((\"\
  )(()\"))\n    // (false)\n    public static bool CorrectBracketing(string brackets)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CorrectBracketing((\"\
  ()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"(()())\")) == (true));\n\
  \    Debug.Assert(CorrectBracketing((\"()()(()())()\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
  ()()((()()())())(()()(()))\")) == (true));\n    Debug.Assert(CorrectBracketing((\"\
  ((()())))\")) == (false));\n    Debug.Assert(CorrectBracketing((\")(()\")) == (false));\n\
  \    Debug.Assert(CorrectBracketing((\"(\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
  ((((\")) == (false));\n    Debug.Assert(CorrectBracketing((\")\")) == (false));\n\
  \    Debug.Assert(CorrectBracketing((\"(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"\
  ()()(()())())(()\")) == (false));\n    Debug.Assert(CorrectBracketing((\"()()(()())()))()\"\
  )) == (false));\n    }\n\n}\n"
completions: ["        int count = 0;\n        foreach (char c in brackets) {\n  \
    \          if (c == '(') {\n                count++;\n            } else if (c\
    \ == ')') {\n                count--;\n            }\n            if (count <\
    \ 0) {\n                return false;\n            }\n        }\n        return\
    \ count == 0;", "        int count = 0;\n        foreach (char c in brackets)\
    \ {\n            if (c == '(') {\n                count++;\n            } else\
    \ if (c == ')') {\n                count--;\n            }\n            if (count\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ count == 0;", "        int count = 0;\n        foreach (char c in brackets)\
    \ {\n            if (c == '(') {\n                count++;\n            } else\
    \ if (c == ')') {\n                count--;\n            }\n            if (count\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ count == 0;", "        int count = 0;\n        foreach (char c in brackets)\
    \ {\n            if (c == '(') {\n                count++;\n            } else\
    \ if (c == ')') {\n                count--;\n            }\n            if (count\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ count == 0;", "        int count = 0;\n        foreach (char c in brackets)\
    \ {\n            if (c == '(') {\n                count++;\n            } else\
    \ if (c == ')') {\n                count--;\n            }\n            if (count\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ count == 0;", "        int count = 0;\n        foreach (char c in brackets)\
    \ {\n            if (c == '(') {\n                count++;\n            } else\
    \ if (c == ')') {\n                count--;\n            }\n            if (count\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ count == 0;", "        int count = 0;\n        foreach (char c in brackets)\
    \ {\n            if (c == '(') {\n                count++;\n            } else\
    \ if (c == ')') {\n                count--;\n            }\n            if (count\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ count == 0;", "        int count = 0;\n        foreach (char c in brackets)\
    \ {\n            if (c == '(') {\n                count++;\n            } else\
    \ if (c == ')') {\n                count--;\n            }\n            if (count\
    \ < 0) {\n                return false;\n            }\n        }\n        return\
    \ count == 0;", "        int count = 0;\n        foreach (char c in brackets)\
    \ {\n            if (c == '(') {\n                count += 1;\n            } else\
    \ if (c == ')') {\n                count -= 1;\n            }\n            if\
    \ (count < 0) {\n                return false;\n            }\n        }\n   \
    \     return count == 0;", "        int count = 0;\n        foreach (char c in\
    \ brackets) {\n            if (c == '(') {\n                count++;\n       \
    \     } else if (c == ')') {\n                count--;\n            }\n      \
    \      if (count < 0) {\n                return false;\n            }\n      \
    \  }\n        return count == 0;", "        int count = 0;\n        foreach (char\
    \ c in brackets) {\n            if (c == '(') {\n                count++;\n  \
    \          } else if (c == ')') {\n                count--;\n            }\n \
    \           if (count < 0) {\n                return false;\n            }\n \
    \       }\n        return count == 0;", "        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count +=\
    \ 1;\n            } else if (c == ')') {\n                count -= 1;\n      \
    \      }\n            if (count < 0) {\n                return false;\n      \
    \      }\n        }\n        return count == 0;", "        int count = 0;\n  \
    \      foreach (char c in brackets) {\n            if (c == '(') {\n         \
    \       count++;\n            } else if (c == ')') {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;", "        int count = 0;\n\
    \        foreach (char c in brackets) {\n            if (c == '(') {\n       \
    \         count++;\n            } else if (c == ')') {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;", "        int count = 0;\n\
    \        foreach (char c in brackets) {\n            if (c == '(') {\n       \
    \         count++;\n            } else if (c == ')') {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;", "        int count = 0;\n\
    \        foreach (char c in brackets) {\n            if (c == '(') {\n       \
    \         count++;\n            } else if (c == ')') {\n                count--;\n\
    \            }\n            if (count < 0) {\n                return false;\n\
    \            }\n        }\n        return count == 0;", "        int count = 0;\n\
    \        foreach (char c in brackets) {\n            if (c == '(') count++;\n\
    \            else if (c == ')') count--;\n            if (count < 0) return false;\n\
    \        }\n        return count == 0;", "        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count++;\n\
    \            } else if (c == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;", "        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count++;\n\
    \            } else if (c == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;", "        int count = 0;\n        foreach\
    \ (char c in brackets) {\n            if (c == '(') {\n                count++;\n\
    \            } else if (c == ')') {\n                count--;\n            }\n\
    \            if (count < 0) {\n                return false;\n            }\n\
    \        }\n        return count == 0;"]
stop_tokens:
- "\n    }\n"
