name: HumanEval_127_intersection
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given two intervals,\n    // where each interval is\
  \ a pair of integers. For example, interval = (start, end) = (1, 2).\n    // The\
  \ given intervals are closed which means that the interval (start, end)\n    //\
  \ includes both start and end.\n    // For each given interval, it is assumed that\
  \ its start is less or equal its end.\n    // Your task is to determine whether\
  \ the length of intersection of these two \n    // intervals is a prime number.\n\
  \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  \
  \  // which its length is 1, which not a prime number.\n    // If the length of\
  \ the intersection is a prime number, return \"YES\",\n    // otherwise, return\
  \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    // [input/output]\
  \ samples:\n    // >>> Intersection((Tuple.Create(1L, 2L)), (Tuple.Create(2L, 3L)))\n\
  \    // (\"NO\")\n    // >>> Intersection((Tuple.Create(-1L, 1L)), (Tuple.Create(0L,\
  \ 4L)))\n    // (\"NO\")\n    // >>> Intersection((Tuple.Create(-3L, -1L)), (Tuple.Create(-5L,\
  \ 5L)))\n    // (\"YES\")\n    public static string Intersection(Tuple<long, long>\
  \ interval1, Tuple<long, long> interval2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(2L, 3L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-1L,\
  \ 1L)), (Tuple.Create(0L, 4L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-3L,\
  \ -1L)), (Tuple.Create(-5L, 5L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L,\
  \ 2L)), (Tuple.Create(-4L, 0L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-11L,\
  \ 2L)), (Tuple.Create(-1L, -1L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(3L, 5L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(1L, 2L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L,\
  \ -2L)), (Tuple.Create(-3L, -2L))).Equals((\"NO\")));\n    }\n\n}\n"
completions: ["        // your code here\n        return \"\";", "        long start\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) {\n            return \"NO\";\n\
    \        }\n        long length = end - start + 1;\n        if (length == 1) {\n\
    \            return \"NO\";\n        }\n        if (length == 2) {\n         \
    \   return \"YES\";\n        }\n        for (long i = 2; i * i <= length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        long\
    \ length = end - start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\"\
    ;", "        // your code here\n        return \"\";", "        // your code here\n\
    \        return \"\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        var start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        var end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        var\
    \ length = end - start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\"\
    ;", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n      \
    \  long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start >\
    \ end) {\n            return \"NO\";\n        }\n        long length = end - start\
    \ + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\";", "        // your\
    \ code here\n        return \"\";", "        // Your code here\n        return\
    \ \"\";", "        // your code here\n        return \"\";", "        long start\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) {\n            return \"NO\";\n\
    \        }\n        long length = end - start + 1;\n        if (length == 1) {\n\
    \            return \"NO\";\n        }\n        if (length == 2) {\n         \
    \   return \"YES\";\n        }\n        for (long i = 2; i * i <= length; i++)\
    \ {\n            if (length % i == 0) {\n                return \"NO\";\n    \
    \        }\n        }\n        return \"YES\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "        // your code here\n\
    \        return \"\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        // your code here\n        long\
    \ start = Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) return \"NO\";\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        // your code here\n        return\
    \ \"\";", "        var x = interval1.Item1;\n        var y = interval1.Item2;\n\
    \        var a = interval2.Item1;\n        var b = interval2.Item2;\n        var\
    \ start = Math.Max(x, a);\n        var end = Math.Min(y, b);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        var length = end -\
    \ start + 1;\n        if (length == 1) {\n            return \"NO\";\n       \
    \ }\n        if (length == 2) {\n            return \"YES\";\n        }\n    \
    \    var isPrime = true;\n        for (var i = 2; i < length; i++) {\n       \
    \     if (length % i == 0) {\n                isPrime = false;\n             \
    \   break;\n            }\n        }\n        return isPrime ? \"YES\" : \"NO\"\
    ;", "        // your code here\n        return \"\";", "        // find the intersection\n\
    \        long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end)\
    \ {\n            return \"NO\";\n        }\n        // find the length of the\
    \ intersection\n        long length = end - start + 1;\n        // check if the\
    \ length is prime\n        if (IsPrime(length)) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";"]
stop_tokens:
- "\n    }\n"
