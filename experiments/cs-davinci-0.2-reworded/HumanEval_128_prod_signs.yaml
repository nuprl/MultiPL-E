name: HumanEval_128_prod_signs
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list arr of integers and you need to return\n\
  \    // sum of magnitudes of integers multiplied by product of all signs\n    //\
  \ of each number in the list, represented by 1, -1 or 0.\n    // Note: return null\
  \ for empty arr.\n    // Example:\n    // >>> ProdSigns((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)2L, (long)-4L})))\n    // 9L\n    // >>> ProdSigns((new List<long>(new\
  \ long[]{(long)0L, (long)1L})))\n    // 0L\n    // >>> ProdSigns((new List<long>()))\n\
  \    // null\n    public static Nullable<long> ProdSigns(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ProdSigns((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)2L, (long)-4L}))).Equals(-9L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)0L, (long)1L}))).Equals(0L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)2L, (long)3L, (long)-1L, (long)1L}))).Equals(-10L));\n    Debug.Assert(ProdSigns((new\
  \ List<long>())).Equals(null));\n    Debug.Assert(ProdSigns((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)1L, (long)2L, (long)-1L, (long)-1L, (long)9L}))).Equals(20L));\n\
  \    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L, (long)1L, (long)-1L,\
  \ (long)1L}))).Equals(4L));\n    Debug.Assert(ProdSigns((new List<long>(new long[]{(long)-1L,\
  \ (long)1L, (long)1L, (long)1L}))).Equals(-4L));\n    Debug.Assert(ProdSigns((new\
  \ List<long>(new long[]{(long)-1L, (long)1L, (long)1L, (long)0L}))).Equals(0L));\n\
  \    }\n\n}\n"
completions: ["        long sum = 0;\n        long prod = 1;\n        foreach (long\
    \ x in arr) {\n            if (x > 0) {\n                sum += x;\n         \
    \       prod *= 1;\n            } else if (x < 0) {\n                sum += -x;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        if (prod == 0) {\n            return null;\n\
    \        }\n        return sum * prod;", "        // Your code goes here.\n  \
    \      return null;", "        // Your code goes here\n        return null;",
  "        long prod = 1;\n        long sum = 0;\n        foreach (long i in arr)\
    \ {\n            if (i > 0) {\n                prod *= 1;\n                sum\
    \ += i;\n            } else if (i < 0) {\n                prod *= -1;\n      \
    \          sum += -i;\n            } else {\n                prod *= 0;\n    \
    \        }\n        }\n        if (arr.Count == 0) {\n            return null;\n\
    \        }\n        return sum * prod;", "        if (arr.Count == 0) {\n    \
    \        return null;\n        }\n        long sum = 0;\n        long prod = 1;\n\
    \        foreach (long i in arr) {\n            if (i > 0) {\n               \
    \ sum += i;\n                prod *= 1;\n            } else if (i < 0) {\n   \
    \             sum += -i;\n                prod *= -1;\n            } else {\n\
    \                prod *= 0;\n            }\n        }\n        return sum * prod;",
  "        long sum = 0;\n        long prod = 1;\n        foreach (long num in arr)\
    \ {\n            if (num > 0) {\n                sum += num;\n               \
    \ prod *= 1;\n            } else if (num < 0) {\n                sum += -num;\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        if (prod == 0) {\n            return 0;\n \
    \       }\n        return sum * prod;", "        if (arr.Count == 0) {\n     \
    \       return null;\n        }\n        long sum = 0;\n        long prod = 1;\n\
    \        foreach (long i in arr) {\n            sum += Math.Abs(i);\n        \
    \    if (i > 0) {\n                prod *= 1;\n            } else if (i < 0) {\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        return sum * prod;", "        long sum = 0;\n\
    \        long prod = 1;\n        foreach (long x in arr) {\n            sum +=\
    \ Math.Abs(x);\n            if (x > 0) {\n                prod *= 1;\n       \
    \     } else if (x < 0) {\n                prod *= -1;\n            } else {\n\
    \                prod *= 0;\n            }\n        }\n        if (arr.Count ==\
    \ 0) {\n            return null;\n        }\n        return sum * prod;", "  \
    \      if (arr.Count == 0) {\n            return null;\n        }\n        long\
    \ sum = 0;\n        long prod = 1;\n        foreach (long x in arr) {\n      \
    \      if (x > 0) {\n                sum += x;\n                prod *= 1;\n \
    \           } else if (x < 0) {\n                sum += -x;\n                prod\
    \ *= -1;\n            } else {\n                prod *= 0;\n            }\n  \
    \      }\n        return sum * prod;", "        // Your code goes here\n     \
    \   return null;", "        long prod = 1;\n        long sum = 0;\n        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        foreach (long\
    \ i in arr) {\n            if (i > 0) {\n                prod *= 1;\n        \
    \    } else if (i < 0) {\n                prod *= -1;\n            } else {\n\
    \                prod *= 0;\n            }\n            sum += Math.Abs(i);\n\
    \        }\n        return sum * prod;", "        long prod = 1;\n        long\
    \ sum = 0;\n        foreach (long item in arr) {\n            if (item > 0) {\n\
    \                prod *= 1;\n                sum += item;\n            } else\
    \ if (item < 0) {\n                prod *= -1;\n                sum += -item;\n\
    \            } else {\n                prod *= 0;\n            }\n        }\n\
    \        if (arr.Count == 0) {\n            return null;\n        }\n        return\
    \ sum * prod;", "        if (arr.Count == 0) return null;\n        long sum =\
    \ 0;\n        long prod = 1;\n        foreach (long x in arr) {\n            sum\
    \ += Math.Abs(x);\n            if (x > 0) prod *= 1;\n            else if (x <\
    \ 0) prod *= -1;\n            else prod *= 0;\n        }\n        return sum *\
    \ prod;", "        // Your code goes here.\n        return null;", "        if\
    \ (arr.Count == 0) {\n            return null;\n        }\n        long sum =\
    \ 0;\n        long prod = 1;\n        foreach (long x in arr) {\n            if\
    \ (x == 0) {\n                continue;\n            }\n            sum += Math.Abs(x);\n\
    \            prod *= Math.Sign(x);\n        }\n        return sum * prod;", '        return
    null;', "        if (arr.Count == 0) {\n            return null;\n        }\n\
    \        long prod = 1;\n        long sum = 0;\n        foreach (long num in arr)\
    \ {\n            if (num > 0) {\n                prod *= 1;\n            } else\
    \ if (num < 0) {\n                prod *= -1;\n            } else {\n        \
    \        prod *= 0;\n            }\n            sum += Math.Abs(num);\n      \
    \  }\n        return prod * sum;", "        if (arr.Count == 0) {\n          \
    \  return null;\n        }\n        long sum = 0;\n        long prod = 1;\n  \
    \      foreach (long x in arr) {\n            sum += Math.Abs(x);\n          \
    \  if (x > 0) {\n                prod *= 1;\n            } else if (x < 0) {\n\
    \                prod *= -1;\n            } else {\n                prod *= 0;\n\
    \            }\n        }\n        return sum * prod;", "        if (arr.Count\
    \ == 0) {\n            return null;\n        }\n        long sum = 0;\n      \
    \  long prod = 1;\n        foreach (long x in arr) {\n            sum += Math.Abs(x);\n\
    \            if (x > 0) {\n                prod *= 1;\n            } else if (x\
    \ < 0) {\n                prod *= -1;\n            } else {\n                prod\
    \ *= 0;\n            }\n        }\n        return sum * prod;", "        // Your\
    \ code goes here.\n        return null;"]
stop_tokens:
- "\n    }\n"
