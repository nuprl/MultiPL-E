name: HumanEval_161_solve
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a string s.\n    // if s[i] is a letter, reverse\
  \ its case from lower to upper or vise versa, \n    // otherwise keep it as it is.\n\
  \    // If the string contains no letters, reverse the string.\n    // The function\
  \ should return the resulted string.\n    // Examples\n    // >>> Solve((\"1234\"\
  ))\n    // (\"4321\")\n    // >>> Solve((\"ab\"))\n    // (\"AB\")\n    // >>> Solve((\"\
  #a@C\"))\n    // (\"#A@c\")\n    public static string Solve(string s) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Solve((\"\
  AsDf\")).Equals((\"aSdF\")));\n    Debug.Assert(Solve((\"1234\")).Equals((\"4321\"\
  )));\n    Debug.Assert(Solve((\"ab\")).Equals((\"AB\")));\n    Debug.Assert(Solve((\"\
  #a@C\")).Equals((\"#A@c\")));\n    Debug.Assert(Solve((\"#AsdfW^45\")).Equals((\"\
  #aSDFw^45\")));\n    Debug.Assert(Solve((\"#6@2\")).Equals((\"2@6#\")));\n    Debug.Assert(Solve((\"\
  #$a^D\")).Equals((\"#$A^d\")));\n    Debug.Assert(Solve((\"#ccc\")).Equals((\"#CCC\"\
  )));\n    }\n\n}\n"
completions: ["        // Your code here\n        return \"\";", "        string result\
    \ = \"\";\n        bool hasLetter = false;\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            if (char.IsLetter(s[i])) {\n                hasLetter =\
    \ true;\n                result += char.IsUpper(s[i]) ? char.ToLower(s[i]) : char.ToUpper(s[i]);\n\
    \            } else {\n                result += s[i];\n            }\n      \
    \  }\n        if (!hasLetter) {\n            result = new string(result.Reverse().ToArray());\n\
    \        }\n        return result;", "        // Your code here\n        return\
    \ \"\";", "        // Your code here\n        return \"\";", "        // Your\
    \ code here\n        return \"\";", "        // Your code goes here\n        return\
    \ \"\";", "        string result = \"\";\n        bool hasLetter = false;\n  \
    \      for (int i = 0; i < s.Length; i++) {\n            if (char.IsLetter(s[i]))\
    \ {\n                hasLetter = true;\n                if (char.IsUpper(s[i]))\
    \ {\n                    result += char.ToLower(s[i]);\n                } else\
    \ {\n                    result += char.ToUpper(s[i]);\n                }\n  \
    \          } else {\n                result += s[i];\n            }\n        }\n\
    \        if (!hasLetter) {\n            result = new string(result.Reverse().ToArray());\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  return \"\";", "        // Write your code here\n        return \"\";", " \
    \       // Your code goes here\n        return \"\";", "        if (s.Any(char.IsLetter))\
    \ {\n            return new string(s.Select(c => char.IsLetter(c) ? char.IsUpper(c)\
    \ ? char.ToLower(c) : char.ToUpper(c) : c).ToArray());\n        } else {\n   \
    \         return new string(s.Reverse().ToArray());\n        }", "        // Your\
    \ code goes here.\n        return \"\";", "        // Your code goes here\n  \
    \      return null;", '        return "";', "        // Write your code here\n\
    \        return \"\";", "        // Write your code here\n        return \"\";",
  "        // Your code goes here\n        return \"\";", "        // Your code goes\
    \ here\n        return \"\";", "        if (s.Any(char.IsLetter)) {\n        \
    \    return new string(s.Select(c => char.IsLetter(c) ? char.IsUpper(c) ? char.ToLower(c)\
    \ : char.ToUpper(c) : c).ToArray());\n        } else {\n            return new\
    \ string(s.Reverse().ToArray());\n        }", "        // Your code goes here\n\
    \        return \"\";"]
stop_tokens:
- "\n    }\n"
