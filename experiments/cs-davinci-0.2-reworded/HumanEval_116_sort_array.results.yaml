language: cs
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(\"X\"), new HexComparer()).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8e9xvroh.cs(20,54): error CS0246: The type or namespace name ''HexComparer''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            var aOnes = CountOnes(a);\n
    \           var bOnes = CountOnes(b);\n            if (aOnes == bOnes) {\n                return
    a.CompareTo(b);\n            }\n            return aOnes.CompareTo(bOnes);\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4q6ykjwz.cs(21,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmp4q6ykjwz.cs(22,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Write your code here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85865843783549b7b363fe3c59921c4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85865843783549b7b363fe3c59921c4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(\"X\").Count(c => c == '1')).ThenBy(x
    => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2254339d4374cfe8f95a6414430b197>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2254339d4374cfe8f95a6414430b197>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var ones = new Dictionary<long, int>();\n        foreach (var
    n in arr) {\n            var count = 0;\n            for (var i = 0; i < 64; i++)
    {\n                if ((n & (1L << i)) != 0) {\n                    count++;\n
    \               }\n            }\n            ones[n] = count;\n        }\n        arr.Sort((a,
    b) => {\n            var c = ones[a].CompareTo(ones[b]);\n            if (c !=
    0) {\n                return c;\n            }\n            return a.CompareTo(b);\n
    \       });\n        return arr;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <098d6d9147234680a514f2aaad6eb4b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <098d6d9147234680a514f2aaad6eb4b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            int aOnes = CountOnes(a);\n
    \           int bOnes = CountOnes(b);\n            if (aOnes == bOnes) {\n                return
    a.CompareTo(b);\n            }\n            return aOnes.CompareTo(bOnes);\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_dur9sxy.cs(21,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmp_dur9sxy.cs(22,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var sorted = arr.OrderBy(x => x.ToString(\"X\").Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n        return sorted;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55c828f20fbf429189560588709fe4a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55c828f20fbf429189560588709fe4a9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            int aOnes = CountOnes(a);\n
    \           int bOnes = CountOnes(b);\n            if (aOnes == bOnes) {\n                return
    (int)a - (int)b;\n            }\n            return aOnes - bOnes;\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphpsnni5u.cs(21,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmphpsnni5u.cs(22,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> sorted = new List<long>();\n        List<long> sorted2
    = new List<long>();\n        List<long> sorted3 = new List<long>();\n        List<long>
    sorted4 = new List<long>();\n        List<long> sorted5 = new List<long>();\n
    \       List<long> sorted6 = new List<long>();\n        List<long> sorted7 = new
    List<long>();\n        List<long> sorted8 = new List<long>();\n        List<long>
    sorted9 = new List<long>();\n        List<long> sorted10 = new List<long>();\n
    \       List<long> sorted11 = new List<long>();\n        List<long> sorted12 =
    new List<long>();\n        List<long> sorted13 = new List<long>();\n        List<long>
    sorted14 = new List<long>();\n        List<long> sorted15 = new List<long>();\n
    \       List<long> sorted16 = new List<long>();\n        List<long> sorted17 =
    new List<long>();\n        List<long> sorted18 = new List<long>();\n        List<long>
    sorted19 = new List<long>();\n        List<long> sorted20 = new List<long>();\n
    \       List<long> sorted21 = new List<long>();\n        List<long> sorted22 =
    new List<long>();\n        List<long> sorted23 = new List<long>();\n        List<long>
    sorted24 = new List<long>();\n        List<long> sorted25 = new List<long>();\n
    \       List<long> sorted26 = new List<long>();\n        List<long> sorted27 =
    new List<long>();\n        List<long> sorted28 = new List<long>();\n        List<long>
    sorted29 = new List<long>();\n        List<long> sorted30 = new List<long>();\n
    \       List<long> sorted31 = new List<long>();\n        List<long> sorted32 =
    new List<long>();\n        List<long> sorted33 = new List<long>();\n        List<long>
    sorted34 = new List<long>();\n        List\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp72f8texr.cs(54,13): error CS1002: ; expected

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        // return arr.OrderBy(x => x.ToString(\"X\").Count(c
    => c == '1')).ThenBy(x => x).ToList();\n        return arr.OrderBy(x => Convert.ToString(x,
    2).Count(c => c == '1')).ThenBy(x => x).ToList();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ac67c5d9088d4b4da4aebd5a5dbad5cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ac67c5d9088d4b4da4aebd5a5dbad5cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((x, y) => {\n            int xOnes = CountOnes(x);\n
    \           int yOnes = CountOnes(y);\n            if (xOnes == yOnes) {\n                return
    (int)x - (int)y;\n            }\n            return xOnes - yOnes;\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9gvbe43r.cs(21,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmp9gvbe43r.cs(22,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => CountOnes(x)).ThenBy(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplh5lir1m.cs(20,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => CountOnes(x)).ThenBy(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplh5lir1m.cs(20,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => CountOnes(x)).ThenBy(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplh5lir1m.cs(20,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Sort the list by the number of ones in the binary representation
    of the number\n        // and then by the decimal value.\n        arr.Sort((a,
    b) => {\n            var aBin = Convert.ToString(a, 2);\n            var bBin
    = Convert.ToString(b, 2);\n            var aOnes = aBin.Count(c => c == '1');\n
    \           var bOnes = bBin.Count(c => c == '1');\n            if (aOnes == bOnes)
    {\n                return a.CompareTo(b);\n            }\n            return aOnes.CompareTo(bOnes);\n
    \       });\n        return arr;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b0b6108c4874ccabda8a5439206560c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b0b6108c4874ccabda8a5439206560c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(\"X\").Count(y => y == '1')).ThenBy(x
    => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <982404bd4cf745adaed638a65a7f7563>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <982404bd4cf745adaed638a65a7f7563>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(\"X\"), new HexComparer()).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8e9xvroh.cs(20,54): error CS0246: The type or namespace name ''HexComparer''
    could not be found (are you missing a using directive or an assembly reference?)

    '
  timestamp: 1659794693
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            int aOnes = CountOnes(a);\n
    \           int bOnes = CountOnes(b);\n            if (aOnes == bOnes) {\n                return
    a.CompareTo(b);\n            }\n            return aOnes.CompareTo(bOnes);\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_dur9sxy.cs(21,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmp_dur9sxy.cs(22,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(\"B\").Count(c => c == '1')).ThenBy(x
    => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Format specifier was invalid.\n
    \ at System.Number.NumberToString (System.Text.ValueStringBuilder& sb, System.Number+NumberBuffer&
    number, System.Char format, System.Int32 nMaxDigits, System.Globalization.NumberFormatInfo
    info, System.Boolean isDecimal) [0x001fb] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.FormatInt64 (System.Int64 value, System.ReadOnlySpan`1[T]
    format, System.IFormatProvider provider) [0x00094] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.ToString (System.String format) [0x00008] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<SortArray>b__0_0 (System.Int64 x) [0x00000] in <643d230506dc44b3af3b96c6b04fee4a>:0
    \n  at System.Linq.EnumerableSorter`2[TElement,TKey].ComputeKeys (TElement[] elements,
    System.Int32 count) [0x00010] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.EnumerableSorter`1[TElement].ComputeMap
    (TElement[] elements, System.Int32 count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.EnumerableSorter`1[TElement].Sort (TElement[] elements, System.Int32
    count) [0x00000] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.OrderedEnumerable`1[TElement].SortedMap
    (System.Linq.Buffer`1[TElement] buffer) [0x00006] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.OrderedEnumerable`1[TElement].ToList () [0x0001f] in <e540098dd111461e919c5863f6975c29>:0
    \n  at System.Linq.Enumerable.ToList[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source) [0x0001f] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.SortArray
    (System.Collections.Generic.List`1[T] arr) [0x0004a] in <643d230506dc44b3af3b96c6b04fee4a>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <643d230506dc44b3af3b96c6b04fee4a>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.FormatException: Format specifier
    was invalid.\n  at System.Number.NumberToString (System.Text.ValueStringBuilder&
    sb, System.Number+NumberBuffer& number, System.Char format, System.Int32 nMaxDigits,
    System.Globalization.N"
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            var aBits = Convert.ToString(a,
    2).Count(c => c == '1');\n            var bBits = Convert.ToString(b, 2).Count(c
    => c == '1');\n            if (aBits == bBits) {\n                return a.CompareTo(b);\n
    \           }\n            return aBits.CompareTo(bBits);\n        });\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <785137115afa4915aaae872ee0db54e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <785137115afa4915aaae872ee0db54e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            int aOnes = CountOnes(a);\n
    \           int bOnes = CountOnes(b);\n            if (aOnes == bOnes) {\n                return
    a.CompareTo(b);\n            }\n            return aOnes.CompareTo(bOnes);\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_dur9sxy.cs(21,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmp_dur9sxy.cs(22,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(\"X\").Count(c => c == '1')).ThenBy(x
    => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2254339d4374cfe8f95a6414430b197>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2254339d4374cfe8f95a6414430b197>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => CountOnes(x)).ThenBy(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplh5lir1m.cs(20,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            var aBits = BitCount(a);\n            var
    bBits = BitCount(b);\n            if (aBits == bBits) {\n                return
    a.CompareTo(b);\n            }\n            return aBits.CompareTo(bBits);\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgj6tjlel.cs(21,25): error CS0103: The name ''BitCount'' does not exist
    in the current context

    /tmp/tmpgj6tjlel.cs(22,25): error CS0103: The name ''BitCount'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => CountOnes(x)).ThenBy(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplh5lir1m.cs(20,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            int aOnes = CountOnes(a);\n
    \           int bOnes = CountOnes(b);\n            if (aOnes == bOnes) {\n                return
    a.CompareTo(b);\n            }\n            return aOnes.CompareTo(bOnes);\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_dur9sxy.cs(21,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmp_dur9sxy.cs(22,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var result = new List<long>();\n        var ones = new Dictionary<long,
    int>();\n        foreach (var item in arr) {\n            var count = 0;\n            var
    num = item;\n            while (num > 0) {\n                count += (int)(num
    & 1);\n                num >>= 1;\n            }\n            if (!ones.ContainsKey(item))
    {\n                ones.Add(item, count);\n            }\n        }\n        var
    sorted = ones.OrderBy(x => x.Value).ThenBy(x => x.Key);\n        foreach (var
    item in sorted) {\n            result.Add(item.Key);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1c464139ff154aa28d699f3f01929c7f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1c464139ff154aa28d699f3f01929c7f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(\"X\").Count(c => c == '1')).ThenBy(x
    => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2254339d4374cfe8f95a6414430b197>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2254339d4374cfe8f95a6414430b197>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            int aOnes = CountOnes(a);\n
    \           int bOnes = CountOnes(b);\n            if (aOnes == bOnes) {\n                return
    a.CompareTo(b);\n            }\n            return aOnes.CompareTo(bOnes);\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_dur9sxy.cs(21,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmp_dur9sxy.cs(22,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(\"X\").Count(c => c == '1')).ThenBy(x
    => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2254339d4374cfe8f95a6414430b197>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2254339d4374cfe8f95a6414430b197>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(\"X\").Count(c => c == '1')).ThenBy(x
    => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2254339d4374cfe8f95a6414430b197>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2254339d4374cfe8f95a6414430b197>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var sorted = arr.Select(x => new {\n            Value = x,\n            Ones
    = CountOnes(x)\n        }).OrderBy(x => x.Ones).ThenBy(x => x.Value).ToList();\n
    \       return sorted.Select(x => x.Value).ToList();\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxdcxhkpi.cs(22,20): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(\"X\").Count(c => c == '1')).ThenBy(x
    => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2254339d4374cfe8f95a6414430b197>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2254339d4374cfe8f95a6414430b197>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            int aOnes = CountOnes(a);\n
    \           int bOnes = CountOnes(b);\n            if (aOnes == bOnes) {\n                return
    a.CompareTo(b);\n            }\n            return aOnes.CompareTo(bOnes);\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_dur9sxy.cs(21,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmp_dur9sxy.cs(22,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => CountOnes(x)).ThenBy(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplh5lir1m.cs(20,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            var aBits = Convert.ToString(a,
    2).Count(c => c == '1');\n            var bBits = Convert.ToString(b, 2).Count(c
    => c == '1');\n            if (aBits == bBits) {\n                return a.CompareTo(b);\n
    \           }\n            return aBits.CompareTo(bBits);\n        });\n        return
    arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <785137115afa4915aaae872ee0db54e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <785137115afa4915aaae872ee0db54e9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(\"X\").Count(y => y == '1')).ThenBy(x
    => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <982404bd4cf745adaed638a65a7f7563>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <982404bd4cf745adaed638a65a7f7563>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y
    == '1')).ThenBy(x => x).ToList();\n        return arr.OrderBy(x => Convert.ToString(x,
    2).Count(y => y == '1')).ThenBy(x => x).ToList();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d39a7e9a1b84a9ca9950d4d1836350d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2d39a7e9a1b84a9ca9950d4d1836350d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => CountOnes(x)).ThenBy(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplh5lir1m.cs(20,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var sorted = arr.OrderBy(x => x).ToList();\n        var ones =
    sorted.Select(x => Convert.ToString(x, 2).Count(y => y == '1')).ToList();\n        var
    max = ones.Max();\n        var min = ones.Min();\n        var result = new List<long>();\n
    \       for (int i = min; i <= max; i++) {\n            var temp = sorted.Where((x,
    j) => ones[j] == i).ToList();\n            result.AddRange(temp);\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f1c032dc7844280ba0452d68cce7bcc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2f1c032dc7844280ba0452d68cce7bcc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((x, y) => {\n            int xOnes = CountOnes(x);\n
    \           int yOnes = CountOnes(y);\n            if (xOnes == yOnes) {\n                return
    (int)x - (int)y;\n            }\n            return xOnes - yOnes;\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9gvbe43r.cs(21,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmp9gvbe43r.cs(22,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> sorted = new List<long>();\n        List<long> zeros
    = new List<long>();\n        List<long> ones = new List<long>();\n        List<long>
    twos = new List<long>();\n        List<long> threes = new List<long>();\n        List<long>
    fours = new List<long>();\n        List<long> fives = new List<long>();\n        List<long>
    sixes = new List<long>();\n        List<long> sevens = new List<long>();\n        List<long>
    eights = new List<long>();\n        List<long> nines = new List<long>();\n        List<long>
    tens = new List<long>();\n        List<long> elevens = new List<long>();\n        List<long>
    twelves = new List<long>();\n        List<long> thirteens = new List<long>();\n
    \       List<long> fourteens = new List<long>();\n        List<long> fifteens
    = new List<long>();\n        List<long> sixteens = new List<long>();\n        List<long>
    seventeens = new List<long>();\n        List<long> eighteens = new List<long>();\n
    \       List<long> ninteens = new List<long>();\n        List<long> twenties =
    new List<long>();\n        List<long> twentyones = new List<long>();\n        List<long>
    twentytwos = new List<long>();\n        List<long> twentythrees = new List<long>();\n
    \       List<long> twentyfours = new List<long>();\n        List<long> twentyfives
    = new List<long>();\n        List<long> twentysixes = new List<long>();\n        List<long>
    twentysevens = new List<long>();\n        List<long> twentyeights = new List<long>();\n
    \       List<long> twentynines = new List<long>();\n        List<long> thirties
    = new List<long>();\n        List<long> thirtyones = new List<long>();\n\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp81cnirx2.cs(19,30): error CS0161: ''Problem.SortArray(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // return arr.OrderBy(x => x.ToString(\"X\").Count(c => c == '1')).ThenBy(x
    => x).ToList();\n        return arr.OrderBy(x => x.ToString(\"X\").Count(c =>
    c == '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a42cca330dac4e538ccc276911016188>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a42cca330dac4e538ccc276911016188>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            var aBits = BitCount(a);\n            var
    bBits = BitCount(b);\n            if (aBits == bBits) {\n                return
    a.CompareTo(b);\n            }\n            return aBits.CompareTo(bBits);\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgj6tjlel.cs(21,25): error CS0103: The name ''BitCount'' does not exist
    in the current context

    /tmp/tmpgj6tjlel.cs(22,25): error CS0103: The name ''BitCount'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var sorted = arr.OrderBy(x => x.ToString(\"X\").Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n        return sorted;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27cf851e36a24b858a08be7460573947>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27cf851e36a24b858a08be7460573947>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> result = new List<long>();\n        List<long> zeros
    = new List<long>();\n        List<long> ones = new List<long>();\n        List<long>
    twos = new List<long>();\n        List<long> threes = new List<long>();\n        List<long>
    fours = new List<long>();\n        List<long> fives = new List<long>();\n        List<long>
    sixes = new List<long>();\n        List<long> sevens = new List<long>();\n        List<long>
    eights = new List<long>();\n        List<long> nines = new List<long>();\n        List<long>
    tens = new List<long>();\n        List<long> elevens = new List<long>();\n        List<long>
    twelves = new List<long>();\n        List<long> thirteens = new List<long>();\n
    \       List<long> fourteens = new List<long>();\n        List<long> fifteens
    = new List<long>();\n        List<long> sixteens = new List<long>();\n        List<long>
    seventeens = new List<long>();\n        List<long> eighteens = new List<long>();\n
    \       List<long> ninteens = new List<long>();\n        List<long> twenties =
    new List<long>();\n        List<long> thirtyones = new List<long>();\n        List<long>
    thirtytwos = new List<long>();\n        List<long> thirtythrees = new List<long>();\n
    \       List<long> thirtyfours = new List<long>();\n        List<long> thirtyfives
    = new List<long>();\n        List<long> thirtysixes = new List<long>();\n        List<long>
    thirtysevens = new List<long>();\n        List<long> thirtyeights = new List<long>();\n
    \       List<long> thirtynines = new List<long>();\n        List<long> fourties
    = new List<long>();\n        List<long> fourtyones = new List<long>();\n       \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2atjplo_.cs(19,30): error CS0161: ''Problem.SortArray(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            int aOnes = CountOnes(a);\n
    \           int bOnes = CountOnes(b);\n            if (aOnes == bOnes) {\n                return
    a.CompareTo(b);\n            }\n            return aOnes.CompareTo(bOnes);\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_dur9sxy.cs(21,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmp_dur9sxy.cs(22,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            var aBits = BitCount(a);\n            var
    bBits = BitCount(b);\n            return aBits == bBits ? a.CompareTo(b) : aBits.CompareTo(bBits);\n
    \       });\n        return arr;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdd81vwhv.cs(21,25): error CS0103: The name ''BitCount'' does not exist
    in the current context

    /tmp/tmpdd81vwhv.cs(22,25): error CS0103: The name ''BitCount'' does not exist
    in the current context

    '
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => CountOnes(x)).ThenBy(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplh5lir1m.cs(20,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(\"X\").Count(y => y == '1')).ThenBy(x
    => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <982404bd4cf745adaed638a65a7f7563>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <982404bd4cf745adaed638a65a7f7563>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(\"X\").Count(c => c == '1')).ThenBy(x
    => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2254339d4374cfe8f95a6414430b197>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2254339d4374cfe8f95a6414430b197>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(\"X\").Count(y => y == '1')).ThenBy(x
    => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <982404bd4cf745adaed638a65a7f7563>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <982404bd4cf745adaed638a65a7f7563>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(\"X\").Count(c => c == '1')).ThenBy(x
    => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2254339d4374cfe8f95a6414430b197>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2254339d4374cfe8f95a6414430b197>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => CountOnes(x)).ThenBy(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplh5lir1m.cs(20,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var sorted = arr.OrderBy(x => Convert.ToString(x, 2).Count(y =>
    y == '1')).ThenBy(x => x).ToList();\n        return sorted;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be2a542c85a14079866dc39ac81838fe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be2a542c85a14079866dc39ac81838fe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794695
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => CountOnes(x)).ThenBy(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplh5lir1m.cs(20,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(\"X\").Count(y => y == '1')).ThenBy(x
    => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <982404bd4cf745adaed638a65a7f7563>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <982404bd4cf745adaed638a65a7f7563>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => CountOnes(x)).ThenBy(x => x).ToList();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplh5lir1m.cs(20,33): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794693
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        // return arr.OrderBy(x => x.ToString(\"X\").Count(y
    => y == '1')).ThenBy(x => x).ToList();\n        return arr.OrderBy(x => x.ToString(\"X\").Count(y
    => y == '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f775fee008242e88b54585eefc136d6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f775fee008242e88b54585eefc136d6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(\"X\").Count(y => y == '1')).ThenBy(x
    => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <982404bd4cf745adaed638a65a7f7563>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <982404bd4cf745adaed638a65a7f7563>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Write your code here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85865843783549b7b363fe3c59921c4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <85865843783549b7b363fe3c59921c4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort((a, b) => {\n            var aBits = BitCount(a);\n            var
    bBits = BitCount(b);\n            if (aBits != bBits) {\n                return
    aBits.CompareTo(bBits);\n            }\n            return a.CompareTo(b);\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7dhkxty5.cs(21,25): error CS0103: The name ''BitCount'' does not exist
    in the current context

    /tmp/tmp7dhkxty5.cs(22,25): error CS0103: The name ''BitCount'' does not exist
    in the current context

    '
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c
    == '1')).ThenBy(x => x).ToList();\n        return arr.OrderBy(x => Convert.ToString(x,
    2).Count(c => c == '1')).ThenBy(x => x).ToList();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <892180f27f69406b8544c082ef9fbce2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <892180f27f69406b8544c082ef9fbce2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <089219cd9f9c4fa3bb75187bcf45d435>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> sorted = new List<long>();\n        List<long> zeros
    = new List<long>();\n        List<long> ones = new List<long>();\n        List<long>
    twos = new List<long>();\n        List<long> threes = new List<long>();\n        List<long>
    fours = new List<long>();\n        List<long> fives = new List<long>();\n        List<long>
    sixes = new List<long>();\n        List<long> sevens = new List<long>();\n        List<long>
    eights = new List<long>();\n        List<long> nines = new List<long>();\n        List<long>
    tens = new List<long>();\n        List<long> elevens = new List<long>();\n        List<long>
    twelves = new List<long>();\n        List<long> thirteens = new List<long>();\n
    \       List<long> fourteens = new List<long>();\n        List<long> fifteens
    = new List<long>();\n        List<long> sixteens = new List<long>();\n        List<long>
    seventeens = new List<long>();\n        List<long> eighteens = new List<long>();\n
    \       List<long> ninteens = new List<long>();\n        List<long> twentys =
    new List<long>();\n        List<long> twentys1 = new List<long>();\n        List<long>
    twentys2 = new List<long>();\n        List<long> twentys3 = new List<long>();\n
    \       List<long> twentys4 = new List<long>();\n        List<long> twentys5 =
    new List<long>();\n        List<long> twentys6 = new List<long>();\n        List<long>
    twentys7 = new List<long>();\n        List<long> twentys8 = new List<long>();\n
    \       List<long> twentys9 = new List<long>();\n        List<long> thirtys =
    new List<long>();\n        List<long> thirtys1 = new List<long>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr4a9o3v4.cs(19,30): error CS0161: ''Problem.SortArray(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var sorted = arr.OrderBy(x => x.ToString(\"X\").Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n        return sorted;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27cf851e36a24b858a08be7460573947>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <27cf851e36a24b858a08be7460573947>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        var result = arr.Select(x => new {\n            Value = x,\n            Ones
    = Convert.ToString(x, 2).Count(c => c == '1')\n        }).OrderBy(x => x.Ones).ThenBy(x
    => x.Value).Select(x => x.Value).ToList();\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0916e8739271499abfc290ba95b3965a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0916e8739271499abfc290ba95b3965a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        List<long> result = new List<long>();\n
    \       List<long> sorted = new List<long>();\n        List<long> sorted2 = new
    List<long>();\n        List<long> sorted3 = new List<long>();\n        List<long>
    sorted4 = new List<long>();\n        List<long> sorted5 = new List<long>();\n
    \       List<long> sorted6 = new List<long>();\n        List<long> sorted7 = new
    List<long>();\n        List<long> sorted8 = new List<long>();\n        List<long>
    sorted9 = new List<long>();\n        List<long> sorted10 = new List<long>();\n
    \       List<long> sorted11 = new List<long>();\n        List<long> sorted12 =
    new List<long>();\n        List<long> sorted13 = new List<long>();\n        List<long>
    sorted14 = new List<long>();\n        List<long> sorted15 = new List<long>();\n
    \       List<long> sorted16 = new List<long>();\n        List<long> sorted17 =
    new List<long>();\n        List<long> sorted18 = new List<long>();\n        List<long>
    sorted19 = new List<long>();\n        List<long> sorted20 = new List<long>();\n
    \       List<long> sorted21 = new List<long>();\n        List<long> sorted22 =
    new List<long>();\n        List<long> sorted23 = new List<long>();\n        List<long>
    sorted24 = new List<long>();\n        List<long> sorted25 = new List<long>();\n
    \       List<long> sorted26 = new List<long>();\n        List<long> sorted27 =
    new List<long>();\n        List<long> sorted28 = new List<long>();\n        List<long>
    sorted29 = new List<long>();\n        List<long> sorted30 = new List<long>();\n
    \       List<long> sorted31 = new List<long>();\n        List<long> sorted32 =
    new List<long>();\n        List<long> sorted33 = new List<\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkvohxpk1.cs(54,40): error CS1031: Type expected

    /tmp/tmpkvohxpk1.cs(54,40): error CS1003: Syntax error, ''>'' expected

    /tmp/tmpkvohxpk1.cs(54,40): error CS1526: A new expression requires (), [], or
    {} after type

    /tmp/tmpkvohxpk1.cs(54,40): error CS1002: ; expected

    '
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(\"X\").Count(c => c == '1')).ThenBy(x
    => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2254339d4374cfe8f95a6414430b197>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e2254339d4374cfe8f95a6414430b197>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        arr.Sort(delegate(long a, long b) {\n            int aOnes = CountOnes(a);\n
    \           int bOnes = CountOnes(b);\n            if (aOnes == bOnes) {\n                return
    a.CompareTo(b);\n            }\n            return aOnes.CompareTo(bOnes);\n        });\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpocypoi9r.cs(21,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    /tmp/tmpocypoi9r.cs(22,25): error CS0103: The name ''CountOnes'' does not exist
    in the current context

    '
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        return arr;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c4765497168b459e9ef9a47d48d2fa18>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code goes here\n        // return arr.OrderBy(x => x.ToString(\"X\").Count(y
    => y == '1')).ThenBy(x => x).ToList();\n        return arr.OrderBy(x => x.ToString(\"X\").Count(y
    => y == '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f775fee008242e88b54585eefc136d6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f775fee008242e88b54585eefc136d6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794695
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(c => c ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <31dccda922874d6c9733a23ea95edf33>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        // Your code here\n        return arr;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)2L, (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new
    List<long>(new long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,
    (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)2L,
    (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L, (long)2L, (long)4L,
    (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)3L, (long)6L, (long)44L,
    (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new long[]{(long)32L,
    (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82665f0d75204e89b35f8c61d37ae224>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => x.ToString(\"X\").Count(y => y == '1')).ThenBy(x
    => x).ToList();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,
    (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,
    (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,
    (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,
    (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,
    (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new
    long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <982404bd4cf745adaed638a65a7f7563>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <982404bd4cf745adaed638a65a7f7563>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        return arr.OrderBy(x => Convert.ToString(x, 2).Count(y => y ==
    '1')).ThenBy(x => x).ToList();\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L, (long)2L,
    (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,
    (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L,
    (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L,
    (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5101b50104db4dfc8fbc96dd627bd33c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794694
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // In this Kata, you have to sort a list of non-negative integers
    according to\n    // number of ones in their binary representation in ascending
    order.\n    // For similar number of ones, sort based on decimal value.\n    //
    It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,
    (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new
    List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n
    \   // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L,
    (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L,
    (long)2L, (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long>
    arr) {\n        List<long> result = new List<long>();\n        List<long>[] buckets
    = new List<long>[64];\n        for (int i = 0; i < buckets.Length; i++) {\n            buckets[i]
    = new List<long>();\n        }\n        foreach (long n in arr) {\n            int
    count = 0;\n            for (int i = 0; i < 64; i++) {\n                if ((n
    & (1L << i)) != 0) {\n                    count++;\n                }\n            }\n
    \           buckets[count].Add(n);\n        }\n        for (int i = 0; i < buckets.Length;
    i++) {\n            buckets[i].Sort();\n            result.AddRange(buckets[i]);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)1L, (long)5L,
    (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)1L, (long)2L,
    (long)4L, (long)3L, (long)5L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L}))).Equals((new List<long>(new
    long[]{(long)-4L, (long)-2L, (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n
    \   Debug.Assert(SortArray((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)5L, (long)77L,
    (long)4L, (long)5L, (long)3L, (long)5L, (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)2L, (long)4L, (long)4L, (long)3L, (long)3L,
    (long)5L, (long)5L, (long)5L, (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new
    List<long>(new long[]{(long)3L, (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new
    List<long>(new long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n
    \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,
    (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,
    (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2acc0fb742714252a9b279ecfb5ac37f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2acc0fb742714252a9b279ecfb5ac37f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659794695
