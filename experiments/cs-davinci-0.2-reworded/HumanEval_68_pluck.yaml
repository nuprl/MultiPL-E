name: HumanEval_68_pluck
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // \"Given a list representing a branch of a tree that has non-negative\
  \ integer nodes\n    // your task is to pluck one of the nodes and return it.\n\
  \    // The plucked node should be the node with the smallest even value.\n    //\
  \ If multiple nodes with the same smallest even value are found return the node\
  \ that has smallest index.\n    // The plucked node should be returned in a list,\
  \ [ smalest_value, its index ],\n    // If there are no even values or the given\
  \ list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new\
  \ long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,\
  \ (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n\
  \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
  \    // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n\
  \    // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
  \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
  \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n\
  \    // so we will choose the first zero, which has the smallest index.\n    //\
  \ Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
  \    public static List<long> Pluck(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,\
  \ (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,\
  \ (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        // your code here\n        return new List<long>();", "   \
    \     long min = long.MaxValue;\n        long index = -1;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                index = i;\n            }\n\
    \        }\n        if (index == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { min, index };", "        long min\
    \ = long.MaxValue;\n        int minIndex = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return new List<long>();\n        }\n\
    \        return new List<long> { min, minIndex };", "        // your code here\n\
    \        return new List<long>();", "        if (arr.Count == 0) return new List<long>();\n\
    \        long min = arr.Min();\n        if (min % 2 == 1) return new List<long>();\n\
    \        int minIndex = arr.IndexOf(min);\n        return new List<long> { min,\
    \ minIndex };", "        // Your code goes here\n        return new List<long>();",
  "        long min = long.MaxValue;\n        long index = -1;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                index = i;\n            }\n\
    \        }\n        if (index == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { min, index };", "        long min\
    \ = long.MaxValue;\n        int minIndex = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return new List<long>();\n        }\n\
    \        return new List<long>() { min, minIndex };", "        // Your code here\n\
    \        return new List<long>();", "        long min = Int64.MaxValue;\n    \
    \    long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] < min && arr[i] % 2 == 0) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>() { min, minIndex };", "        // your code here\n        return\
    \ new List<long>();", "        // your code here\n        return null;", "   \
    \     // Your code goes here.\n        // Good luck!\n        return null;", " \
    \       // Your code goes here.\n        return null;", "        // Your code\
    \ goes here\n        return new List<long>();", "        long min = long.MaxValue;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>() { min, minIndex };", "        long min = long.MaxValue;\n     \
    \   int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long> { min, minIndex };", "        // your code here\n        return null;",
  "        // your code here\n        return new List<long>();", "        long min\
    \ = long.MaxValue;\n        long index = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                index = i;\n            }\n        }\n      \
    \  if (index == -1) {\n            return new List<long>();\n        }\n     \
    \   return new List<long> { min, index };", "        long min = long.MaxValue;\n\
    \        long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>\
    \ { min, index };", "        long min = long.MaxValue;\n        long index = -1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n                min = arr[i];\n                index =\
    \ i;\n            }\n        }\n        if (index == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long> { min, index };",
  "        // your code here\n        return new List<long>();", "        // your\
    \ code here\n        return new List<long>();", "        var evens = arr.Where(x\
    \ => x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        var min = evens.Min();\n        var index\
    \ = arr.IndexOf(min);\n        return new List<long> { min, index };", "     \
    \   long min = long.MaxValue;\n        int index = -1;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \                min = arr[i];\n                index = i;\n            }\n  \
    \      }\n        if (index == -1) {\n            return new List<long>();\n \
    \       }\n        return new List<long>() { min, index };", "        long min\
    \ = long.MaxValue;\n        int minIndex = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return new List<long>();\n        }\n\
    \        return new List<long>() { min, minIndex };", "        long min = long.MaxValue;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long> { min, minIndex };", "        List<long> result = new List<long>();\n\
    \        long min = long.MaxValue;\n        int minIndex = -1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                minIndex = i;\n          \
    \  }\n        }\n        if (minIndex != -1) {\n            result.Add(min);\n\
    \            result.Add(minIndex);\n        }\n        return result;", "    \
    \    // your code here\n        return null;", "        // your code here\n  \
    \      return null;", "        long min = long.MaxValue;\n        long index =\
    \ -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if (arr[(int)i]\
    \ % 2 == 0 && arr[(int)i] < min) {\n                min = arr[(int)i];\n     \
    \           index = i;\n            }\n        }\n        if (index == -1) {\n\
    \            return new List<long>();\n        }\n        return new List<long>\
    \ { min, index };", "        // Your code goes here.\n        // Good luck!\n\
    \        return new List<long>();", "        long min = long.MaxValue;\n     \
    \   int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>() { min, minIndex };", "        long min = long.MaxValue;\n     \
    \   long index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n       \
    \     if (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n                min =\
    \ arr[(int)i];\n                index = i;\n            }\n        }\n       \
    \ if (index == -1) {\n            return new List<long>();\n        }\n      \
    \  return new List<long>() { min, index };", "        long min = -1;\n       \
    \ long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n       \
    \     if (arr[i] % 2 == 0) {\n                if (min == -1 || arr[i] < min) {\n\
    \                    min = arr[i];\n                    minIndex = i;\n      \
    \          }\n            }\n        }\n        if (min == -1) {\n           \
    \ return new List<long>();\n        }\n        return new List<long>() { min,\
    \ minIndex };", "        long min = long.MaxValue;\n        int minIndex = -1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex\
    \ = i;\n            }\n        }\n        if (minIndex == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long> { min, minIndex\
    \ };", "        List<long> result = new List<long>();\n        long min = long.MaxValue;\n\
    \        int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (index != -1)\
    \ {\n            result.Add(min);\n            result.Add(index);\n        }\n\
    \        return result;", "        // your code here\n        return new List<long>();",
  "        // your code goes here\n        return new List<long>();", "        //\
    \ your code here\n        return null;", "        long min = long.MaxValue;\n\
    \        long index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n  \
    \          if (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n                min\
    \ = arr[(int)i];\n                index = i;\n            }\n        }\n     \
    \   if (index == -1) {\n            return new List<long>();\n        }\n    \
    \    return new List<long>() { min, index };", "        // Your code goes here.\n\
    \        // You can add additional classes and methods.\n        // You can also\
    \ add additional functions and variables.\n        // You can also modify the\
    \ return type.\n        // You can also modify the parameters.\n        // You\
    \ can also use your own algorithms.\n        // You can also use external libraries.\n\
    \        // You can also use parallelization.\n        // You can also use any\
    \ other technique you know.\n        // You can also modify the problem statement.\n\
    \        // You can also modify the test cases.\n        // You can also modify\
    \ the constraints.\n        // You can also modify the time limit.\n        //\
    \ You can also modify the memory limit.\n        // You can also modify the scoring\
    \ system.\n        // You can also modify the scoring distribution.\n        //\
    \ You can also modify the leaderboard.\n        // You can also modify the contest.\n\
    \        // You can also modify the problem setter.\n        // You can also modify\
    \ the validator.\n        // You can also modify the tester.\n        // You can\
    \ also modify the visualizer.\n        // You can also modify the statement validator.\n\
    \        // You can also modify the statement generator.\n        // You can also\
    \ modify the input generator.\n        // You can also modify the input validator.\n\
    \        // You can also modify the input transformer.\n        // You can also\
    \ modify the input mutator.\n        // You can also modify the input formatter.\n\
    \        // You can also modify the input checker.\n        // You can also modify\
    \ the input fixer.\n        // You can also modify the input reader.\n       \
    \ // You can also modify the output writer.\n        // You can also modify the\
    \ output checker.\n        // You can also modify the output fixer.\n        //\
    \ You can also modify the output formatter.\n        // You can also modify the\
    \ output mutator.\n        // You can also modify the output transformer.\n  \
    \      // You can also modify the output validator.\n        // You can also modify\
    \ the output generator.\n        // You can also modify the output reader.\n \
    \       // You can also modify the output printer.\n        // You can also modify\
    \ the output visualizer.\n        // You can also modify the output leaderboard.\n\
    \        // You can also modify the output statement.\n        // You can also\
    \ modify the", "        // your code here\n        return new List<long>();",
  "        long min = -1;\n        long minIndex = -1;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                if\
    \ (min == -1 || arr[i] < min) {\n                    min = arr[i];\n         \
    \           minIndex = i;\n                }\n            }\n        }\n     \
    \   if (min == -1) {\n            return new List<long>();\n        }\n      \
    \  return new List<long>() { min, minIndex };", "        // your code here\n \
    \       return null;", "        // Your code here\n        return new List<long>();",
  "        long min = long.MaxValue;\n        long index = -1;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                index = i;\n            }\n\
    \        }\n        if (index == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { min, index };", "        long min\
    \ = long.MaxValue;\n        int minIndex = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return new List<long>();\n        }\n\
    \        return new List<long>() { min, minIndex };", "        long minEven =\
    \ long.MaxValue;\n        int minEvenIndex = -1;\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < minEven) {\n\
    \                minEven = arr[i];\n                minEvenIndex = i;\n      \
    \      }\n        }\n        if (minEvenIndex == -1) {\n            return new\
    \ List<long>();\n        }\n        return new List<long> { minEven, minEvenIndex\
    \ };", "        // Your code goes here.\n        return null;", "        long\
    \ min = long.MaxValue;\n        long minIndex = -1;\n        for (long i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0 && arr[(int)i] <\
    \ min) {\n                min = arr[(int)i];\n                minIndex = i;\n\
    \            }\n        }\n        if (minIndex == -1) {\n            return new\
    \ List<long>();\n        }\n        return new List<long>() { min, minIndex };",
  "        // Your code goes here.\n        return null;", "        long min = -1;\n\
    \        long minIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n\
    \            if (arr[(int)i] % 2 == 0) {\n                if (min == -1 || arr[(int)i]\
    \ < min) {\n                    min = arr[(int)i];\n                    minIndex\
    \ = i;\n                }\n            }\n        }\n        if (min == -1) {\n\
    \            return new List<long>();\n        }\n        return new List<long>(new\
    \ long[]{min, minIndex});", "        // your code here\n        return new List<long>();",
  "        // Your code goes here.\n        return null;", "        if (arr.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        long min =\
    \ arr[0];\n        int minIndex = 0;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n                min =\
    \ arr[i];\n                minIndex = i;\n            }\n        }\n        if\
    \ (min % 2 == 0) {\n            return new List<long>() { min, minIndex };\n \
    \       }\n        return new List<long>();", "        long min = long.MaxValue;\n\
    \        long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>()\
    \ { min, index };", "        // Your code goes here.\n        return new List<long>();",
  "        // your code here\n        return null;", "        long min = long.MaxValue;\n\
    \        long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>()\
    \ { min, index };", "        var evens = arr.Where(x => x % 2 == 0).ToList();\n\
    \        if (evens.Count == 0) return new List<long>();\n        var min = evens.Min();\n\
    \        var index = arr.IndexOf(min);\n        return new List<long> { min, index\
    \ };", "        long min = long.MaxValue;\n        long index = -1;\n        for\
    \ (long i = 0; i < arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0 &&\
    \ arr[(int)i] < min) {\n                min = arr[(int)i];\n                index\
    \ = i;\n            }\n        }\n        if (index == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>() { min, index };",
  "        // your code here\n        return new List<long>();", "        // Your\
    \ code goes here\n        return null;", "        // Your code goes here.\n  \
    \      return null;", "        long min = long.MaxValue;\n        int index =\
    \ -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %\
    \ 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index\
    \ = i;\n            }\n        }\n        if (index == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>() { min, index };",
  "        // Your code goes here.\n        return new List<long>();", "        //\
    \ your code here\n        return new List<long>();", "        long min = long.MaxValue;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long> { min, minIndex };", "        // your code goes here\n        return\
    \ new List<long>();", "        // your code here\n        return new List<long>();",
  "        long min = Int64.MaxValue;\n        int index = -1;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                index = i;\n            }\n\
    \        }\n        if (index == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { min, index };", "        // Your\
    \ code goes here.\n        return new List<long>();", "        long min = long.MaxValue;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>() { min, minIndex };", "        // your code here\n        return\
    \ new List<long>();", "        // Your code goes here.\n        return new List<long>();",
  "        // Your code here\n        return new List<long>();", "        long min\
    \ = long.MaxValue;\n        long minIndex = long.MaxValue;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                minIndex = i;\n          \
    \  }\n        }\n        if (min == long.MaxValue) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { min, minIndex };", "        // Your\
    \ code goes here\n        return null;", "        long min = long.MaxValue;\n\
    \        int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>()\
    \ { min, index };", "        // Your code goes here\n        return null;", " \
    \       // Your code goes here.\n        return null;", "        long min = long.MaxValue;\n\
    \        long minIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n\
    \            if (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n              \
    \  min = arr[(int)i];\n                minIndex = i;\n            }\n        }\n\
    \        if (minIndex == -1) {\n            return new List<long>();\n       \
    \ }\n        return new List<long> { min, minIndex };", "        long min = long.MaxValue;\n\
    \        long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>()\
    \ { min, index };", "        long min = long.MaxValue;\n        int minIndex =\
    \ -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %\
    \ 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex\
    \ = i;\n            }\n        }\n        if (minIndex == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long> { min, minIndex\
    \ };", "        long min = long.MaxValue;\n        long index = -1;\n        for\
    \ (long i = 0; i < arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0 &&\
    \ arr[(int)i] < min) {\n                min = arr[(int)i];\n                index\
    \ = i;\n            }\n        }\n        if (index == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long> { min, index };",
  "        List<long> result = new List<long>();\n        long min = long.MaxValue;\n\
    \        int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (index != -1)\
    \ {\n            result.Add(min);\n            result.Add(index);\n        }\n\
    \        return result;", "        // Your code goes here.\n        return new\
    \ List<long>();", "        var evens = arr.Where(x => x % 2 == 0).ToList();\n\
    \        if (evens.Count == 0) {\n            return new List<long>();\n     \
    \   }\n        var min = evens.Min();\n        var index = arr.IndexOf(min);\n\
    \        return new List<long> { min, index };", "        List<long> result =\
    \ new List<long>();\n        if (arr.Count == 0) {\n            return result;\n\
    \        }\n        long min = arr[0];\n        int minIndex = 0;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n                min = arr[i];\n                minIndex = i;\n   \
    \         }\n        }\n        if (min % 2 == 0) {\n            result.Add(min);\n\
    \            result.Add(minIndex);\n        }\n        return result;", "    \
    \    // your code here\n        return new List<long>();", "        // your code\
    \ here\n        return new List<long>();", "        List<long> result = new List<long>();\n\
    \        long min = -1;\n        long minIndex = -1;\n        for (long i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0) {\n           \
    \     if (min == -1 || arr[(int)i] < min) {\n                    min = arr[(int)i];\n\
    \                    minIndex = i;\n                }\n            }\n       \
    \ }\n        if (min != -1) {\n            result.Add(min);\n            result.Add(minIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (arr.Count == 0) {\n            return result;\n        }\n      \
    \  long min = arr[0];\n        int minIndex = 0;\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n    \
    \            min = arr[i];\n                minIndex = i;\n            }\n   \
    \     }\n        if (min % 2 == 0) {\n            result.Add(min);\n         \
    \   result.Add(minIndex);\n        }\n        return result;", "        long min\
    \ = long.MaxValue;\n        int minIndex = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return new List<long>();\n        }\n\
    \        return new List<long> { min, minIndex };", "        long min = long.MaxValue;\n\
    \        long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>()\
    \ { min, index };", "        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        long min = arr[0];\n        int minIndex = 0;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n                min = arr[i];\n                minIndex = i;\n   \
    \         }\n        }\n        if (min % 2 == 0) {\n            return new List<long>\
    \ { min, minIndex };\n        }\n        return new List<long>();", "        long\
    \ minEven = long.MaxValue;\n        long minEvenIndex = -1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < minEven)\
    \ {\n                minEven = arr[i];\n                minEvenIndex = i;\n  \
    \          }\n        }\n        if (minEvenIndex == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>() { minEven, minEvenIndex\
    \ };", "        long min = long.MaxValue;\n        long index = -1;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n                min = arr[i];\n                index = i;\n      \
    \      }\n        }\n        if (index == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> { min, index };", "        // Write\
    \ your code here\n        return null;", "        long min = long.MaxValue;\n\
    \        long idx = -1;\n        for (long i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n                min\
    \ = arr[(int)i];\n                idx = i;\n            }\n        }\n       \
    \ if (idx == -1) {\n            return new List<long>();\n        }\n        return\
    \ new List<long>(new long[]{min, idx});", "        // your code here\n       \
    \ return new List<long>();", "        // Your code goes here.\n        return\
    \ null;", "        // your code here\n        return new List<long>();", "   \
    \     long min = long.MaxValue;\n        int minIndex = -1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                minIndex = i;\n          \
    \  }\n        }\n        if (minIndex == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> { min, minIndex };", "        // Your\
    \ code goes here.\n        return new List<long>();", "        long min = long.MaxValue;\n\
    \        int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>()\
    \ { min, index };", "        long min = long.MaxValue;\n        int index = -1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n                min = arr[i];\n                index =\
    \ i;\n            }\n        }\n        if (index == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>() { min, index };",
  "        if (arr.Count == 0) {\n            return new List<long>();\n        }\n\
    \        long min = arr[0];\n        int minIndex = 0;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] < min && arr[i] % 2 == 0) {\n\
    \                min = arr[i];\n                minIndex = i;\n            }\n\
    \        }\n        if (min % 2 == 0) {\n            return new List<long>() {\
    \ min, minIndex };\n        }\n        return new List<long>();", "        //\
    \ Your code goes here\n        return null;", "        List<long> result = new\
    \ List<long>();\n        if (arr.Count == 0) {\n            return result;\n \
    \       }\n        long min = arr[0];\n        int minIndex = 0;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n                min = arr[i];\n                minIndex = i;\n   \
    \         }\n        }\n        if (min % 2 == 0) {\n            result.Add(min);\n\
    \            result.Add(minIndex);\n        }\n        return result;", "    \
    \    long min = long.MaxValue;\n        long index = -1;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \                min = arr[i];\n                index = i;\n            }\n  \
    \      }\n        if (index == -1) {\n            return new List<long>();\n \
    \       }\n        return new List<long> { min, index };", "        // your code\
    \ here\n        return new List<long>();", "        if (arr.Count == 0) {\n  \
    \          return new List<long>();\n        }\n        long min = arr[0];\n \
    \       long minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n  \
    \          if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (min % 2\
    \ == 0) {\n            return new List<long> { min, minIndex };\n        }\n \
    \       return new List<long>();", "        long min = long.MaxValue;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n          \
    \  if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n   \
    \             index = i;\n            }\n        }\n        if (index == -1) {\n\
    \            return new List<long>();\n        }\n        return new List<long>()\
    \ { min, index };", "        // Your code goes here\n        return new List<long>();",
  "        List<long> result = new List<long>();\n        long min = long.MaxValue;\n\
    \        long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return result;\n        }\n        result.Add(min);\n       \
    \ result.Add(index);\n        return result;", "        // Your code goes here.\n\
    \        return null;", "        // Your code goes here.\n        List<long> result\
    \ = new List<long>();\n        long min = long.MaxValue;\n        long index =\
    \ -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %\
    \ 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index\
    \ = i;\n            }\n        }\n        if (index != -1) {\n            result.Add(min);\n\
    \            result.Add(index);\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long min = long.MaxValue;\n \
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (index != -1)\
    \ {\n            result.Add(min);\n            result.Add(index);\n        }\n\
    \        return result;", "        var evens = arr.Where(x => x % 2 == 0).ToList();\n\
    \        if (evens.Count == 0) {\n            return new List<long>();\n     \
    \   }\n        var min = evens.Min();\n        var minIndex = arr.IndexOf(min);\n\
    \        return new List<long> { min, minIndex };", "        long min = long.MaxValue;\n\
    \        int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>\
    \ { min, index };", "        List<long> result = new List<long>();\n        long\
    \ min = long.MaxValue;\n        int index = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                index = i;\n            }\n        }\n      \
    \  if (index != -1) {\n            result.Add(min);\n            result.Add(index);\n\
    \        }\n        return result;", "        // Your code goes here.\n      \
    \  return null;", "        var evens = arr.Where(x => x % 2 == 0).ToList();\n\
    \        if (evens.Count == 0) {\n            return new List<long>();\n     \
    \   }\n        var min = evens.Min();\n        var index = arr.IndexOf(min);\n\
    \        return new List<long> { min, index };", "        long min = -1;\n   \
    \     long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] % 2 == 0) {\n                if (min == -1 || arr[i] < min)\
    \ {\n                    min = arr[i];\n                    index = i;\n     \
    \           }\n            }\n        }\n        if (min == -1) {\n          \
    \  return new List<long>();\n        }\n        return new List<long>() { min,\
    \ index };", "        var evens = arr.Where(x => x % 2 == 0).ToList();\n     \
    \   if (evens.Count == 0) {\n            return new List<long>();\n        }\n\
    \        var min = evens.Min();\n        var index = arr.IndexOf(min);\n     \
    \   return new List<long> { min, index };", "        // your code here\n     \
    \   return null;", "        // your code here\n        return new List<long>();",
  "        long min = long.MaxValue;\n        long index = -1;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                index = i;\n            }\n\
    \        }\n        if (index == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { min, index };", "        long min\
    \ = long.MaxValue;\n        int index = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                index = i;\n            }\n        }\n      \
    \  if (index == -1) {\n            return new List<long>();\n        }\n     \
    \   return new List<long> { min, index };", "        var evens = arr.Where(x =>\
    \ x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return new\
    \ List<long>();\n        }\n        var min = evens.Min();\n        var index\
    \ = arr.IndexOf(min);\n        return new List<long> { min, index };", "     \
    \   // your code here\n        return null;", "        // your code here\n   \
    \     return null;", "        var min = arr.Where(x => x % 2 == 0).Min();\n  \
    \      var index = arr.IndexOf(min);\n        return new List<long> { min, index\
    \ };", "        // your code here\n        return new List<long>();", "      \
    \  long min = long.MaxValue;\n        int index = -1;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n\
    \                min = arr[i];\n                index = i;\n            }\n  \
    \      }\n        if (index == -1) {\n            return new List<long>();\n \
    \       }\n        return new List<long> { min, index };", "        // your code\
    \ here\n        return new List<long>();", "        var evens = arr.Where(x =>\
    \ x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return new\
    \ List<long>();\n        }\n        var min = evens.Min();\n        var index\
    \ = arr.IndexOf(min);\n        return new List<long> { min, index };", "     \
    \   // your code here\n        return new List<long>();", "        // Your code\
    \ goes here.\n        return new List<long>();", "        long min = Int64.MaxValue;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>() { min, minIndex };", "        long min = int.MaxValue;\n      \
    \  int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n          \
    \  if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n   \
    \             index = i;\n            }\n        }\n        if (index == -1) {\n\
    \            return new List<long>();\n        }\n        return new List<long>()\
    \ { min, index };", "        long min = Int64.MaxValue;\n        int minIndex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ minIndex = i;\n            }\n        }\n        if (minIndex == -1) {\n   \
    \         return new List<long>();\n        }\n        return new List<long>()\
    \ { min, minIndex };", "        if (arr.Count == 0) {\n            return new\
    \ List<long>();\n        }\n        long min = arr[0];\n        int minIndex =\
    \ 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %\
    \ 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex\
    \ = i;\n            }\n        }\n        if (min % 2 == 0) {\n            return\
    \ new List<long> { min, minIndex };\n        }\n        return new List<long>();",
  "        var evens = arr.Where(x => x % 2 == 0).ToList();\n        if (evens.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        var min =\
    \ evens.Min();\n        var index = arr.IndexOf(min);\n        return new List<long>\
    \ { min, index };", "        long min = long.MaxValue;\n        int minIndex =\
    \ -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %\
    \ 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex\
    \ = i;\n            }\n        }\n        if (minIndex == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>() { min, minIndex\
    \ };", "        long min = long.MaxValue;\n        int minIndex = -1;\n      \
    \  for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n                min = arr[i];\n                minIndex = i;\n   \
    \         }\n        }\n        if (minIndex == -1) {\n            return new\
    \ List<long>();\n        }\n        return new List<long>() { min, minIndex };",
  "        // your code here\n        return null;", "        long min = long.MaxValue;\n\
    \        long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long> { min, minIndex };", "        // your code goes here\n        return\
    \ new List<long>();", "        // Your code goes here.\n        return null;",
  "        // Your code here\n        return new List<long>();", "        long min\
    \ = long.MaxValue;\n        long minIndex = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return new List<long>();\n        }\n\
    \        return new List<long>() { min, minIndex };", "        // your code here\n\
    \        return arr;", "        long min = Int64.MaxValue;\n        long minIndex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ minIndex = i;\n            }\n        }\n        if (minIndex == -1) {\n   \
    \         return new List<long>();\n        }\n        return new List<long> {\
    \ min, minIndex };", "        long min = long.MaxValue;\n        long index =\
    \ -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %\
    \ 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index\
    \ = i;\n            }\n        }\n        if (index == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>() { min, index };",
  "        // Your code here\n        return new List<long>();", "        long min\
    \ = long.MaxValue;\n        int minIndex = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return new List<long>();\n        }\n\
    \        return new List<long> { min, minIndex };", "        // Your code goes\
    \ here\n        return new List<long>();", "        long min = long.MaxValue;\n\
    \        long minIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n\
    \            if (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n              \
    \  min = arr[(int)i];\n                minIndex = i;\n            }\n        }\n\
    \        if (minIndex == -1) {\n            return new List<long>();\n       \
    \ }\n        return new List<long> { min, minIndex };", "        long min = long.MaxValue;\n\
    \        long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>()\
    \ { min, index };", "        // your code goes here\n        return new List<long>();",
  "        List<long> result = new List<long>();\n        long min = long.MaxValue;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ != -1) {\n            result.Add(min);\n            result.Add(minIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long min = long.MaxValue;\n        int minIndex = -1;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                minIndex = i;\n          \
    \  }\n        }\n        if (minIndex == -1) {\n            return result;\n \
    \       }\n        result.Add(min);\n        result.Add(minIndex);\n        return\
    \ result;", "        List<long> result = new List<long>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        long min = arr[0];\n\
    \        int minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n  \
    \          if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (min % 2\
    \ == 0) {\n            result.Add(min);\n            result.Add(minIndex);\n \
    \       }\n        return result;", "        // your code here\n        return\
    \ new List<long>();", "        // Your code goes here.\n        return null;",
  "        // Your code here\n        return new List<long>();", "        long min\
    \ = long.MaxValue;\n        int minIndex = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return new List<long>();\n        }\n\
    \        return new List<long>() { min, minIndex };", "        long min = long.MaxValue;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long> { min, minIndex };", "        if (arr.Count == 0) {\n           \
    \ return new List<long>();\n        }\n        long min = long.MaxValue;\n   \
    \     long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>() { min, minIndex };", "        // your code here\n        return\
    \ null;", "        // Your code here\n        return null;", "        List<long>\
    \ result = new List<long>();\n        long min = long.MaxValue;\n        int index\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ index = i;\n            }\n        }\n        if (index != -1) {\n         \
    \   result.Add(min);\n            result.Add(index);\n        }\n        return\
    \ result;", "        long min = long.MaxValue;\n        long index = -1;\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 &&\
    \ arr[i] < min) {\n                min = arr[i];\n                index = i;\n\
    \            }\n        }\n        if (index == -1) {\n            return new\
    \ List<long>();\n        }\n        return new List<long>() { min, index };",
  "        long min = long.MaxValue;\n        long minIndex = -1;\n        for (long\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0 && arr[(int)i]\
    \ < min) {\n                min = arr[(int)i];\n                minIndex = i;\n\
    \            }\n        }\n        if (minIndex == -1) {\n            return new\
    \ List<long>();\n        }\n        return new List<long>() { min, minIndex };",
  "        long min = long.MaxValue;\n        long idx = -1;\n        for (long i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0 && arr[(int)i]\
    \ < min) {\n                min = arr[(int)i];\n                idx = i;\n   \
    \         }\n        }\n        if (idx == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>(new long[]{min, idx});", "        //\
    \ your code here\n        return new List<long>();", "        long min = Int64.MaxValue;\n\
    \        int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                index = i;\n            }\n        }\n        if (index == -1)\
    \ {\n            return new List<long>();\n        }\n        return new List<long>()\
    \ { min, index };", "        long min = long.MaxValue;\n        long index = -1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] < min) {\n                min = arr[i];\n                index =\
    \ i;\n            }\n        }\n        if (index == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>() { min, index };",
  "        // your code here\n        return null;", "        long min = Int64.MaxValue;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>() { min, minIndex };", "        // your code here\n        return\
    \ new List<long>();", "        // your code here\n        return new List<long>();",
  "        // your code here\n        return null;", "        List<long> result =\
    \ new List<long>();\n        long min = Int64.MaxValue;\n        long index =\
    \ -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %\
    \ 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index\
    \ = i;\n            }\n        }\n        if (index == -1) {\n            return\
    \ result;\n        }\n        result.Add(min);\n        result.Add(index);\n \
    \       return result;", "        long min = long.MaxValue;\n        int minIndex\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n               \
    \ minIndex = i;\n            }\n        }\n        if (minIndex == -1) {\n   \
    \         return new List<long>();\n        }\n        return new List<long> {\
    \ min, minIndex };", "        long min = Int64.MaxValue;\n        long index =\
    \ -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %\
    \ 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index\
    \ = i;\n            }\n        }\n        if (index == -1) {\n            return\
    \ new List<long>();\n        }\n        return new List<long>() { min, index };",
  "        long min = long.MaxValue;\n        long index = -1;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                index = i;\n            }\n\
    \        }\n        if (index == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { min, index };", "        // Your\
    \ code goes here.\n        return null;", "        // Your code goes here.\n \
    \       // You can add more classes and methods.\n        // You can also add\
    \ more fields to the class Pluck.\n        // You can also add more methods to\
    \ the class Pluck.\n        // You can also add more classes.\n        // You\
    \ can also add more methods to other classes.\n        // You can also add more\
    \ fields to other classes.\n        // You can also create/edit/delete tests.\n\
    \        // You can also create/edit/delete constraints.\n        // You can also\
    \ create/edit/delete hints.\n        // You can also create/edit/delete time limits.\n\
    \        // You can also create/edit/delete memory limits.\n        // You can\
    \ also create/edit/delete output limits.\n        // You can also create/edit/delete\
    \ tests.\n        // You can also create/edit/delete constraints.\n        //\
    \ You can also create/edit/delete hints.\n        // You can also create/edit/delete\
    \ time limits.\n        // You can also create/edit/delete memory limits.\n  \
    \      // You can also create/edit/delete output limits.\n        // You can also\
    \ create/edit/delete tests.\n        // You can also create/edit/delete constraints.\n\
    \        // You can also create/edit/delete hints.\n        // You can also create/edit/delete\
    \ time limits.\n        // You can also create/edit/delete memory limits.\n  \
    \      // You can also create/edit/delete output limits.\n        // You can also\
    \ create/edit/delete tests.\n        // You can also create/edit/delete constraints.\n\
    \        // You can also create/edit/delete hints.\n        // You can also create/edit/delete\
    \ time limits.\n        // You can also create/edit/delete memory limits.\n  \
    \      // You can also create/edit/delete output limits.\n        // You can also\
    \ create/edit/delete tests.\n        // You can also create/edit/delete constraints.\n\
    \        // You can also create/edit/delete hints.\n        // You can also create/edit/delete\
    \ time limits.\n        // You can also create/edit/delete memory limits.\n  \
    \      // You can also create/edit/delete output limits.\n        // You can also\
    \ create/edit/delete tests.\n        // You can also create/edit", "        long\
    \ min = long.MaxValue;\n        long minIndex = -1;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n  \
    \              min = arr[i];\n                minIndex = i;\n            }\n \
    \       }\n        if (minIndex == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long> { min, minIndex };", "        // your\
    \ code here\n        return null;", "        long min = long.MaxValue;\n     \
    \   int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>() { min, minIndex };", "        // your code here\n        return\
    \ new List<long>();", "        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        long min = arr[0];\n        int minIndex = 0;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i]\
    \ < min) {\n                min = arr[i];\n                minIndex = i;\n   \
    \         }\n        }\n        if (min % 2 == 0) {\n            return new List<long>()\
    \ { min, minIndex };\n        }\n        return new List<long>();", "        //\
    \ your code here\n        return new List<long>();", "        var evens = arr.Where(x\
    \ => x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        var min = evens.Min();\n        var index\
    \ = arr.IndexOf(min);\n        return new List<long> { min, index };"]
stop_tokens:
- "\n    }\n"
