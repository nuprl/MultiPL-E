name: HumanEval_68_pluck
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // \"Given a list representing a branch of a tree that has non-negative\
  \ integer nodes\n    // your task is to pluck one of the nodes and return it.\n\
  \    // The plucked node should be the node with the smallest even value.\n    //\
  \ If multiple nodes with the same smallest even value are found return the node\
  \ that has smallest index.\n    // The plucked node should be returned in a list,\
  \ [ smalest_value, its index ],\n    // If there are no even values or the given\
  \ list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new\
  \ long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,\
  \ (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n\
  \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
  \    // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n\
  \    // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
  \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
  \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n\
  \    // so we will choose the first zero, which has the smallest index.\n    //\
  \ Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
  \    public static List<long> Pluck(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,\
  \ (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,\
  \ (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        // your code here\n        return new List<long>();", "   \
    \     long min = long.MaxValue;\n        long index = -1;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                index = i;\n            }\n\
    \        }\n        if (index == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { min, index };", "        long min\
    \ = long.MaxValue;\n        int minIndex = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return new List<long>();\n        }\n\
    \        return new List<long> { min, minIndex };", "        // your code here\n\
    \        return new List<long>();", "        if (arr.Count == 0) return new List<long>();\n\
    \        long min = arr.Min();\n        if (min % 2 == 1) return new List<long>();\n\
    \        int minIndex = arr.IndexOf(min);\n        return new List<long> { min,\
    \ minIndex };", "        // Your code goes here\n        return new List<long>();",
  "        long min = long.MaxValue;\n        long index = -1;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min)\
    \ {\n                min = arr[i];\n                index = i;\n            }\n\
    \        }\n        if (index == -1) {\n            return new List<long>();\n\
    \        }\n        return new List<long>() { min, index };", "        long min\
    \ = long.MaxValue;\n        int minIndex = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                minIndex = i;\n            }\n        }\n   \
    \     if (minIndex == -1) {\n            return new List<long>();\n        }\n\
    \        return new List<long>() { min, minIndex };", "        // Your code here\n\
    \        return new List<long>();", "        long min = Int64.MaxValue;\n    \
    \    long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n    \
    \        if (arr[i] < min && arr[i] % 2 == 0) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>() { min, minIndex };", "        // your code here\n        return\
    \ new List<long>();", "        // your code here\n        return null;", "   \
    \     // Your code goes here.\n        // Good luck!\n        return null;", " \
    \       // Your code goes here.\n        return null;", "        // Your code\
    \ goes here\n        return new List<long>();", "        long min = long.MaxValue;\n\
    \        int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long>() { min, minIndex };", "        long min = long.MaxValue;\n     \
    \   int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ == -1) {\n            return new List<long>();\n        }\n        return new\
    \ List<long> { min, minIndex };", "        // your code here\n        return null;",
  "        // your code here\n        return new List<long>();", "        long min\
    \ = long.MaxValue;\n        long index = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n               \
    \ min = arr[i];\n                index = i;\n            }\n        }\n      \
    \  if (index == -1) {\n            return new List<long>();\n        }\n     \
    \   return new List<long> { min, index };"]
stop_tokens:
- "\n    }\n"
