name: HumanEval_95_check_dict_case
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a dictionary, return true if all keys are strings in lower\
  \ \n    // case or all keys are strings in upper case, else return false.\n    //\
  \ The function should return false is the given dictionary is empty.\n    // Examples:\n\
  \    // >>> CheckDictCase((new Dictionary<string,string>(){{\"a\", \"apple\"}, {\"\
  b\", \"banana\"}}))\n    // (true)\n    // >>> CheckDictCase((new Dictionary<string,string>(){{\"\
  a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))\n    // (false)\n \
  \   // >>> CheckDictCase((new Dictionary<string,string>(){{\"a\", \"apple\"}, {8L,\
  \ \"banana\"}, {\"a\", \"apple\"}}))\n    // (false)\n    // >>> CheckDictCase((new\
  \ Dictionary<string,string>(){{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\"\
  , \"Houston\"}}))\n    // (false)\n    // >>> CheckDictCase((new Dictionary<string,string>(){{\"\
  STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))\n    // (true)\n    public static bool\
  \ CheckDictCase(Dictionary<string,string> dict) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"p\", \"pineapple\"}, {\"b\", \"banana\"}})) ==\
  \ (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"\
  p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})) == (false));\n\
  \    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"p\", \"pineapple\"\
  }, {\"5\", \"banana\"}, {\"a\", \"apple\"}})) == (false));\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\"\
  , \"Houston\"}})) == (false));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"\
  STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})) == (true));\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))\
  \ == (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        bool lower = true;\n        bool upper = true;\n        foreach\
    \ (var k in dict.Keys) {\n            if (k.ToLower() != k) {\n              \
    \  lower = false;\n            }\n            if (k.ToUpper() != k) {\n      \
    \          upper = false;\n            }\n        }\n        return lower || upper;",
  '        return dict.Keys.All(key => key.All(char.IsUpper)) || dict.Keys.All(key
    => key.All(char.IsLower));', '        return dict.Keys.All(k => k.ToUpper() ==
    k) || dict.Keys.All(k => k.ToLower() == k);', '        return dict.Keys.All(k
    => k.ToUpper() == k) || dict.Keys.All(k => k.ToLower() == k);', "        // TODO:\
    \ Implement this function\n        return false;", "        bool lower = true;\n\
    \        bool upper = true;\n        foreach (string key in dict.Keys) {\n   \
    \         lower = lower && key.ToLower() == key;\n            upper = upper &&\
    \ key.ToUpper() == key;\n        }\n        return lower || upper;", '        return
    dict.Keys.All(k => k.All(char.IsUpper)) || dict.Keys.All(k => k.All(char.IsLower));',
  "        // Your code here\n        return false;", "        bool lower = true;\n\
    \        bool upper = true;\n        foreach (string key in dict.Keys) {\n   \
    \         lower = lower && key.Equals(key.ToLower());\n            upper = upper\
    \ && key.Equals(key.ToUpper());\n        }\n        return lower || upper;", " \
    \       if (dict.Count == 0) {\n            return false;\n        }\n       \
    \ bool allLower = true;\n        bool allUpper = true;\n        foreach (string\
    \ key in dict.Keys) {\n            if (key.ToUpper() != key) {\n             \
    \   allUpper = false;\n            }\n            if (key.ToLower() != key) {\n\
    \                allLower = false;\n            }\n        }\n        return allLower\
    \ || allUpper;", "        // TODO: Implement this function\n        return false;",
  '        return dict.Keys.All(k => k.All(c => char.IsUpper(c))) || dict.Keys.All(k
    => k.All(c => char.IsLower(c)));', "        if (dict.Count == 0) {\n         \
    \   return false;\n        }\n        bool allLower = true;\n        bool allUpper\
    \ = true;\n        foreach (var key in dict.Keys) {\n            if (key.ToUpper()\
    \ != key) {\n                allUpper = false;\n            }\n            if\
    \ (key.ToLower() != key) {\n                allLower = false;\n            }\n\
    \        }\n        return allLower || allUpper;", "        bool lower = true;\n\
    \        bool upper = true;\n        foreach (var key in dict.Keys) {\n      \
    \      lower = lower && key.ToLower() == key;\n            upper = upper && key.ToUpper()\
    \ == key;\n        }\n        return lower || upper;", "        if (dict.Count\
    \ == 0) {\n            return false;\n        }\n        bool allLower = true;\n\
    \        bool allUpper = true;\n        foreach (string key in dict.Keys) {\n\
    \            if (key.ToUpper() != key) {\n                allUpper = false;\n\
    \            }\n            if (key.ToLower() != key) {\n                allLower\
    \ = false;\n            }\n        }\n        return allLower || allUpper;", " \
    \       // TODO: Implement your solution here.\n        return false;", "    \
    \    bool allLower = true;\n        bool allUpper = true;\n        foreach (string\
    \ key in dict.Keys) {\n            if (key.ToUpper() == key) {\n             \
    \   allLower = false;\n            } else if (key.ToLower() == key) {\n      \
    \          allUpper = false;\n            } else {\n                return false;\n\
    \            }\n        }\n        return !(allLower && allUpper);", "       \
    \ // TODO: Implement this function\n        return false;", "        bool lower\
    \ = true;\n        bool upper = true;\n        foreach (string key in dict.Keys)\
    \ {\n            lower = lower && key.ToLower() == key;\n            upper = upper\
    \ && key.ToUpper() == key;\n        }\n        return lower || upper;", '        return
    false;']
stop_tokens:
- "\n    }\n"
