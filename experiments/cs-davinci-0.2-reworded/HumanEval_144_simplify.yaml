name: HumanEval_144_simplify
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Your task is to implement a function that will simplify the\
  \ expression\n    // x * n. The function returns true if x * n evaluates to a whole\
  \ number and false\n    // otherwise. Both x and n, are string representation of\
  \ a fraction, and have the following format,\n    // <numerator>/<denominator> where\
  \ both numerator and denominator are positive whole numbers.\n    // You can assume\
  \ that x, and n are valid fractions, and do not have zero as denominator.\n    //\
  \ >>> Simplify((\"1/5\"), (\"5/1\"))\n    // (true)\n    // >>> Simplify((\"1/6\"\
  ), (\"2/1\"))\n    // (false)\n    // >>> Simplify((\"7/10\"), (\"10/2\"))\n   \
  \ // (false)\n    public static bool Simplify(string x, string n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Simplify((\"\
  1/5\"), (\"5/1\")) == (true));\n    Debug.Assert(Simplify((\"1/6\"), (\"2/1\"))\
  \ == (false));\n    Debug.Assert(Simplify((\"5/1\"), (\"3/1\")) == (true));\n  \
  \  Debug.Assert(Simplify((\"7/10\"), (\"10/2\")) == (false));\n    Debug.Assert(Simplify((\"\
  2/10\"), (\"50/10\")) == (true));\n    Debug.Assert(Simplify((\"7/2\"), (\"4/2\"\
  )) == (true));\n    Debug.Assert(Simplify((\"11/6\"), (\"6/1\")) == (true));\n \
  \   Debug.Assert(Simplify((\"2/3\"), (\"5/2\")) == (false));\n    Debug.Assert(Simplify((\"\
  5/2\"), (\"3/5\")) == (false));\n    Debug.Assert(Simplify((\"2/4\"), (\"8/4\"))\
  \ == (true));\n    Debug.Assert(Simplify((\"2/4\"), (\"4/2\")) == (true));\n   \
  \ Debug.Assert(Simplify((\"1/5\"), (\"5/1\")) == (true));\n    Debug.Assert(Simplify((\"\
  1/5\"), (\"1/5\")) == (false));\n    }\n\n}\n"
completions: ["        var xParts = x.Split('/');\n        var nParts = n.Split('/');\n\
    \        var xNumerator = BigInteger.Parse(xParts[0]);\n        var xDenominator\
    \ = BigInteger.Parse(xParts[1]);\n        var nNumerator = BigInteger.Parse(nParts[0]);\n\
    \        var nDenominator = BigInteger.Parse(nParts[1]);\n        var numerator\
    \ = xNumerator * nDenominator;\n        var denominator = xDenominator * nNumerator;\n\
    \        var gcd = BigInteger.GreatestCommonDivisor(numerator, denominator);\n\
    \        numerator /= gcd;\n        denominator /= gcd;\n        return denominator\
    \ == 1;", "        var xSplit = x.Split('/');\n        var nSplit = n.Split('/');\n\
    \        var xNum = BigInteger.Parse(xSplit[0]);\n        var xDen = BigInteger.Parse(xSplit[1]);\n\
    \        var nNum = BigInteger.Parse(nSplit[0]);\n        var nDen = BigInteger.Parse(nSplit[1]);\n\
    \        var xNumN = xNum * nDen;\n        var nNumX = nNum * xDen;\n        var\
    \ xDenN = xDen * nDen;\n        var nDenX = nDen * xDen;\n        var xNumNMod\
    \ = xNumN % xDenN;\n        var nNumXMod = nNumX % nDenX;\n        return xNumNMod\
    \ == 0 && nNumXMod == 0;", "        var xParts = x.Split('/');\n        var nParts\
    \ = n.Split('/');\n        var xNumerator = BigInteger.Parse(xParts[0]);\n   \
    \     var xDenominator = BigInteger.Parse(xParts[1]);\n        var nNumerator\
    \ = BigInteger.Parse(nParts[0]);\n        var nDenominator = BigInteger.Parse(nParts[1]);\n\
    \        var result = xNumerator * nDenominator * nNumerator * xDenominator;\n\
    \        return result % (xDenominator * nDenominator) == 0;", "        var x_parts\
    \ = x.Split('/');\n        var n_parts = n.Split('/');\n        var x_num = BigInteger.Parse(x_parts[0]);\n\
    \        var x_den = BigInteger.Parse(x_parts[1]);\n        var n_num = BigInteger.Parse(n_parts[0]);\n\
    \        var n_den = BigInteger.Parse(n_parts[1]);\n        var x_num_n = x_num\
    \ * n_den;\n        var x_den_n = x_den * n_num;\n        var gcd = BigInteger.GreatestCommonDivisor(x_num_n,\
    \ x_den_n);\n        return x_num_n % gcd == 0 && x_den_n % gcd == 0;", "    \
    \    var xSplit = x.Split('/');\n        var nSplit = n.Split('/');\n        var\
    \ xNum = BigInteger.Parse(xSplit[0]);\n        var xDen = BigInteger.Parse(xSplit[1]);\n\
    \        var nNum = BigInteger.Parse(nSplit[0]);\n        var nDen = BigInteger.Parse(nSplit[1]);\n\
    \        var num = xNum * nNum;\n        var den = xDen * nDen;\n        return\
    \ num % den == 0;", "        var x_n = x.Split('/');\n        var n_n = n.Split('/');\n\
    \        var x_num = BigInteger.Parse(x_n[0]);\n        var x_den = BigInteger.Parse(x_n[1]);\n\
    \        var n_num = BigInteger.Parse(n_n[0]);\n        var n_den = BigInteger.Parse(n_n[1]);\n\
    \        var num = x_num * n_num;\n        var den = x_den * n_den;\n        return\
    \ num % den == 0;", "        var xParts = x.Split('/');\n        var nParts =\
    \ n.Split('/');\n        var xNumerator = BigInteger.Parse(xParts[0]);\n     \
    \   var xDenominator = BigInteger.Parse(xParts[1]);\n        var nNumerator =\
    \ BigInteger.Parse(nParts[0]);\n        var nDenominator = BigInteger.Parse(nParts[1]);\n\
    \        var result = xNumerator * nDenominator * nNumerator * xDenominator;\n\
    \        return result % (xDenominator * nDenominator) == 0;", "        var x_n\
    \ = x.Split('/');\n        var n_n = n.Split('/');\n        var x_num = BigInteger.Parse(x_n[0]);\n\
    \        var x_den = BigInteger.Parse(x_n[1]);\n        var n_num = BigInteger.Parse(n_n[0]);\n\
    \        var n_den = BigInteger.Parse(n_n[1]);\n        var num = x_num * n_num;\n\
    \        var den = x_den * n_den;\n        var gcd = BigInteger.GreatestCommonDivisor(num,\
    \ den);\n        num /= gcd;\n        den /= gcd;\n        return num % den ==\
    \ 0;", "        var x_n = x.Split('/');\n        var n_n = n.Split('/');\n   \
    \     var x_num = BigInteger.Parse(x_n[0]);\n        var x_den = BigInteger.Parse(x_n[1]);\n\
    \        var n_num = BigInteger.Parse(n_n[0]);\n        var n_den = BigInteger.Parse(n_n[1]);\n\
    \        var num = x_num * n_num;\n        var den = x_den * n_den;\n        var\
    \ gcd = BigInteger.GreatestCommonDivisor(num, den);\n        num /= gcd;\n   \
    \     den /= gcd;\n        return num % den == 0;", "        var xParts = x.Split('/');\n\
    \        var nParts = n.Split('/');\n        var xNumerator = BigInteger.Parse(xParts[0]);\n\
    \        var xDenominator = BigInteger.Parse(xParts[1]);\n        var nNumerator\
    \ = BigInteger.Parse(nParts[0]);\n        var nDenominator = BigInteger.Parse(nParts[1]);\n\
    \        var result = xNumerator * nDenominator * nNumerator * xDenominator;\n\
    \        return result % (xDenominator * nDenominator) == 0;", "        var xParts\
    \ = x.Split('/');\n        var nParts = n.Split('/');\n        var xNumerator\
    \ = BigInteger.Parse(xParts[0]);\n        var xDenominator = BigInteger.Parse(xParts[1]);\n\
    \        var nNumerator = BigInteger.Parse(nParts[0]);\n        var nDenominator\
    \ = BigInteger.Parse(nParts[1]);\n        var product = xNumerator * nNumerator;\n\
    \        var divisor = xDenominator * nDenominator;\n        return product %\
    \ divisor == 0;", "        var x_parts = x.Split('/');\n        var n_parts =\
    \ n.Split('/');\n        var x_num = BigInteger.Parse(x_parts[0]);\n        var\
    \ x_den = BigInteger.Parse(x_parts[1]);\n        var n_num = BigInteger.Parse(n_parts[0]);\n\
    \        var n_den = BigInteger.Parse(n_parts[1]);\n        var num = x_num *\
    \ n_num;\n        var den = x_den * n_den;\n        var gcd = BigInteger.GreatestCommonDivisor(num,\
    \ den);\n        num /= gcd;\n        den /= gcd;\n        return num % den ==\
    \ 0;", "        var xf = x.Split('/');\n        var nf = n.Split('/');\n     \
    \   var xn = BigInteger.Parse(xf[0]);\n        var xd = BigInteger.Parse(xf[1]);\n\
    \        var nn = BigInteger.Parse(nf[0]);\n        var nd = BigInteger.Parse(nf[1]);\n\
    \        var num = xn * nn;\n        var den = xd * nd;\n        var gcd = BigInteger.GreatestCommonDivisor(num,\
    \ den);\n        num /= gcd;\n        den /= gcd;\n        return num % den ==\
    \ 0;", "        var xParts = x.Split('/');\n        var nParts = n.Split('/');\n\
    \        var xNumerator = BigInteger.Parse(xParts[0]);\n        var xDenominator\
    \ = BigInteger.Parse(xParts[1]);\n        var nNumerator = BigInteger.Parse(nParts[0]);\n\
    \        var nDenominator = BigInteger.Parse(nParts[1]);\n        var numerator\
    \ = xNumerator * nDenominator;\n        var denominator = xDenominator * nNumerator;\n\
    \        var gcd = BigInteger.GreatestCommonDivisor(numerator, denominator);\n\
    \        return gcd == 1;", "        var x_parts = x.Split('/');\n        var\
    \ n_parts = n.Split('/');\n        var x_num = BigInteger.Parse(x_parts[0]);\n\
    \        var x_den = BigInteger.Parse(x_parts[1]);\n        var n_num = BigInteger.Parse(n_parts[0]);\n\
    \        var n_den = BigInteger.Parse(n_parts[1]);\n        var num = x_num *\
    \ n_num;\n        var den = x_den * n_den;\n        var gcd = BigInteger.GreatestCommonDivisor(num,\
    \ den);\n        num /= gcd;\n        den /= gcd;\n        return num % den ==\
    \ 0;", "        var x_parts = x.Split('/');\n        var n_parts = n.Split('/');\n\
    \        var x_num = BigInteger.Parse(x_parts[0]);\n        var x_den = BigInteger.Parse(x_parts[1]);\n\
    \        var n_num = BigInteger.Parse(n_parts[0]);\n        var n_den = BigInteger.Parse(n_parts[1]);\n\
    \        var num = x_num * n_num;\n        var den = x_den * n_den;\n        var\
    \ gcd = BigInteger.GreatestCommonDivisor(num, den);\n        num /= gcd;\n   \
    \     den /= gcd;\n        return num % den == 0;", "        var xn = x.Split('/');\n\
    \        var nn = n.Split('/');\n        var xnumerator = BigInteger.Parse(xn[0]);\n\
    \        var xdenominator = BigInteger.Parse(xn[1]);\n        var nnumerator =\
    \ BigInteger.Parse(nn[0]);\n        var ndenominator = BigInteger.Parse(nn[1]);\n\
    \        var xnumerator2 = xnumerator * ndenominator;\n        var xdenominator2\
    \ = xdenominator * nnumerator;\n        var gcd = BigInteger.GreatestCommonDivisor(xnumerator2,\
    \ xdenominator2);\n        return xnumerator2 % gcd == 0 && xdenominator2 % gcd\
    \ == 0;", "        var x_n = x.Split('/');\n        var n_n = n.Split('/');\n\
    \        var x_num = BigInteger.Parse(x_n[0]);\n        var x_den = BigInteger.Parse(x_n[1]);\n\
    \        var n_num = BigInteger.Parse(n_n[0]);\n        var n_den = BigInteger.Parse(n_n[1]);\n\
    \        var num = x_num * n_num;\n        var den = x_den * n_den;\n        var\
    \ gcd = BigInteger.GreatestCommonDivisor(num, den);\n        num /= gcd;\n   \
    \     den /= gcd;\n        return num % den == 0;", "        var xParts = x.Split('/');\n\
    \        var nParts = n.Split('/');\n        var xNumerator = BigInteger.Parse(xParts[0]);\n\
    \        var xDenominator = BigInteger.Parse(xParts[1]);\n        var nNumerator\
    \ = BigInteger.Parse(nParts[0]);\n        var nDenominator = BigInteger.Parse(nParts[1]);\n\
    \        var productNumerator = xNumerator * nNumerator;\n        var productDenominator\
    \ = xDenominator * nDenominator;\n        var gcd = BigInteger.GreatestCommonDivisor(productNumerator,\
    \ productDenominator);\n        return productNumerator % productDenominator ==\
    \ 0;", "        var x_numerator = int.Parse(x.Split('/')[0]);\n        var x_denominator\
    \ = int.Parse(x.Split('/')[1]);\n        var n_numerator = int.Parse(n.Split('/')[0]);\n\
    \        var n_denominator = int.Parse(n.Split('/')[1]);\n        var product_numerator\
    \ = x_numerator * n_numerator;\n        var product_denominator = x_denominator\
    \ * n_denominator;\n        var gcd = GCD(product_numerator, product_denominator);\n\
    \        product_numerator /= gcd;\n        product_denominator /= gcd;\n    \
    \    if (product_numerator % product_denominator == 0) {\n            return true;\n\
    \        }\n        return false;"]
stop_tokens:
- "\n    }\n"
