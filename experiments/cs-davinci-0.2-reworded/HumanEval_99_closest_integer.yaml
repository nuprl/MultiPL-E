name: HumanEval_99_closest_integer
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that takes a value (string) representing a\
  \ number\n    // and returns the closest integer to it. If the number is equidistant\n\
  \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
  \ ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n\
  \    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given\
  \ number is equidistant\n    // from two integers, the one you should return is\
  \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
  14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n\
  \    public static long ClosestInteger(string value) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"\
  10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"\
  -15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n\
  \    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n"
completions: ["        // Your code goes here\n        return 0;", "        double\
    \ d = double.Parse(value);\n        return (long)Math.Round(d);", '        return
    0;', "        double d = double.Parse(value);\n        long l = (long)d;\n   \
    \     if (d - l >= 0.5) {\n            return l + 1;\n        } else {\n     \
    \       return l;\n        }", '        return 0;', "        // Your code goes\
    \ here\n        return 0;", "        // Convert the string to a double\n     \
    \   double d = double.Parse(value);\n        // Round the double to the nearest\
    \ integer\n        long l = (long)Math.Round(d);\n        // If the double is\
    \ equidistant from two integers, round it away from zero\n        if (Math.Abs(d\
    \ - l) == 0.5) {\n            if (d > 0) {\n                l += 1;\n        \
    \    } else {\n                l -= 1;\n            }\n        }\n        // Return\
    \ the closest integer\n        return l;", "        // Your code goes here\n \
    \       return 0;", "        // >>> ClosestInteger((\"10\"))\n        // (10L)\n\
    \        // >>> ClosestInteger((\"15.3\"))\n        // (15L)\n        // >>> ClosestInteger((\"\
    -15.3\"))\n        // (-15L)\n        // >>> ClosestInteger((\"14.5\"))\n    \
    \    // (15L)\n        // >>> ClosestInteger((\"-14.5\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"14.6\"))\n        // (15L)\n        // >>> ClosestInteger((\"\
    -14.6\"))\n        // (-15L)\n        // >>> ClosestInteger((\"14.4\"))\n    \
    \    // (14L)\n        // >>> ClosestInteger((\"-14.4\"))\n        // (-14L)\n\
    \        // >>> ClosestInteger((\"14.0\"))\n        // (14L)\n        // >>> ClosestInteger((\"\
    -14.0\"))\n        // (-14L)\n        // >>> ClosestInteger((\"14.1\"))\n    \
    \    // (14L)\n        // >>> ClosestInteger((\"-14.1\"))\n        // (-14L)\n\
    \        // >>> ClosestInteger((\"14.9\"))\n        // (15L)\n        // >>> ClosestInteger((\"\
    -14.9\"))\n        // (-15L)\n        // >>> ClosestInteger((\"14.99\"))\n   \
    \     // (15L)\n        // >>> ClosestInteger((\"-14.99\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"14.5\"))\n        // (15L)\n        // >>> ClosestInteger((\"\
    -14.5\"))\n        // (-15L)\n        // >>> ClosestInteger((\"14.51\"))\n   \
    \     // (15L)\n        // >>> ClosestInteger((\"-14.51\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"14.49\"))\n        // (14L)\n        // >>>\
    \ ClosestInteger((\"-14.49\"))\n        // (-14L)\n        // >>> ClosestInteger((\"\
    14.499\"))\n        // (14L", "        // Your code goes here\n        double\
    \ d = double.Parse(value);\n        long l = (long)d;\n        if (d - l >= 0.5)\
    \ {\n            return l + 1;\n        } else {\n            return l;\n    \
    \    }", "        double d = double.Parse(value);\n        return (long)Math.Round(d);",
  "        // >>> ClosestInteger((\"10\"))\n        // (10L)\n        // >>> ClosestInteger((\"\
    15.3\"))\n        // (15L)\n        // >>> ClosestInteger((\"14.5\"))\n      \
    \  // (15L)\n        // >>> ClosestInteger((\"-14.5\"))\n        // (-15L)\n \
    \       // >>> ClosestInteger((\"-14.6\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"-14.4\"))\n        // (-14L)\n        // >>> ClosestInteger((\"\
    -14.0\"))\n        // (-14L)\n        // >>> ClosestInteger((\"-14.1\"))\n   \
    \     // (-14L)\n        // >>> ClosestInteger((\"-14.2\"))\n        // (-14L)\n\
    \        // >>> ClosestInteger((\"-14.3\"))\n        // (-14L)\n        // >>>\
    \ ClosestInteger((\"-14.4\"))\n        // (-14L)\n        // >>> ClosestInteger((\"\
    -14.5\"))\n        // (-15L)\n        // >>> ClosestInteger((\"-14.6\"))\n   \
    \     // (-15L)\n        // >>> ClosestInteger((\"-14.7\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"-14.8\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"-14.9\"))\n        // (-15L)\n        // >>> ClosestInteger((\"\
    -15.0\"))\n        // (-15L)\n        // >>> ClosestInteger((\"-15.1\"))\n   \
    \     // (-15L)\n        // >>> ClosestInteger((\"-15.2\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"-15.3\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"-15.4\"))\n        // (-15L)\n        // >>> ClosestInteger((\"\
    -15.5\"))\n        // (-16L)\n        // >>> ClosestInteger((\"-15.6\"))\n   \
    \     // (-16L)\n        // >>> ClosestInteger((\"-", "        // Your code here\n\
    \        return 0;", "        // Your code goes here\n        return 0;", "  \
    \      // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // TODO: Implement this function\n        return 0;", '        return 0;',
  '        return (long)Math.Round(double.Parse(value));', "        // TODO: Implement\
    \ this function\n        return 0;", "        // Your code goes here.\n      \
    \  double d = double.Parse(value);\n        return (long)Math.Round(d);", "  \
    \      // Your code goes here\n        return 0;", "        // Your code goes\
    \ here.\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // >>> ClosestInteger((\"10\"))\n        // (10L)\n        // >>> ClosestInteger((\"\
    15.3\"))\n        // (15L)\n        // >>> ClosestInteger((\"-15.3\"))\n     \
    \   // (-15L)\n        // >>> ClosestInteger((\"-15.6\"))\n        // (-16L)\n\
    \        // >>> ClosestInteger((\"-15.5\"))\n        // (-16L)\n        // >>>\
    \ ClosestInteger((\"-15.4\"))\n        // (-15L)\n        // >>> ClosestInteger((\"\
    -15.0\"))\n        // (-15L)\n        // >>> ClosestInteger((\"-14.5\"))\n   \
    \     // (-15L)\n        // >>> ClosestInteger((\"-14.0\"))\n        // (-14L)\n\
    \        // >>> ClosestInteger((\"-13.5\"))\n        // (-14L)\n        // >>>\
    \ ClosestInteger((\"-13.0\"))\n        // (-13L)\n        // >>> ClosestInteger((\"\
    -12.5\"))\n        // (-13L)\n        // >>> ClosestInteger((\"-12.0\"))\n   \
    \     // (-12L)\n        // >>> ClosestInteger((\"-11.5\"))\n        // (-12L)\n\
    \        // >>> ClosestInteger((\"-11.0\"))\n        // (-11L)\n        // >>>\
    \ ClosestInteger((\"-10.5\"))\n        // (-11L)\n        // >>> ClosestInteger((\"\
    -10.0\"))\n        // (-10L)\n        // >>> ClosestInteger((\"-9.5\"))\n    \
    \    // (-10L)\n        // >>> ClosestInteger((\"-9.0\"))\n        // (-9L)\n\
    \        // >>> ClosestInteger((\"-8.5\"))\n        // (-9L)\n        // >>> ClosestInteger((\"\
    -8.0\"))\n        // (-8L)\n        // >>> ClosestInteger((\"-7.5\"))\n      \
    \  // (-8L)\n        // >>> ClosestInteger((\"-7.0\"))\n        // (-7L)\n   \
    \     // >>> ClosestInteger((\"", "        // TODO: Implement this function\n\
    \        return 0;", "        // Your code goes here\n        return 0;", "  \
    \      // TODO: Implement this function\n        return 0;", "        // TODO:\
    \ Implement this function\n        return 0;", "        // >>> ClosestInteger((\"\
    10\"))\n        // (10L)\n        // >>> ClosestInteger((\"15.3\"))\n        //\
    \ (15L)\n        // >>> ClosestInteger((\"14.5\"))\n        // (15L)\n       \
    \ // >>> ClosestInteger((\"-14.5\"))\n        // (-15L)\n        // >>> ClosestInteger((\"\
    -14.4\"))\n        // (-14L)\n        // >>> ClosestInteger((\"-14.6\"))\n   \
    \     // (-15L)\n        // >>> ClosestInteger((\"-14.5\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"-14.4\"))\n        // (-14L)\n        // >>>\
    \ ClosestInteger((\"-14.6\"))\n        // (-15L)\n        // >>> ClosestInteger((\"\
    -14.5\"))\n        // (-15L)\n        // >>> ClosestInteger((\"-14.4\"))\n   \
    \     // (-14L)\n        // >>> ClosestInteger((\"-14.6\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"-14.5\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"-14.4\"))\n        // (-14L)\n        // >>> ClosestInteger((\"\
    -14.6\"))\n        // (-15L)\n        // >>> ClosestInteger((\"-14.5\"))\n   \
    \     // (-15L)\n        // >>> ClosestInteger((\"-14.4\"))\n        // (-14L)\n\
    \        // >>> ClosestInteger((\"-14.6\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"-14.5\"))\n        // (-15L)\n        // >>> ClosestInteger((\"\
    -14.4\"))\n        // (-14L)\n        // >>> ClosestInteger((\"-14.6\"))\n   \
    \     // (-15L)\n        // >>> ClosestInteger((\"-14.5\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"-14.4\"))\n        // (-14L)\n        // >>>\
    \ ClosestInteger((\"-", "        // Your code goes here.\n        return 0;",
  '        return 0;', "        // your code here\n        return 0;", "        //\
    \ TODO: Implement this function\n        return 0;", "        // TODO: Implement\
    \ this function\n        return 0;", "        // Your code goes here\n       \
    \ return 0;", "        // Your code here\n        return 0;", "        // Your\
    \ code goes here\n        return 0;", "        // Your code goes here\n      \
    \  return 0;", "        // Your code goes here.\n        return 0;", "       \
    \ // >>> ClosestInteger((\"10\"))\n        // (10L)\n        // >>> ClosestInteger((\"\
    15.3\"))\n        // (15L)\n        // >>> ClosestInteger((\"-15.3\"))\n     \
    \   // (-15L)\n        // >>> ClosestInteger((\"14.5\"))\n        // (15L)\n \
    \       // >>> ClosestInteger((\"-14.5\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"14.4\"))\n        // (14L)\n        // >>> ClosestInteger((\"\
    -14.4\"))\n        // (-14L)\n        // >>> ClosestInteger((\"14.6\"))\n    \
    \    // (15L)\n        // >>> ClosestInteger((\"-14.6\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"14.5\"))\n        // (15L)\n        // >>> ClosestInteger((\"\
    -14.5\"))\n        // (-15L)\n        // >>> ClosestInteger((\"14.4\"))\n    \
    \    // (14L)\n        // >>> ClosestInteger((\"-14.4\"))\n        // (-14L)\n\
    \        // >>> ClosestInteger((\"14.6\"))\n        // (15L)\n        // >>> ClosestInteger((\"\
    -14.6\"))\n        // (-15L)\n        // >>> ClosestInteger((\"14.5\"))\n    \
    \    // (15L)\n        // >>> ClosestInteger((\"-14.5\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"14.4\"))\n        // (14L)\n        // >>> ClosestInteger((\"\
    -14.4\"))\n        // (-14L)\n        // >>> ClosestInteger((\"14.6\"))\n    \
    \    // (15L)\n        // >>> ClosestInteger((\"-14.6\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"14.5\"))\n        // (15L)\n        // >>> ClosestInteger((\"\
    -14.5\"))\n        // (-15L)\n        // >>> ClosestInteger((\"14.4\"))\n    \
    \    // (14L", '        return 0;', "        // Your code goes here.\n       \
    \ return 0;", "        // Your code goes here.\n        return 0;", "        //\
    \ Your code goes here.\n        // You may use the built-in round function.\n\
    \        // You may use the built-in abs function.\n        // You may use the\
    \ built-in int function.\n        // You may use the built-in float function.\n\
    \        // You may use the built-in str function.\n        // You may use the\
    \ built-in len function.\n        // You may use the built-in ord function.\n\
    \        // You may use the built-in chr function.\n        // You may use the\
    \ built-in range function.\n        // You may use the built-in zip function.\n\
    \        // You may use the built-in map function.\n        // You may use the\
    \ built-in reduce function.\n        // You may use the built-in filter function.\n\
    \        // You may use the built-in all function.\n        // You may use the\
    \ built-in any function.\n        // You may use the built-in min function.\n\
    \        // You may use the built-in max function.\n        // You may use the\
    \ built-in sum function.\n        // You may use the built-in sorted function.\n\
    \        // You may use the built-in reversed function.\n        // You may use\
    \ the built-in enumerate function.\n        // You may use the built-in reversed\
    \ function.\n        // You may use the built-in enumerate function.\n       \
    \ // You may use the built-in pow function.\n        // You may use the built-in\
    \ divmod function.\n        // You may use the built-in complex function.\n  \
    \      // You may use the built-in pow function.\n        // You may use the built-in\
    \ divmod function.\n        // You may use the built-in complex function.\n  \
    \      // You may use the built-in pow function.\n        // You may use the built-in\
    \ divmod function.\n        // You may use the built-in complex function.\n  \
    \      // You may use the built-in pow function.\n        // You may use the built-in\
    \ divmod function.\n        // You may use the built-in complex function.\n  \
    \      // You may use the built-in pow function.\n        // You may use the built-in\
    \ divmod function.\n        // You may use the built-in complex function.\n  \
    \     ", "        // Your code goes here\n        return 0;", "        // >>>\
    \ ClosestInteger((\"10\"))\n        // (10L)\n        // >>> ClosestInteger((\"\
    15.3\"))\n        // (15L)\n        // >>> ClosestInteger((\"15.6\"))\n      \
    \  // (16L)\n        // >>> ClosestInteger((\"-15.6\"))\n        // (-16L)\n \
    \       // >>> ClosestInteger((\"-15.3\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"-15.1\"))\n        // (-15L)\n        // >>> ClosestInteger((\"\
    -15.0\"))\n        // (-15L)\n        // >>> ClosestInteger((\"-15.0\"))\n   \
    \     // (-15L)\n        // >>> ClosestInteger((\"-15.1\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"-15.3\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"-15.6\"))\n        // (-16L)\n        // >>> ClosestInteger((\"\
    15.6\"))\n        // (16L)\n        // >>> ClosestInteger((\"15.3\"))\n      \
    \  // (15L)\n        // >>> ClosestInteger((\"15.0\"))\n        // (15L)\n   \
    \     // >>> ClosestInteger((\"15.1\"))\n        // (15L)\n        // >>> ClosestInteger((\"\
    15.0\"))\n        // (15L)\n        // >>> ClosestInteger((\"15.1\"))\n      \
    \  // (15L)\n        // >>> ClosestInteger((\"15.3\"))\n        // (15L)\n   \
    \     // >>> ClosestInteger((\"15.6\"))\n        // (16L)\n        // >>> ClosestInteger((\"\
    -15.6\"))\n        // (-16L)\n        // >>> ClosestInteger((\"-15.3\"))\n   \
    \     // (-15L)\n        // >>> ClosestInteger((\"-15.1\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"-15.0\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"-15.0\"))\n        // (-", '        return 0;', "        //\
    \ Your code goes here.\n        return 0;", "        // Your code goes here\n\
    \        return 0;", "        // Your code goes here.\n        return 0;", '        return
    0;', "        // Your code goes here\n        return 0;", "        // Your code\
    \ goes here\n        return 0;", "        // Your code goes here\n        return\
    \ 0;", "        // TODO: Implement\n        return 0;", "        // Your code\
    \ goes here\n        return 0;", "        // Your code goes here\n        return\
    \ 0;", "        // Your code goes here.\n        return 0;", '        return 0;',
  "        // TODO: Implement this function\n        return 0;", "        // Your\
    \ code goes here\n        return 0;", "        // Your code goes here.\n     \
    \   return 0;", "        // Your code goes here\n        return 0;", "       \
    \ // Your code goes here.\n        return 0;", "        // Write your code here\n\
    \        return 0;", '        return 0;', "        // Your code goes here\n  \
    \      return 0;", "        // Your code goes here\n        return 0;", "    \
    \    // TODO: Implement this function\n        return 0;", "        // Your code\
    \ goes here.\n        return 0;", "        // Your code goes here\n        return\
    \ 0;", "        // Your code goes here\n        return 0;", "        // Your code\
    \ goes here\n        return 0;", "        // Your code goes here\n        return\
    \ 0;", "        // >>> ClosestInteger((\"10\"))\n        // (10L)\n        //\
    \ >>> ClosestInteger((\"15.3\"))\n        // (15L)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> ClosestInteger((\"10\"))\n        // (10L)\n        // >>> ClosestInteger((\"\
    15.3\"))\n        // (15L)\n        // Note:\n        // Rounding away from zero\
    \ means that if the given number is equidistant\n        // from two integers,\
    \ the one you should return is the one that is the\n        // farthest from zero.\
    \ For example closest_integer(\"14.5\") should\n        // return 15 and closest_integer(\"\
    -14.5\") should return -15.\n        // >>> ClosestInteger((\"10\"))\n       \
    \ // (10L)\n        // >>> ClosestInteger((\"15.3\"))\n        // (15L)\n    \
    \    // Note:\n        // Rounding away from zero means that if the given number\
    \ is equidistant\n        // from two integers, the one you should return is the\
    \ one that is the\n        // farthest from zero. For example closest_integer(\"\
    14.5\") should\n        // return 15 and closest_integer(\"-14.5\") should return\
    \ -15.\n        // >>> ClosestInteger((\"10\"))\n        // (10L)\n        //\
    \ >>> ClosestInteger((\"15.3\"))\n        // (15L)\n        // Note:\n       \
    \ // Rounding away from zero means that if the given number is equidistant\n \
    \       // from two integers, the one you should return is the one that is the\n\
    \        // farthest from zero. For example closest_integer(\"14.5\") should\n\
    \        // return 15 and closest_integer(\"-14.5\") should return -15.\n    \
    \    // >>> ClosestInteger((\"10\"))\n        // (10L)\n        // >>> ClosestInteger((\"\
    15.3", "        // Your code here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code goes here\n        return 0;", "        // TODO: Implement\
    \ this function\n        return 0;", "        // Your code goes here.\n      \
    \  // You may use the built-in function round()\n        // to round a floating\
    \ point number.\n        // >>> round(3.14159)\n        // (3.0)\n        // >>>\
    \ round(3.5)\n        // (4.0)\n        // >>> round(3.6)\n        // (4.0)\n\
    \        // >>> round(3.1)\n        // (3.0)\n        // >>> round(3.0)\n    \
    \    // (3.0)\n        // >>> round(-3.1)\n        // (-3.0)\n        // >>> round(-3.5)\n\
    \        // (-4.0)\n        // >>> round(-3.6)\n        // (-4.0)\n        //\
    \ >>> round(-3.14159)\n        // (-3.0)\n        return 0;", "        // Your\
    \ code goes here\n        return 0;", "        // Your code goes here\n      \
    \  return 0;", "        // TODO: Implement this function\n        return 0;",
  '        return 0;', "        // Your code goes here.\n        return 0;", '        return
    0;', "        // Your code goes here.\n        return 0;", "        // Your code\
    \ goes here.\n        // You may use the built-in BigInteger class.\n        //\
    \ You may not use any other built-in classes.\n        // You may not use any\
    \ external libraries.\n        // You may not use any built-in functions.\n  \
    \      // You may not use any built-in operators.\n        // You may not use\
    \ any built-in types.\n        // You may not use any built-in constants.\n  \
    \      // You may not use any built-in variables.\n        // You may not use\
    \ any built-in methods.\n        // You may not use any built-in properties.\n\
    \        // You may not use any built-in events.\n        // You may not use any\
    \ built-in delegates.\n        // You may not use any built-in enumerations.\n\
    \        // You may not use any built-in structures.\n        // You may not use\
    \ any built-in interfaces.\n        // You may not use any built-in classes.\n\
    \        // You may not use any built-in namespaces.\n        // You may not use\
    \ any built-in keywords.\n        // You may not use any built-in preprocessor\
    \ directives.\n        // You may not use any built-in directives.\n        //\
    \ You may not use any built-in statements.\n        // You may not use any built-in\
    \ expressions.\n        // You may not use any built-in operators.\n        //\
    \ You may not use any built-in functions.\n        // You may not use any built-in\
    \ types.\n        // You may not use any built-in constants.\n        // You may\
    \ not use any built-in variables.\n        // You may not use any built-in methods.\n\
    \        // You may not use any built-in properties.\n        // You may not use\
    \ any built-in events.\n        // You may not use any built-in delegates.\n \
    \       // You may not use any built-in enumerations.\n        // You may not\
    \ use any built-in structures.\n        // You may not use any built-in interfaces.\n\
    \        // You may not use any built-in classes.\n        // You may not use\
    \ any built-in namespaces.\n        // You may not use any built-in keywords.\n\
    \        // You may not use any built-in preprocessor directives.\n       ", " \
    \       // Your code goes here.\n        return 0;", "        // Your code goes\
    \ here.\n        // You can add other functions to this file, if you need to.\n\
    \        // You can add other files to this project, if you need to.\n       \
    \ // You can add other projects to this solution, if you need to.\n        //\
    \ You can add other solutions to this solution, if you need to.\n        // You\
    \ can add other solutions to this solution, if you need to.\n        // You can\
    \ add other solutions to this solution, if you need to.\n        // You can add\
    \ other solutions to this solution, if you need to.\n        // You can add other\
    \ solutions to this solution, if you need to.\n        // You can add other solutions\
    \ to this solution, if you need to.\n        // You can add other solutions to\
    \ this solution, if you need to.\n        // You can add other solutions to this\
    \ solution, if you need to.\n        // You can add other solutions to this solution,\
    \ if you need to.\n        // You can add other solutions to this solution, if\
    \ you need to.\n        // You can add other solutions to this solution, if you\
    \ need to.\n        // You can add other solutions to this solution, if you need\
    \ to.\n        // You can add other solutions to this solution, if you need to.\n\
    \        // You can add other solutions to this solution, if you need to.\n  \
    \      // You can add other solutions to this solution, if you need to.\n    \
    \    // You can add other solutions to this solution, if you need to.\n      \
    \  // You can add other solutions to this solution, if you need to.\n        //\
    \ You can add other solutions to this solution, if you need to.\n        // You\
    \ can add other solutions to this solution, if you need to.\n        // You can\
    \ add other solutions to this solution, if you need to.\n        // You can add\
    \ other solutions to this solution, if you need to.\n        // You can add other\
    \ solutions to this solution, if you need to.\n        // You can add other solutions\
    \ to this solution, if you need to.\n        // You can add other solutions to\
    \ this solution, if you need to.\n        // You can add other solutions to this\
    \ solution, if you need to.\n        // You can add other solutions to this solution,\
    \ if you need to.\n        // You can add other solutions to this solution", " \
    \       // TODO: Implement this function\n        return 0;", "        // Your\
    \ code goes here.\n        return 0;", "        // Your code goes here\n     \
    \   return 0;", "        // Your code goes here.\n        return 0;", '        return
    (long)Math.Round(double.Parse(value));', "        // Your code goes here\n   \
    \     return 0;", "        // Your code goes here\n        return 0;", "     \
    \   // Your code goes here\n        return 0;", "        // Your code goes here.\n\
    \        return 0;", "        // TODO: Implement this function\n        return\
    \ 0;", "        double d = double.Parse(value);\n        long l = (long)d;\n \
    \       if (d - l >= 0.5) {\n            return l + 1;\n        } else {\n   \
    \         return l;\n        }", "        // Your code goes here\n        return\
    \ 0;", "        // Your code goes here.\n        return 0;", "        // >>> ClosestInteger((\"\
    10\"))\n        // (10L)\n        // >>> ClosestInteger((\"15.3\"))\n        //\
    \ (15L)\n        // >>> ClosestInteger((\"14.5\"))\n        // (15L)\n       \
    \ // >>> ClosestInteger((\"-14.5\"))\n        // (-15L)\n        // >>> ClosestInteger((\"\
    -14.6\"))\n        // (-15L)\n        // >>> ClosestInteger((\"-14.4\"))\n   \
    \     // (-14L)\n        // >>> ClosestInteger((\"-14.0\"))\n        // (-14L)\n\
    \        // >>> ClosestInteger((\"-14.1\"))\n        // (-14L)\n        // >>>\
    \ ClosestInteger((\"-14.2\"))\n        // (-14L)\n        // >>> ClosestInteger((\"\
    -14.3\"))\n        // (-14L)\n        // >>> ClosestInteger((\"-14.4\"))\n   \
    \     // (-14L)\n        // >>> ClosestInteger((\"-14.5\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"-14.6\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"-14.7\"))\n        // (-15L)\n        // >>> ClosestInteger((\"\
    -14.8\"))\n        // (-15L)\n        // >>> ClosestInteger((\"-14.9\"))\n   \
    \     // (-15L)\n        // >>> ClosestInteger((\"-15.0\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"-15.1\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"-15.2\"))\n        // (-15L)\n        // >>> ClosestInteger((\"\
    -15.3\"))\n        // (-15L)\n        // >>> ClosestInteger((\"-15.4\"))\n   \
    \     // (-15L)\n        // >>> ClosestInteger((\"-15.5\"))\n        // (-16L)\n\
    \        // >>> ClosestInteger((\"-15.6\"))\n        // (-16L)\n        // >>>\
    \ ClosestInteger((\"-", '        return 0;', "        // Your code goes here\n\
    \        return 0;", "        // Your code goes here\n        return 0;", "  \
    \      // Your code goes here.\n        return 0;", "        // Your code goes\
    \ here.\n        return 0;", "        // Your code goes here.\n        return\
    \ 0;", "        // Your code goes here\n        return 0;", "        // Your code\
    \ goes here.\n        return 0;", '        return (long)Math.Round(double.Parse(value));',
  "        // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", '        return 0;', "        // Your code goes here\n\
    \        return 0;", "        var v = double.Parse(value);\n        return (long)Math.Round(v,\
    \ MidpointRounding.AwayFromZero);", "        // Your code goes here.\n       \
    \ return 0;", "        // Your code goes here\n        return 0;", "        double\
    \ d = double.Parse(value);\n        return (long)Math.Round(d);", '        return
    0;', "        // Your code goes here\n        return 0;", '        return 0;',
  "        // Your code goes here\n        return 0;", '        return (long)Math.Round(double.Parse(value));',
  '        return 0;', "        // TODO: Implement this function\n        return 0;",
  "        // TODO: Implement this function\n        return 0;"]
stop_tokens:
- "\n    }\n"
