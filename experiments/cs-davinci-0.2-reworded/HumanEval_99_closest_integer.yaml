name: HumanEval_99_closest_integer
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that takes a value (string) representing a\
  \ number\n    // and returns the closest integer to it. If the number is equidistant\n\
  \    // from two integers, round it away from zero.\n    // Examples\n    // >>>\
  \ ClosestInteger((\"10\"))\n    // (10L)\n    // >>> ClosestInteger((\"15.3\"))\n\
  \    // (15L)\n    // Note:\n    // Rounding away from zero means that if the given\
  \ number is equidistant\n    // from two integers, the one you should return is\
  \ the one that is the\n    // farthest from zero. For example closest_integer(\"\
  14.5\") should\n    // return 15 and closest_integer(\"-14.5\") should return -15.\n\
  \    public static long ClosestInteger(string value) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ClosestInteger((\"\
  10\")) == (10L));\n    Debug.Assert(ClosestInteger((\"14.5\")) == (15L));\n    Debug.Assert(ClosestInteger((\"\
  -15.5\")) == (-16L));\n    Debug.Assert(ClosestInteger((\"15.3\")) == (15L));\n\
  \    Debug.Assert(ClosestInteger((\"0\")) == (0L));\n    }\n\n}\n"
completions: ["        // Your code goes here\n        return 0;", "        double\
    \ d = double.Parse(value);\n        return (long)Math.Round(d);", '        return
    0;', "        double d = double.Parse(value);\n        long l = (long)d;\n   \
    \     if (d - l >= 0.5) {\n            return l + 1;\n        } else {\n     \
    \       return l;\n        }", '        return 0;', "        // Your code goes\
    \ here\n        return 0;", "        // Convert the string to a double\n     \
    \   double d = double.Parse(value);\n        // Round the double to the nearest\
    \ integer\n        long l = (long)Math.Round(d);\n        // If the double is\
    \ equidistant from two integers, round it away from zero\n        if (Math.Abs(d\
    \ - l) == 0.5) {\n            if (d > 0) {\n                l += 1;\n        \
    \    } else {\n                l -= 1;\n            }\n        }\n        // Return\
    \ the closest integer\n        return l;", "        // Your code goes here\n \
    \       return 0;", "        // >>> ClosestInteger((\"10\"))\n        // (10L)\n\
    \        // >>> ClosestInteger((\"15.3\"))\n        // (15L)\n        // >>> ClosestInteger((\"\
    -15.3\"))\n        // (-15L)\n        // >>> ClosestInteger((\"14.5\"))\n    \
    \    // (15L)\n        // >>> ClosestInteger((\"-14.5\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"14.6\"))\n        // (15L)\n        // >>> ClosestInteger((\"\
    -14.6\"))\n        // (-15L)\n        // >>> ClosestInteger((\"14.4\"))\n    \
    \    // (14L)\n        // >>> ClosestInteger((\"-14.4\"))\n        // (-14L)\n\
    \        // >>> ClosestInteger((\"14.0\"))\n        // (14L)\n        // >>> ClosestInteger((\"\
    -14.0\"))\n        // (-14L)\n        // >>> ClosestInteger((\"14.1\"))\n    \
    \    // (14L)\n        // >>> ClosestInteger((\"-14.1\"))\n        // (-14L)\n\
    \        // >>> ClosestInteger((\"14.9\"))\n        // (15L)\n        // >>> ClosestInteger((\"\
    -14.9\"))\n        // (-15L)\n        // >>> ClosestInteger((\"14.99\"))\n   \
    \     // (15L)\n        // >>> ClosestInteger((\"-14.99\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"14.5\"))\n        // (15L)\n        // >>> ClosestInteger((\"\
    -14.5\"))\n        // (-15L)\n        // >>> ClosestInteger((\"14.51\"))\n   \
    \     // (15L)\n        // >>> ClosestInteger((\"-14.51\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"14.49\"))\n        // (14L)\n        // >>>\
    \ ClosestInteger((\"-14.49\"))\n        // (-14L)\n        // >>> ClosestInteger((\"\
    14.499\"))\n        // (14L", "        // Your code goes here\n        double\
    \ d = double.Parse(value);\n        long l = (long)d;\n        if (d - l >= 0.5)\
    \ {\n            return l + 1;\n        } else {\n            return l;\n    \
    \    }", "        double d = double.Parse(value);\n        return (long)Math.Round(d);",
  "        // >>> ClosestInteger((\"10\"))\n        // (10L)\n        // >>> ClosestInteger((\"\
    15.3\"))\n        // (15L)\n        // >>> ClosestInteger((\"14.5\"))\n      \
    \  // (15L)\n        // >>> ClosestInteger((\"-14.5\"))\n        // (-15L)\n \
    \       // >>> ClosestInteger((\"-14.6\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"-14.4\"))\n        // (-14L)\n        // >>> ClosestInteger((\"\
    -14.0\"))\n        // (-14L)\n        // >>> ClosestInteger((\"-14.1\"))\n   \
    \     // (-14L)\n        // >>> ClosestInteger((\"-14.2\"))\n        // (-14L)\n\
    \        // >>> ClosestInteger((\"-14.3\"))\n        // (-14L)\n        // >>>\
    \ ClosestInteger((\"-14.4\"))\n        // (-14L)\n        // >>> ClosestInteger((\"\
    -14.5\"))\n        // (-15L)\n        // >>> ClosestInteger((\"-14.6\"))\n   \
    \     // (-15L)\n        // >>> ClosestInteger((\"-14.7\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"-14.8\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"-14.9\"))\n        // (-15L)\n        // >>> ClosestInteger((\"\
    -15.0\"))\n        // (-15L)\n        // >>> ClosestInteger((\"-15.1\"))\n   \
    \     // (-15L)\n        // >>> ClosestInteger((\"-15.2\"))\n        // (-15L)\n\
    \        // >>> ClosestInteger((\"-15.3\"))\n        // (-15L)\n        // >>>\
    \ ClosestInteger((\"-15.4\"))\n        // (-15L)\n        // >>> ClosestInteger((\"\
    -15.5\"))\n        // (-16L)\n        // >>> ClosestInteger((\"-15.6\"))\n   \
    \     // (-16L)\n        // >>> ClosestInteger((\"-", "        // Your code here\n\
    \        return 0;", "        // Your code goes here\n        return 0;", "  \
    \      // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // TODO: Implement this function\n        return 0;", '        return 0;',
  '        return (long)Math.Round(double.Parse(value));']
stop_tokens:
- "\n    }\n"
