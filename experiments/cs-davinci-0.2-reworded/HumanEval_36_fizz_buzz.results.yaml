language: cs
name: HumanEval_36_fizz_buzz
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long result =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       result++;\n                    }\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 11; i < n; i += 11) {\n            if (i % 13 == 0)\
    \ {\n                count += 2;\n            } else {\n                count\
    \ += 1;\n            }\n        }\n        for (long i = 13; i < n; i += 13) {\n\
    \            if (i % 11 == 0) {\n                continue;\n            }\n  \
    \          count += 1;\n        }\n        return count;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n   \
    \ Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L)) ==\
    \ (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L))\
    \ == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L))\
    \ == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <42e619b285ac41ee8c682aa00f0d05b0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <42e619b285ac41ee8c682aa00f0d05b0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                var s = i.ToString();\n                for (int\
    \ j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n      \
    \                  count++;\n                    }\n                }\n      \
    \      }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string str = i.ToString();\n                foreach\
    \ (char c in str) {\n                    if (c == '7') {\n                   \
    \     count++;\n                    }\n                }\n            }\n    \
    \    }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (int i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                foreach\
    \ (char c in s) {\n                    if (c == '7') {\n                     \
    \   count++;\n                    }\n                }\n            }\n      \
    \  }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 11; i < n; i += 11) {\n            if (i % 13 == 0)\
    \ {\n                count += 2;\n            } else {\n                count\
    \ += 1;\n            }\n        }\n        return count;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n   \
    \ Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L)) ==\
    \ (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L))\
    \ == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L))\
    \ == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f635a3dbdca4c708a847a2267fbf934>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f635a3dbdca4c708a847a2267fbf934>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long result =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       result++;\n                    }\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                count += i.ToString().Count(c => c == '7');\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 11; i < n; i++) {\n            if (i % 11 == 0 ||\
    \ i % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                foreach\
    \ (char c in s) {\n                    if (c == '7') {\n                     \
    \   count++;\n                    }\n                }\n            }\n      \
    \  }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                foreach\
    \ (char c in s) {\n                    if (c == '7') {\n                     \
    \   count++;\n                    }\n                }\n            }\n      \
    \  }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long result =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                long j = i;\n                while (j > 0) {\n\
    \                    if (j % 10 == 7) {\n                        result++;\n \
    \                   }\n                    j /= 10;\n                }\n     \
    \       }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                if (i % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 10 % 10 == 7) {\n                \
    \    count++;\n                }\n                if (i / 100 % 10 == 7) {\n \
    \                   count++;\n                }\n                if (i / 1000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 10000 % 10 == 7) {\n                    count++;\n              \
    \  }\n                if (i / 100000 % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 1000000 % 10 == 7) {\n           \
    \         count++;\n                }\n                if (i / 10000000 % 10 ==\
    \ 7) {\n                    count++;\n                }\n                if (i\
    \ / 100000000 % 10 == 7) {\n                    count++;\n                }\n\
    \                if (i / 1000000000 % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 10000000000 % 10 == 7) {\n       \
    \             count++;\n                }\n                if (i / 100000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000 % 10 == 7) {\n                    count++;\n      \
    \          }\n                if (i / 10000000000000 % 10 == 7) {\n          \
    \          count++;\n                }\n                if (i / 100000000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000000 % 10 == 7) {\n                    count++;\n   \
    \             }\n                if (i / 10000000000000000 % 10 == 7) {\n    \
    \                count++;\n                }\n                if (i / 100000000000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000000000 % 10 == 7) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L))\
    \ == (0L));\n    Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L))\
    \ == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L))\
    \ == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                foreach\
    \ (char c in s) {\n                    if (c == '7') {\n                     \
    \   count++;\n                    }\n                }\n            }\n      \
    \  }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long ret = 0;\n\
    \        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i % 13\
    \ == 0) {\n                ret += i.ToString().Count(x => x == '7');\n       \
    \     }\n        }\n        return ret;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                if (i % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 10 % 10 == 7) {\n                \
    \    count++;\n                }\n                if (i / 100 % 10 == 7) {\n \
    \                   count++;\n                }\n                if (i / 1000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 10000 % 10 == 7) {\n                    count++;\n              \
    \  }\n                if (i / 100000 % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 1000000 % 10 == 7) {\n           \
    \         count++;\n                }\n                if (i / 10000000 % 10 ==\
    \ 7) {\n                    count++;\n                }\n                if (i\
    \ / 100000000 % 10 == 7) {\n                    count++;\n                }\n\
    \                if (i / 1000000000 % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 10000000000 % 10 == 7) {\n       \
    \             count++;\n                }\n                if (i / 100000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000 % 10 == 7) {\n                    count++;\n      \
    \          }\n                if (i / 10000000000000 % 10 == 7) {\n          \
    \          count++;\n                }\n                if (i / 100000000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000000 % 10 == 7) {\n                    count++;\n   \
    \             }\n                if (i / 10000000000000000 % 10 == 7) {\n    \
    \                count++;\n                }\n                if (i / 100000000000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000000000 % 10 == 7) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L))\
    \ == (0L));\n    Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L))\
    \ == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L))\
    \ == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 11; i < n; i++) {\n            if (i % 11 == 0 ||\
    \ i % 13 == 0) {\n                count += i.ToString().Count(c => c == '7');\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                if (i % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i > 10 && i / 10 % 10 == 7) {\n      \
    \              count++;\n                }\n                if (i > 100 && i /\
    \ 100 % 10 == 7) {\n                    count++;\n                }\n        \
    \        if (i > 1000 && i / 1000 % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i > 10000 && i / 10000 % 10 == 7) {\n\
    \                    count++;\n                }\n                if (i > 100000\
    \ && i / 100000 % 10 == 7) {\n                    count++;\n                }\n\
    \                if (i > 1000000 && i / 1000000 % 10 == 7) {\n               \
    \     count++;\n                }\n                if (i > 10000000 && i / 10000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i > 100000000 && i / 100000000 % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i > 1000000000 && i / 1000000000 % 10\
    \ == 7) {\n                    count++;\n                }\n                if\
    \ (i > 10000000000 && i / 10000000000 % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i > 100000000000 && i / 100000000000 %\
    \ 10 == 7) {\n                    count++;\n                }\n              \
    \  if (i > 1000000000000 && i / 1000000000000 % 10 == 7) {\n                 \
    \   count++;\n                }\n                if (i > 10000000000000 && i /\
    \ 10000000000000 % 10 == 7) {\n                    count++;\n                }\n\
    \                if (i > 100000000000000 && i / 100000000000000 % 10 == 7) {\n\
    \                    count++;\n                }\n                if (i > 1000000000000000\
    \ && i / 1000000000000000 % 10 == 7) {\n                    count++;\n       \
    \         }\n                if (i > 10000000000000000 && i / 10000000000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i > 100000000000000000 && i / 100000000000000000 % 10 == 7) {\n     \
    \               count++;\n                }\n                if (i >\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L))\
    \ == (0L));\n    Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L))\
    \ == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L))\
    \ == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpigh0ucr0.cs(74,24): error CS1525: Invalid expression term ''}''

    /tmp/tmpigh0ucr0.cs(74,24): error CS1026: ) expected

    /tmp/tmpigh0ucr0.cs(74,24): error CS1002: ; expected

    /tmp/tmpigh0ucr0.cs(76,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpigh0ucr0.cs(87,2): error CS1513: } expected

    '
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                var s = i.ToString();\n                for (int\
    \ j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n      \
    \                  count++;\n                    }\n                }\n      \
    \      }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long result =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       result++;\n                    }\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                foreach\
    \ (char c in s) {\n                    if (c == '7') {\n                     \
    \   count++;\n                    }\n                }\n            }\n      \
    \  }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                count += i.ToString().Count(c => c == '7');\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long result =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       result++;\n                    }\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                long j = i;\n                while (j > 0) {\n\
    \                    if (j % 10 == 7) {\n                        count++;\n  \
    \                  }\n                    j /= 10;\n                }\n      \
    \      }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                count += CountDigit(i, 7);\n            }\n  \
    \      }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpelzak8we.cs(20,26): error CS0103: The name ''CountDigit'' does not exist
    in the current context

    '
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string str = i.ToString();\n                for\
    \ (int j = 0; j < str.Length; j++) {\n                    if (str[j] == '7') {\n\
    \                        count++;\n                    }\n                }\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long result =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       result++;\n                    }\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                if (i % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 10 % 10 == 7) {\n                \
    \    count++;\n                }\n                if (i / 100 % 10 == 7) {\n \
    \                   count++;\n                }\n                if (i / 1000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 10000 % 10 == 7) {\n                    count++;\n              \
    \  }\n                if (i / 100000 % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 1000000 % 10 == 7) {\n           \
    \         count++;\n                }\n                if (i / 10000000 % 10 ==\
    \ 7) {\n                    count++;\n                }\n                if (i\
    \ / 100000000 % 10 == 7) {\n                    count++;\n                }\n\
    \                if (i / 1000000000 % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 10000000000 % 10 == 7) {\n       \
    \             count++;\n                }\n                if (i / 100000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000 % 10 == 7) {\n                    count++;\n      \
    \          }\n                if (i / 10000000000000 % 10 == 7) {\n          \
    \          count++;\n                }\n                if (i / 100000000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000000 % 10 == 7) {\n                    count++;\n   \
    \             }\n                if (i / 10000000000000000 % 10 == 7) {\n    \
    \                count++;\n                }\n                if (i / 100000000000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000000000 % 10 == 7) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L))\
    \ == (0L));\n    Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L))\
    \ == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L))\
    \ == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 7; i < n; i += 11) {\n            if (i % 13 == 0)\
    \ {\n                count++;\n            }\n            if (i % 11 == 0) {\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L))\
    \ == (0L));\n    Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L))\
    \ == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L))\
    \ == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <74d51df868ff4cff8688164674ac013d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <74d51df868ff4cff8688164674ac013d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long result =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       result++;\n                    }\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long result =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       result++;\n                    }\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long result =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       result++;\n                    }\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                long j = i;\n                while (j > 0) {\n\
    \                    if (j % 10 == 7) {\n                        count++;\n  \
    \                  }\n                    j /= 10;\n                }\n      \
    \      }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 11; i < n; i += 11) {\n            if (i % 13 == 0)\
    \ {\n                count += 1;\n            }\n            else {\n        \
    \        count += CountDigit(i, 7);\n            }\n        }\n        for (long\
    \ i = 13; i < n; i += 13) {\n            if (i % 11 == 0) {\n                continue;\n\
    \            }\n            count += CountDigit(i, 7);\n        }\n        return\
    \ count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L))\
    \ == (0L));\n    Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L))\
    \ == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L))\
    \ == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpazlzkhnb.cs(23,26): error CS0103: The name ''CountDigit'' does not exist
    in the current context

    /tmp/tmpazlzkhnb.cs(30,22): error CS0103: The name ''CountDigit'' does not exist
    in the current context

    '
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                if (i % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 10 % 10 == 7) {\n                \
    \    count++;\n                }\n                if (i / 100 % 10 == 7) {\n \
    \                   count++;\n                }\n                if (i / 1000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 10000 % 10 == 7) {\n                    count++;\n              \
    \  }\n                if (i / 100000 % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 1000000 % 10 == 7) {\n           \
    \         count++;\n                }\n                if (i / 10000000 % 10 ==\
    \ 7) {\n                    count++;\n                }\n                if (i\
    \ / 100000000 % 10 == 7) {\n                    count++;\n                }\n\
    \                if (i / 1000000000 % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 10000000000 % 10 == 7) {\n       \
    \             count++;\n                }\n                if (i / 100000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000 % 10 == 7) {\n                    count++;\n      \
    \          }\n                if (i / 10000000000000 % 10 == 7) {\n          \
    \          count++;\n                }\n                if (i / 100000000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000000 % 10 == 7) {\n                    count++;\n   \
    \             }\n                if (i / 10000000000000000 % 10 == 7) {\n    \
    \                count++;\n                }\n                if (i / 100000000000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000000000 % 10 == 7) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L))\
    \ == (0L));\n    Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L))\
    \ == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L))\
    \ == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                foreach\
    \ (char c in s) {\n                    if (c == '7') {\n                     \
    \   count++;\n                    }\n                }\n            }\n      \
    \  }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long result =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       result++;\n                    }\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                if (i % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 10 % 10 == 7) {\n                \
    \    count++;\n                }\n                if (i / 100 % 10 == 7) {\n \
    \                   count++;\n                }\n                if (i / 1000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 10000 % 10 == 7) {\n                    count++;\n              \
    \  }\n                if (i / 100000 % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 1000000 % 10 == 7) {\n           \
    \         count++;\n                }\n                if (i / 10000000 % 10 ==\
    \ 7) {\n                    count++;\n                }\n                if (i\
    \ / 100000000 % 10 == 7) {\n                    count++;\n                }\n\
    \                if (i / 1000000000 % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 10000000000 % 10 == 7) {\n       \
    \             count++;\n                }\n                if (i / 100000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000 % 10 == 7) {\n                    count++;\n      \
    \          }\n                if (i / 10000000000000 % 10 == 7) {\n          \
    \          count++;\n                }\n                if (i / 100000000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000000 % 10 == 7) {\n                    count++;\n   \
    \             }\n                if (i / 10000000000000000 % 10 == 7) {\n    \
    \                count++;\n                }\n                if (i / 100000000000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000000000 % 10 == 7) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L))\
    \ == (0L));\n    Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L))\
    \ == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L))\
    \ == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                foreach\
    \ (char c in s) {\n                    if (c == '7') {\n                     \
    \   count++;\n                    }\n                }\n            }\n      \
    \  }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        // Your code\
    \ goes here.\n        return 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a12d3a0e833a4a79a1c5c98eb6c66aa1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a12d3a0e833a4a79a1c5c98eb6c66aa1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                foreach\
    \ (char c in s) {\n                    if (c == '7') {\n                     \
    \   count++;\n                    }\n                }\n            }\n      \
    \  }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                long num = i;\n                while (num > 0)\
    \ {\n                    if (num % 10 == 7) {\n                        count++;\n\
    \                    }\n                    num /= 10;\n                }\n  \
    \          }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                foreach\
    \ (char c in s) {\n                    if (c == '7') {\n                     \
    \   count++;\n                    }\n                }\n            }\n      \
    \  }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                foreach\
    \ (char c in s) {\n                    if (c == '7') {\n                     \
    \   count++;\n                    }\n                }\n            }\n      \
    \  }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                count += Count7(i);\n            }\n        }\n\
    \        return count;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcg62k6ja.cs(20,26): error CS0103: The name ''Count7'' does not exist in
    the current context

    '
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                count += i.ToString().Count(c => c == '7');\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                count += CountDigit(i, 7);\n            }\n  \
    \      }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn49xohnp.cs(20,26): error CS0103: The name ''CountDigit'' does not exist
    in the current context

    '
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                count += Count7s(i);\n            }\n        }\n\
    \        return count;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy_gji0k7.cs(20,26): error CS0103: The name ''Count7s'' does not exist
    in the current context

    '
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                foreach\
    \ (char c in s) {\n                    if (c == '7') {\n                     \
    \   count++;\n                    }\n                }\n            }\n      \
    \  }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                foreach\
    \ (char c in s) {\n                    if (c == '7') {\n                     \
    \   count++;\n                    }\n                }\n            }\n      \
    \  }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                foreach\
    \ (char c in s) {\n                    if (c == '7') {\n                     \
    \   count++;\n                    }\n                }\n            }\n      \
    \  }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long result =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                long j = i;\n                while (j > 0) {\n\
    \                    if (j % 10 == 7) {\n                        result++;\n \
    \                   }\n                    j /= 10;\n                }\n     \
    \       }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                foreach\
    \ (char c in s) {\n                    if (c == '7') {\n                     \
    \   count++;\n                    }\n                }\n            }\n      \
    \  }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long result =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       result++;\n                    }\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                foreach\
    \ (char c in s) {\n                    if (c == '7') {\n                     \
    \   count++;\n                    }\n                }\n            }\n      \
    \  }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                count += CountDigit(i, 7);\n            }\n  \
    \      }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpelzak8we.cs(20,26): error CS0103: The name ''CountDigit'' does not exist
    in the current context

    '
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long result =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       result++;\n                    }\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                count += CountDigit(i, 7);\n            }\n  \
    \      }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpelzak8we.cs(20,26): error CS0103: The name ''CountDigit'' does not exist
    in the current context

    '
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                count += Count7(i);\n            }\n        }\n\
    \        return count;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcg62k6ja.cs(20,26): error CS0103: The name ''Count7'' does not exist in
    the current context

    '
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                long j = i;\n                while (j > 0) {\n\
    \                    if (j % 10 == 7) {\n                        count++;\n  \
    \                  }\n                    j /= 10;\n                }\n      \
    \      }\n        }\n        return count;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                count += i.ToString().Count(c => c == '7');\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                if (i % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 10 % 10 == 7) {\n                \
    \    count++;\n                }\n                if (i / 100 % 10 == 7) {\n \
    \                   count++;\n                }\n                if (i / 1000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 10000 % 10 == 7) {\n                    count++;\n              \
    \  }\n                if (i / 100000 % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 1000000 % 10 == 7) {\n           \
    \         count++;\n                }\n                if (i / 10000000 % 10 ==\
    \ 7) {\n                    count++;\n                }\n                if (i\
    \ / 100000000 % 10 == 7) {\n                    count++;\n                }\n\
    \                if (i / 1000000000 % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 10000000000 % 10 == 7) {\n       \
    \             count++;\n                }\n                if (i / 100000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000 % 10 == 7) {\n                    count++;\n      \
    \          }\n                if (i / 10000000000000 % 10 == 7) {\n          \
    \          count++;\n                }\n                if (i / 100000000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000000 % 10 == 7) {\n                    count++;\n   \
    \             }\n                if (i / 10000000000000000 % 10 == 7) {\n    \
    \                count++;\n                }\n                if (i / 100000000000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000000000 % 10 == 7) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L))\
    \ == (0L));\n    Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L))\
    \ == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L))\
    \ == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                count += CountDigit(i, 7);\n            }\n  \
    \      }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpelzak8we.cs(20,26): error CS0103: The name ''CountDigit'' does not exist
    in the current context

    '
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long result =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       result++;\n                    }\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                if (i % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 10 % 10 == 7) {\n                \
    \    count++;\n                }\n                if (i / 100 % 10 == 7) {\n \
    \                   count++;\n                }\n                if (i / 1000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 10000 % 10 == 7) {\n                    count++;\n              \
    \  }\n                if (i / 100000 % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 1000000 % 10 == 7) {\n           \
    \         count++;\n                }\n                if (i / 10000000 % 10 ==\
    \ 7) {\n                    count++;\n                }\n                if (i\
    \ / 100000000 % 10 == 7) {\n                    count++;\n                }\n\
    \                if (i / 1000000000 % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 10000000000 % 10 == 7) {\n       \
    \             count++;\n                }\n                if (i / 100000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000 % 10 == 7) {\n                    count++;\n      \
    \          }\n                if (i / 10000000000000 % 10 == 7) {\n          \
    \          count++;\n                }\n                if (i / 100000000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000000 % 10 == 7) {\n                    count++;\n   \
    \             }\n                if (i / 10000000000000000 % 10 == 7) {\n    \
    \                count++;\n                }\n                if (i / 100000000000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000000000 % 10 == 7) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L))\
    \ == (0L));\n    Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L))\
    \ == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L))\
    \ == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                foreach\
    \ (char c in s) {\n                    if (c == '7') {\n                     \
    \   count++;\n                    }\n                }\n            }\n      \
    \  }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                count += CountDigit(i, 7);\n            }\n  \
    \      }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn49xohnp.cs(20,26): error CS0103: The name ''CountDigit'' does not exist
    in the current context

    '
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long result =\
    \ 0;\n        long i = 0;\n        while (i < n) {\n            if (i % 11 ==\
    \ 0 || i % 13 == 0) {\n                long j = i;\n                while (j >\
    \ 0) {\n                    if (j % 10 == 7) {\n                        result\
    \ = result + 1;\n                    }\n                    j = j / 10;\n    \
    \            }\n            }\n            i = i + 1;\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L))\
    \ == (0L));\n    Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L))\
    \ == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L))\
    \ == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                if (i % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 10 % 10 == 7) {\n                \
    \    count++;\n                }\n                if (i / 100 % 10 == 7) {\n \
    \                   count++;\n                }\n                if (i / 1000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 10000 % 10 == 7) {\n                    count++;\n              \
    \  }\n                if (i / 100000 % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 1000000 % 10 == 7) {\n           \
    \         count++;\n                }\n                if (i / 10000000 % 10 ==\
    \ 7) {\n                    count++;\n                }\n                if (i\
    \ / 100000000 % 10 == 7) {\n                    count++;\n                }\n\
    \                if (i / 1000000000 % 10 == 7) {\n                    count++;\n\
    \                }\n                if (i / 10000000000 % 10 == 7) {\n       \
    \             count++;\n                }\n                if (i / 100000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000 % 10 == 7) {\n                    count++;\n      \
    \          }\n                if (i / 10000000000000 % 10 == 7) {\n          \
    \          count++;\n                }\n                if (i / 100000000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000000 % 10 == 7) {\n                    count++;\n   \
    \             }\n                if (i / 10000000000000000 % 10 == 7) {\n    \
    \                count++;\n                }\n                if (i / 100000000000000000\
    \ % 10 == 7) {\n                    count++;\n                }\n            \
    \    if (i / 1000000000000000000 % 10 == 7) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L))\
    \ == (0L));\n    Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L))\
    \ == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L))\
    \ == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 7; i < n; i += 11) {\n            if (i % 13 == 0)\
    \ {\n                count++;\n            }\n            if (i % 11 == 0) {\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L))\
    \ == (0L));\n    Debug.Assert(FizzBuzz((78L)) == (2L));\n    Debug.Assert(FizzBuzz((79L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((100L)) == (3L));\n    Debug.Assert(FizzBuzz((200L))\
    \ == (6L));\n    Debug.Assert(FizzBuzz((4000L)) == (192L));\n    Debug.Assert(FizzBuzz((10000L))\
    \ == (639L));\n    Debug.Assert(FizzBuzz((100000L)) == (8026L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <74d51df868ff4cff8688164674ac013d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <74d51df868ff4cff8688164674ac013d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long result =\
    \ 0;\n        for (long i = 1; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       result++;\n                    }\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                var s = i.ToString();\n                foreach\
    \ (var c in s) {\n                    if (c == '7') {\n                      \
    \  count++;\n                    }\n                }\n            }\n       \
    \ }\n        return count;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        // Your code\
    \ goes here.\n        return 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a12d3a0e833a4a79a1c5c98eb6c66aa1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a12d3a0e833a4a79a1c5c98eb6c66aa1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                string s = i.ToString();\n                for\
    \ (int j = 0; j < s.Length; j++) {\n                    if (s[j] == '7') {\n \
    \                       count++;\n                    }\n                }\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                count += i.ToString().Count(c => c == '7');\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        // Your code\
    \ goes here.\n        return 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a12d3a0e833a4a79a1c5c98eb6c66aa1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a12d3a0e833a4a79a1c5c98eb6c66aa1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659803770
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return the number of times the digit 7 appears in integers\
    \ less than n which are divisible by 11 or 13.\n    // >>> FizzBuzz((50L))\n \
    \   // (0L)\n    // >>> FizzBuzz((78L))\n    // (2L)\n    // >>> FizzBuzz((79L))\n\
    \    // (3L)\n    public static long FizzBuzz(long n) {\n        long count =\
    \ 0;\n        for (long i = 0; i < n; i++) {\n            if (i % 11 == 0 || i\
    \ % 13 == 0) {\n                count += i.ToString().Count(c => c == '7');\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FizzBuzz((50L)) == (0L));\n    Debug.Assert(FizzBuzz((78L))\
    \ == (2L));\n    Debug.Assert(FizzBuzz((79L)) == (3L));\n    Debug.Assert(FizzBuzz((100L))\
    \ == (3L));\n    Debug.Assert(FizzBuzz((200L)) == (6L));\n    Debug.Assert(FizzBuzz((4000L))\
    \ == (192L));\n    Debug.Assert(FizzBuzz((10000L)) == (639L));\n    Debug.Assert(FizzBuzz((100000L))\
    \ == (8026L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659803770
