name: HumanEval_54_same_chars
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Check if two words have the same characters.\n    // >>> SameChars((\"\
  eabcdzzzz\"), (\"dddzzzzzzzddeddabc\"))\n    // (true)\n    // >>> SameChars((\"\
  abcd\"), (\"dddddddabc\"))\n    // (true)\n    // >>> SameChars((\"dddddddabc\"\
  ), (\"abcd\"))\n    // (true)\n    // >>> SameChars((\"eabcd\"), (\"dddddddabc\"\
  ))\n    // (false)\n    // >>> SameChars((\"abcd\"), (\"dddddddabce\"))\n    //\
  \ (false)\n    // >>> SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\"))\n    //\
  \ (false)\n    public static bool SameChars(string s0, string s1) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SameChars((\"\
  eabcdzzzz\"), (\"dddzzzzzzzddeddabc\")) == (true));\n    Debug.Assert(SameChars((\"\
  abcd\"), (\"dddddddabc\")) == (true));\n    Debug.Assert(SameChars((\"dddddddabc\"\
  ), (\"abcd\")) == (true));\n    Debug.Assert(SameChars((\"eabcd\"), (\"dddddddabc\"\
  )) == (false));\n    Debug.Assert(SameChars((\"abcd\"), (\"dddddddabcf\")) == (false));\n\
  \    Debug.Assert(SameChars((\"eabcdzzzz\"), (\"dddzzzzzzzddddabc\")) == (false));\n\
  \    Debug.Assert(SameChars((\"aabb\"), (\"aaccc\")) == (false));\n    }\n\n}\n"
completions: ["        var c0 = new int[26];\n        var c1 = new int[26];\n    \
    \    foreach (var c in s0) {\n            c0[c - 'a']++;\n        }\n        foreach\
    \ (var c in s1) {\n            c1[c - 'a']++;\n        }\n        for (int i =\
    \ 0; i < 26; i++) {\n            if (c0[i] != c1[i]) {\n                return\
    \ false;\n            }\n        }\n        return true;", "        int[] c0 =\
    \ new int[26];\n        int[] c1 = new int[26];\n        foreach (char c in s0)\
    \ {\n            c0[c - 'a']++;\n        }\n        foreach (char c in s1) {\n\
    \            c1[c - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n\
    \            if (c0[i] != c1[i]) {\n                return false;\n          \
    \  }\n        }\n        return true;", "        if (s0.Length != s1.Length) {\n\
    \            return false;\n        }\n        var c0 = new int[26];\n       \
    \ var c1 = new int[26];\n        for (int i = 0; i < s0.Length; i++) {\n     \
    \       c0[s0[i] - 'a']++;\n            c1[s1[i] - 'a']++;\n        }\n      \
    \  for (int i = 0; i < 26; i++) {\n            if (c0[i] != c1[i]) {\n       \
    \         return false;\n            }\n        }\n        return true;", "  \
    \      if (s0.Length != s1.Length) {\n            return false;\n        }\n \
    \       int[] counts = new int[26];\n        for (int i = 0; i < s0.Length; i++)\
    \ {\n            counts[s0[i] - 'a']++;\n            counts[s1[i] - 'a']--;\n\
    \        }\n        for (int i = 0; i < 26; i++) {\n            if (counts[i]\
    \ != 0) {\n                return false;\n            }\n        }\n        return\
    \ true;", "        int[] count0 = new int[26];\n        int[] count1 = new int[26];\n\
    \        foreach (char c in s0) {\n            count0[c - 'a']++;\n        }\n\
    \        foreach (char c in s1) {\n            count1[c - 'a']++;\n        }\n\
    \        for (int i = 0; i < 26; i++) {\n            if (count0[i] != count1[i])\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        if (s0.Length != s1.Length) {\n            return false;\n        }\n \
    \       int[] c0 = new int[26];\n        int[] c1 = new int[26];\n        for\
    \ (int i = 0; i < s0.Length; i++) {\n            c0[s0[i] - 'a']++;\n        \
    \    c1[s1[i] - 'a']++;\n        }\n        for (int i = 0; i < 26; i++) {\n \
    \           if (c0[i] != c1[i]) {\n                return false;\n           \
    \ }\n        }\n        return true;", "        if (s0.Length != s1.Length) {\n\
    \            return false;\n        }\n        var c0 = new int[26];\n       \
    \ var c1 = new int[26];\n        for (int i = 0; i < s0.Length; i++) {\n     \
    \       c0[s0[i] - 'a']++;\n            c1[s1[i] - 'a']++;\n        }\n      \
    \  for (int i = 0; i < 26; i++) {\n            if (c0[i] != c1[i]) {\n       \
    \         return false;\n            }\n        }\n        return true;", "  \
    \      int[] c0 = new int[26];\n        int[] c1 = new int[26];\n        foreach\
    \ (char c in s0) {\n            c0[c - 'a']++;\n        }\n        foreach (char\
    \ c in s1) {\n            c1[c - 'a']++;\n        }\n        for (int i = 0; i\
    \ < 26; i++) {\n            if (c0[i] != c1[i]) {\n                return false;\n\
    \            }\n        }\n        return true;", "        if (s0.Length != s1.Length)\
    \ {\n            return false;\n        }\n        var c0 = s0.ToCharArray();\n\
    \        var c1 = s1.ToCharArray();\n        Array.Sort(c0);\n        Array.Sort(c1);\n\
    \        for (int i = 0; i < c0.Length; i++) {\n            if (c0[i] != c1[i])\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        var c0 = new int[26];\n        var c1 = new int[26];\n        foreach (var\
    \ c in s0) {\n            c0[c - 'a']++;\n        }\n        foreach (var c in\
    \ s1) {\n            c1[c - 'a']++;\n        }\n        for (int i = 0; i < 26;\
    \ i++) {\n            if (c0[i] != c1[i]) {\n                return false;\n \
    \           }\n        }\n        return true;", "        if (s0.Length != s1.Length)\
    \ {\n            return false;\n        }\n        var c0 = s0.ToCharArray();\n\
    \        var c1 = s1.ToCharArray();\n        Array.Sort(c0);\n        Array.Sort(c1);\n\
    \        for (int i = 0; i < c0.Length; i++) {\n            if (c0[i] != c1[i])\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        if (s0.Length != s1.Length) {\n            return false;\n        }\n \
    \       var c0 = s0.ToCharArray();\n        var c1 = s1.ToCharArray();\n     \
    \   Array.Sort(c0);\n        Array.Sort(c1);\n        for (int i = 0; i < c0.Length;\
    \ i++) {\n            if (c0[i] != c1[i]) {\n                return false;\n \
    \           }\n        }\n        return true;", "        var c0 = s0.ToCharArray();\n\
    \        var c1 = s1.ToCharArray();\n        Array.Sort(c0);\n        Array.Sort(c1);\n\
    \        return new string(c0) == new string(c1);", "        if (s0.Length !=\
    \ s1.Length) {\n            return false;\n        }\n        var c0 = s0.ToCharArray();\n\
    \        var c1 = s1.ToCharArray();\n        Array.Sort(c0);\n        Array.Sort(c1);\n\
    \        for (int i = 0; i < c0.Length; i++) {\n            if (c0[i] != c1[i])\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        int[] c0 = new int[26];\n        int[] c1 = new int[26];\n        foreach\
    \ (char c in s0) {\n            c0[c - 'a']++;\n        }\n        foreach (char\
    \ c in s1) {\n            c1[c - 'a']++;\n        }\n        for (int i = 0; i\
    \ < 26; i++) {\n            if (c0[i] != c1[i]) {\n                return false;\n\
    \            }\n        }\n        return true;", "        var c0 = new int[26];\n\
    \        var c1 = new int[26];\n        foreach (var c in s0) {\n            c0[c\
    \ - 'a']++;\n        }\n        foreach (var c in s1) {\n            c1[c - 'a']++;\n\
    \        }\n        for (int i = 0; i < 26; i++) {\n            if (c0[i] != c1[i])\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        int[] c0 = new int[26];\n        int[] c1 = new int[26];\n        foreach\
    \ (char c in s0) {\n            c0[c - 'a']++;\n        }\n        foreach (char\
    \ c in s1) {\n            c1[c - 'a']++;\n        }\n        for (int i = 0; i\
    \ < 26; i++) {\n            if (c0[i] != c1[i]) {\n                return false;\n\
    \            }\n        }\n        return true;", "        var c0 = new int[26];\n\
    \        var c1 = new int[26];\n        foreach (var c in s0) {\n            c0[c\
    \ - 'a']++;\n        }\n        foreach (var c in s1) {\n            c1[c - 'a']++;\n\
    \        }\n        for (int i = 0; i < 26; i++) {\n            if (c0[i] != c1[i])\
    \ {\n                return false;\n            }\n        }\n        return true;",
  "        int[] c0 = new int[26];\n        int[] c1 = new int[26];\n        foreach\
    \ (char c in s0) {\n            c0[c - 'a']++;\n        }\n        foreach (char\
    \ c in s1) {\n            c1[c - 'a']++;\n        }\n        for (int i = 0; i\
    \ < 26; i++) {\n            if (c0[i] != c1[i]) {\n                return false;\n\
    \            }\n        }\n        return true;", "        var c0 = new int[26];\n\
    \        var c1 = new int[26];\n        foreach (var c in s0) {\n            c0[c\
    \ - 'a']++;\n        }\n        foreach (var c in s1) {\n            c1[c - 'a']++;\n\
    \        }\n        for (int i = 0; i < 26; i++) {\n            if (c0[i] != c1[i])\
    \ {\n                return false;\n            }\n        }\n        return true;"]
stop_tokens:
- "\n    }\n"
