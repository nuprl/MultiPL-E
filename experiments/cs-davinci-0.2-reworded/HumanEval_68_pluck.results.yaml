language: cs
name: HumanEval_68_pluck
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced5024ba09a4e6ba11139859eb0326a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced5024ba09a4e6ba11139859eb0326a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) return new List<long>();\n        long min = arr.Min();\n        if (min %
    2 == 1) return new List<long>();\n        int minIndex = arr.IndexOf(min);\n        return
    new List<long> { min, minIndex };\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <420beb1338654bc98e39e3a6fd909895>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <420beb1338654bc98e39e3a6fd909895>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce2771358e4d47b99658ce7f0ba664ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce2771358e4d47b99658ce7f0ba664ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1388244a5de427781e318a04c9cd413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1388244a5de427781e318a04c9cd413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03026daad6c44eed831bda307611db4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03026daad6c44eed831bda307611db4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] < min && arr[i] % 2 == 0) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <208df840640342429303c6fb9287dc5b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <208df840640342429303c6fb9287dc5b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0
    \n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        // Good luck!\n        return null;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <a3f3a1037fe64f438374a52231549698>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <a3f3a1037fe64f438374a52231549698>:0
    \n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0
    \n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce2771358e4d47b99658ce7f0ba664ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce2771358e4d47b99658ce7f0ba664ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1388244a5de427781e318a04c9cd413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1388244a5de427781e318a04c9cd413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced5024ba09a4e6ba11139859eb0326a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced5024ba09a4e6ba11139859eb0326a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0
    \n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15a960c87a4c4c149e2daa8a26fb2907>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15a960c87a4c4c149e2daa8a26fb2907>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15a960c87a4c4c149e2daa8a26fb2907>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15a960c87a4c4c149e2daa8a26fb2907>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15a960c87a4c4c149e2daa8a26fb2907>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15a960c87a4c4c149e2daa8a26fb2907>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var evens = arr.Where(x
    => x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return
    new List<long>();\n        }\n        var min = evens.Min();\n        var index
    = arr.IndexOf(min);\n        return new List<long> { min, index };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1cbc87cff73446d5a53622225f67c1cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1cbc87cff73446d5a53622225f67c1cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0b0cddd6fa44a65bb4dd04923137bc6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0b0cddd6fa44a65bb4dd04923137bc6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1388244a5de427781e318a04c9cd413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1388244a5de427781e318a04c9cd413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced5024ba09a4e6ba11139859eb0326a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced5024ba09a4e6ba11139859eb0326a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = long.MaxValue;\n        int minIndex =
    -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2
    == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex != -1) {\n            result.Add(min);\n
    \           result.Add(minIndex);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fff9c0c52b24403b971e1cbdc77eecef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fff9c0c52b24403b971e1cbdc77eecef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0
    \n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0
    \n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if
    (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n                min = arr[(int)i];\n
    \               index = i;\n            }\n        }\n        if (index == -1)
    {\n            return new List<long>();\n        }\n        return new List<long>
    { min, index };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f225b2c659ff47af9083e64a1f5880dc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f225b2c659ff47af9083e64a1f5880dc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        // Good luck!\n        return new List<long>();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3b89eecc08b4820b871b35f23256aba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3b89eecc08b4820b871b35f23256aba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1388244a5de427781e318a04c9cd413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1388244a5de427781e318a04c9cd413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if
    (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n                min = arr[(int)i];\n
    \               index = i;\n            }\n        }\n        if (index == -1)
    {\n            return new List<long>();\n        }\n        return new List<long>()
    { min, index };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a3c8abc93bc4213a205caae90b8a8db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a3c8abc93bc4213a205caae90b8a8db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = -1;\n
    \       long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0) {\n                if (min == -1 || arr[i] < min) {\n                    min
    = arr[i];\n                    minIndex = i;\n                }\n            }\n
    \       }\n        if (min == -1) {\n            return new List<long>();\n        }\n
    \       return new List<long>() { min, minIndex };\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <001c9d3925f94947b7ab1d521fa3c4b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <001c9d3925f94947b7ab1d521fa3c4b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced5024ba09a4e6ba11139859eb0326a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced5024ba09a4e6ba11139859eb0326a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = long.MaxValue;\n        int index = -1;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0
    && arr[i] < min) {\n                min = arr[i];\n                index = i;\n
    \           }\n        }\n        if (index != -1) {\n            result.Add(min);\n
    \           result.Add(index);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <192a3c721d5849d6a5172403492a0954>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <192a3c721d5849d6a5172403492a0954>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5c2df472be5469ea388ff068340d75a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5c2df472be5469ea388ff068340d75a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0
    \n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if
    (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n                min = arr[(int)i];\n
    \               index = i;\n            }\n        }\n        if (index == -1)
    {\n            return new List<long>();\n        }\n        return new List<long>()
    { min, index };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a3c8abc93bc4213a205caae90b8a8db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a3c8abc93bc4213a205caae90b8a8db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        // You can add additional classes and methods.\n        // You
    can also add additional functions and variables.\n        // You can also modify
    the return type.\n        // You can also modify the parameters.\n        // You
    can also use your own algorithms.\n        // You can also use external libraries.\n
    \       // You can also use parallelization.\n        // You can also use any
    other technique you know.\n        // You can also modify the problem statement.\n
    \       // You can also modify the test cases.\n        // You can also modify
    the constraints.\n        // You can also modify the time limit.\n        // You
    can also modify the memory limit.\n        // You can also modify the scoring
    system.\n        // You can also modify the scoring distribution.\n        //
    You can also modify the leaderboard.\n        // You can also modify the contest.\n
    \       // You can also modify the problem setter.\n        // You can also modify
    the validator.\n        // You can also modify the tester.\n        // You can
    also modify the visualizer.\n        // You can also modify the statement validator.\n
    \       // You can also modify the statement generator.\n        // You can also
    modify the input generator.\n        // You can also modify the input validator.\n
    \       // You can also modify the input transformer.\n        // You can also
    modify the input mutator.\n        // You can also modify the input formatter.\n
    \       // You can also modify the input checker.\n        // You can also modify
    the input fixer.\n        // You can also modify the input reader.\n        //
    You can also modify the output writer.\n        // You can also modify the output
    checker.\n        // You can also modify the output fixer.\n        // You can
    also modify the output formatter.\n        // You can also modify the output mutator.\n
    \       // You can also modify the output transformer.\n        // You can also
    modify the output validator.\n        // You can also modify the output generator.\n
    \       // You can also modify the output reader.\n        // You can also modify
    the output printer.\n        // You can also modify the output visualizer.\n        //
    You can also modify the output leaderboard.\n        // You can also modify the
    output statement.\n        // You can also modify the\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyre4ejru.cs(34,30): error CS0161: ''Problem.Pluck(List<long>)'': not all
    code paths return a value

    '
  timestamp: 1659798398
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = -1;\n
    \       long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0) {\n                if (min == -1 || arr[i] < min) {\n                    min
    = arr[i];\n                    minIndex = i;\n                }\n            }\n
    \       }\n        if (min == -1) {\n            return new List<long>();\n        }\n
    \       return new List<long>() { min, minIndex };\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <001c9d3925f94947b7ab1d521fa3c4b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <001c9d3925f94947b7ab1d521fa3c4b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0
    \n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03026daad6c44eed831bda307611db4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03026daad6c44eed831bda307611db4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1388244a5de427781e318a04c9cd413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1388244a5de427781e318a04c9cd413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long minEven = long.MaxValue;\n
    \       int minEvenIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven
    = arr[i];\n                minEvenIndex = i;\n            }\n        }\n        if
    (minEvenIndex == -1) {\n            return new List<long>();\n        }\n        return
    new List<long> { minEven, minEvenIndex };\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3790ef47ac2428a9eea405a5c9c2093>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d3790ef47ac2428a9eea405a5c9c2093>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0
    \n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long minIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n
    \           if (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n                min
    = arr[(int)i];\n                minIndex = i;\n            }\n        }\n        if
    (minIndex == -1) {\n            return new List<long>();\n        }\n        return
    new List<long>() { min, minIndex };\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f99280b333d64f78937d3fbd5af1de06>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f99280b333d64f78937d3fbd5af1de06>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0
    \n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = -1;\n
    \       long minIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n
    \           if (arr[(int)i] % 2 == 0) {\n                if (min == -1 || arr[(int)i]
    < min) {\n                    min = arr[(int)i];\n                    minIndex
    = i;\n                }\n            }\n        }\n        if (min == -1) {\n
    \           return new List<long>();\n        }\n        return new List<long>(new
    long[]{min, minIndex});\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e766a57e48b6422cb699e5c83d7220fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e766a57e48b6422cb699e5c83d7220fb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0
    \n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = arr[0];\n
    \       int minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (min % 2 == 0) {\n            return
    new List<long>() { min, minIndex };\n        }\n        return new List<long>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4b697f822d74ef086e3c20fb513e0c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4b697f822d74ef086e3c20fb513e0c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7df1a93352674aeda9242c499b4f47c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7df1a93352674aeda9242c499b4f47c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0
    \n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var evens = arr.Where(x
    => x % 2 == 0).ToList();\n        if (evens.Count == 0) return new List<long>();\n
    \       var min = evens.Min();\n        var index = arr.IndexOf(min);\n        return
    new List<long> { min, index };\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ed07e8d5b114a829018e73c067deecd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0ed07e8d5b114a829018e73c067deecd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if
    (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n                min = arr[(int)i];\n
    \               index = i;\n            }\n        }\n        if (index == -1)
    {\n            return new List<long>();\n        }\n        return new List<long>()
    { min, index };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a3c8abc93bc4213a205caae90b8a8db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a3c8abc93bc4213a205caae90b8a8db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <693313ad57254050bc01830249b43392>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <693313ad57254050bc01830249b43392>:0
    \n"
  stdout: ''
  timestamp: 1659798400
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0
    \n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0b0cddd6fa44a65bb4dd04923137bc6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0b0cddd6fa44a65bb4dd04923137bc6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7df1a93352674aeda9242c499b4f47c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7df1a93352674aeda9242c499b4f47c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25c1f5ca150b45f2b0186879be7e52a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25c1f5ca150b45f2b0186879be7e52a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5c2df472be5469ea388ff068340d75a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5c2df472be5469ea388ff068340d75a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a59bf6f05114d5bab260649c62cfe58>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a59bf6f05114d5bab260649c62cfe58>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7df1a93352674aeda9242c499b4f47c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7df1a93352674aeda9242c499b4f47c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1388244a5de427781e318a04c9cd413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1388244a5de427781e318a04c9cd413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7df1a93352674aeda9242c499b4f47c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7df1a93352674aeda9242c499b4f47c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03026daad6c44eed831bda307611db4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03026daad6c44eed831bda307611db4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long minIndex = long.MaxValue;\n        for (int i = 0; i < arr.Count;
    i++) {\n            if (arr[i] % 2 == 0 && arr[i] < min) {\n                min
    = arr[i];\n                minIndex = i;\n            }\n        }\n        if
    (min == long.MaxValue) {\n            return new List<long>();\n        }\n        return
    new List<long>() { min, minIndex };\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dcc349fd84a142bea230093590f89288>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dcc349fd84a142bea230093590f89288>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <693313ad57254050bc01830249b43392>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <693313ad57254050bc01830249b43392>:0
    \n"
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0b0cddd6fa44a65bb4dd04923137bc6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0b0cddd6fa44a65bb4dd04923137bc6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <693313ad57254050bc01830249b43392>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <693313ad57254050bc01830249b43392>:0
    \n"
  stdout: ''
  timestamp: 1659798400
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0
    \n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long minIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n
    \           if (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n                min
    = arr[(int)i];\n                minIndex = i;\n            }\n        }\n        if
    (minIndex == -1) {\n            return new List<long>();\n        }\n        return
    new List<long> { min, minIndex };\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a74c0a736c7499cb754b1c41d3482d6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a74c0a736c7499cb754b1c41d3482d6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced5024ba09a4e6ba11139859eb0326a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced5024ba09a4e6ba11139859eb0326a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if
    (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n                min = arr[(int)i];\n
    \               index = i;\n            }\n        }\n        if (index == -1)
    {\n            return new List<long>();\n        }\n        return new List<long>
    { min, index };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f225b2c659ff47af9083e64a1f5880dc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f225b2c659ff47af9083e64a1f5880dc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = long.MaxValue;\n        int index = -1;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0
    && arr[i] < min) {\n                min = arr[i];\n                index = i;\n
    \           }\n        }\n        if (index != -1) {\n            result.Add(min);\n
    \           result.Add(index);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <192a3c721d5849d6a5172403492a0954>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <192a3c721d5849d6a5172403492a0954>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7df1a93352674aeda9242c499b4f47c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7df1a93352674aeda9242c499b4f47c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var evens = arr.Where(x
    => x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return
    new List<long>();\n        }\n        var min = evens.Min();\n        var index
    = arr.IndexOf(min);\n        return new List<long> { min, index };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1cbc87cff73446d5a53622225f67c1cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1cbc87cff73446d5a53622225f67c1cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n
    \       }\n        long min = arr[0];\n        int minIndex = 0;\n        for
    (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] <
    min) {\n                min = arr[i];\n                minIndex = i;\n            }\n
    \       }\n        if (min % 2 == 0) {\n            result.Add(min);\n            result.Add(minIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4867432d789d4f758fc598b353110151>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4867432d789d4f758fc598b353110151>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = -1;\n        long minIndex = -1;\n        for
    (long i = 0; i < arr.Count; i++) {\n            if (arr[(int)i] % 2 == 0) {\n
    \               if (min == -1 || arr[(int)i] < min) {\n                    min
    = arr[(int)i];\n                    minIndex = i;\n                }\n            }\n
    \       }\n        if (min != -1) {\n            result.Add(min);\n            result.Add(minIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fefa36768b8a49e0a5711f44e617652e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fefa36768b8a49e0a5711f44e617652e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n
    \       }\n        long min = arr[0];\n        int minIndex = 0;\n        for
    (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] <
    min) {\n                min = arr[i];\n                minIndex = i;\n            }\n
    \       }\n        if (min % 2 == 0) {\n            result.Add(min);\n            result.Add(minIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4867432d789d4f758fc598b353110151>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4867432d789d4f758fc598b353110151>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced5024ba09a4e6ba11139859eb0326a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced5024ba09a4e6ba11139859eb0326a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = arr[0];\n
    \       int minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (min % 2 == 0) {\n            return
    new List<long> { min, minIndex };\n        }\n        return new List<long>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef6d28b5432240149c750f4fda307b7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef6d28b5432240149c750f4fda307b7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long minEven = long.MaxValue;\n
    \       long minEvenIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n
    \           if (arr[i] % 2 == 0 && arr[i] < minEven) {\n                minEven
    = arr[i];\n                minEvenIndex = i;\n            }\n        }\n        if
    (minEvenIndex == -1) {\n            return new List<long>();\n        }\n        return
    new List<long>() { minEven, minEvenIndex };\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6cab5784a10941f8842606a25fe72a8a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6cab5784a10941f8842606a25fe72a8a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15a960c87a4c4c149e2daa8a26fb2907>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15a960c87a4c4c149e2daa8a26fb2907>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Write your code
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <24757c0f34c7465580be427f9becdfa3>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <24757c0f34c7465580be427f9becdfa3>:0
    \n"
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long idx = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if
    (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n                min = arr[(int)i];\n
    \               idx = i;\n            }\n        }\n        if (idx == -1) {\n
    \           return new List<long>();\n        }\n        return new List<long>(new
    long[]{min, idx});\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e57c53ac516b4bf99a0f45cd450b1a67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e57c53ac516b4bf99a0f45cd450b1a67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0
    \n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced5024ba09a4e6ba11139859eb0326a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced5024ba09a4e6ba11139859eb0326a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7df1a93352674aeda9242c499b4f47c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7df1a93352674aeda9242c499b4f47c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0b0cddd6fa44a65bb4dd04923137bc6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0b0cddd6fa44a65bb4dd04923137bc6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0b0cddd6fa44a65bb4dd04923137bc6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0b0cddd6fa44a65bb4dd04923137bc6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = arr[0];\n
    \       int minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] < min && arr[i] % 2 == 0) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (min % 2 == 0) {\n            return
    new List<long>() { min, minIndex };\n        }\n        return new List<long>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e54c1c5c9bc6417cb10b8c03ae1e029a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e54c1c5c9bc6417cb10b8c03ae1e029a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <693313ad57254050bc01830249b43392>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <693313ad57254050bc01830249b43392>:0
    \n"
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n
    \       }\n        long min = arr[0];\n        int minIndex = 0;\n        for
    (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] <
    min) {\n                min = arr[i];\n                minIndex = i;\n            }\n
    \       }\n        if (min % 2 == 0) {\n            result.Add(min);\n            result.Add(minIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4867432d789d4f758fc598b353110151>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4867432d789d4f758fc598b353110151>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15a960c87a4c4c149e2daa8a26fb2907>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <15a960c87a4c4c149e2daa8a26fb2907>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = arr[0];\n
    \       long minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (min % 2 == 0) {\n            return
    new List<long> { min, minIndex };\n        }\n        return new List<long>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3592c1e3ed4b4b2caa71bbd99c075ff2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3592c1e3ed4b4b2caa71bbd99c075ff2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0b0cddd6fa44a65bb4dd04923137bc6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0b0cddd6fa44a65bb4dd04923137bc6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce2771358e4d47b99658ce7f0ba664ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce2771358e4d47b99658ce7f0ba664ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = long.MaxValue;\n        long index = -1;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0
    && arr[i] < min) {\n                min = arr[i];\n                index = i;\n
    \           }\n        }\n        if (index == -1) {\n            return result;\n
    \       }\n        result.Add(min);\n        result.Add(index);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b69eec18ae20459d87f0b368194a522d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b69eec18ae20459d87f0b368194a522d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0
    \n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        List<long> result = new List<long>();\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index != -1) {\n            result.Add(min);\n
    \           result.Add(index);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8eefebf3bf934e7aa057937a4b0d5e14>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8eefebf3bf934e7aa057937a4b0d5e14>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = long.MaxValue;\n        long index = -1;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0
    && arr[i] < min) {\n                min = arr[i];\n                index = i;\n
    \           }\n        }\n        if (index != -1) {\n            result.Add(min);\n
    \           result.Add(index);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fea40a5d8b1b4fd38a429a063116a93d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fea40a5d8b1b4fd38a429a063116a93d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var evens = arr.Where(x
    => x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return
    new List<long>();\n        }\n        var min = evens.Min();\n        var minIndex
    = arr.IndexOf(min);\n        return new List<long> { min, minIndex };\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b6f9ae32a4945f5ae036efba5ea1bff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b6f9ae32a4945f5ae036efba5ea1bff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5bccfc437f64c35af95135c0ee57d61>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5bccfc437f64c35af95135c0ee57d61>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = long.MaxValue;\n        int index = -1;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0
    && arr[i] < min) {\n                min = arr[i];\n                index = i;\n
    \           }\n        }\n        if (index != -1) {\n            result.Add(min);\n
    \           result.Add(index);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <192a3c721d5849d6a5172403492a0954>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <192a3c721d5849d6a5172403492a0954>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0
    \n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var evens = arr.Where(x
    => x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return
    new List<long>();\n        }\n        var min = evens.Min();\n        var index
    = arr.IndexOf(min);\n        return new List<long> { min, index };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1cbc87cff73446d5a53622225f67c1cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1cbc87cff73446d5a53622225f67c1cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = -1;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0) {\n                if (min == -1 || arr[i] < min) {\n                    min
    = arr[i];\n                    index = i;\n                }\n            }\n
    \       }\n        if (min == -1) {\n            return new List<long>();\n        }\n
    \       return new List<long>() { min, index };\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6868903fe8de46f5a69ea3214ea2cd5b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6868903fe8de46f5a69ea3214ea2cd5b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var evens = arr.Where(x
    => x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return
    new List<long>();\n        }\n        var min = evens.Min();\n        var index
    = arr.IndexOf(min);\n        return new List<long> { min, index };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1cbc87cff73446d5a53622225f67c1cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1cbc87cff73446d5a53622225f67c1cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0
    \n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5bccfc437f64c35af95135c0ee57d61>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5bccfc437f64c35af95135c0ee57d61>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var evens = arr.Where(x
    => x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return
    new List<long>();\n        }\n        var min = evens.Min();\n        var index
    = arr.IndexOf(min);\n        return new List<long> { min, index };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1cbc87cff73446d5a53622225f67c1cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1cbc87cff73446d5a53622225f67c1cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0
    \n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0
    \n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var min = arr.Where(x
    => x % 2 == 0).Min();\n        var index = arr.IndexOf(min);\n        return new
    List<long> { min, index };\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b7d8861f88f4c23ae3e9e8bc786fc16>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4b7d8861f88f4c23ae3e9e8bc786fc16>:0
    \n\nUnhandled Exception:\nSystem.InvalidOperationException: Sequence contains
    no elements\n  at System.Linq.Enumerable.Min (System.Collections.Generic.IEnumerable`1[T]
    source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck
    (System.Collections.Generic.List`1[T] arr) [0x00026] in <4b7d8861f88f4c23ae3e9e8bc786fc16>:0
    \n  at Prob"
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5bccfc437f64c35af95135c0ee57d61>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5bccfc437f64c35af95135c0ee57d61>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var evens = arr.Where(x
    => x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return
    new List<long>();\n        }\n        var min = evens.Min();\n        var index
    = arr.IndexOf(min);\n        return new List<long> { min, index };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1cbc87cff73446d5a53622225f67c1cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1cbc87cff73446d5a53622225f67c1cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7df1a93352674aeda9242c499b4f47c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7df1a93352674aeda9242c499b4f47c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cee7cf0bf9f84bd690fe3a67a0e3559f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cee7cf0bf9f84bd690fe3a67a0e3559f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = int.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55469302bbd842bbbb7c4d1283b1326d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <55469302bbd842bbbb7c4d1283b1326d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cee7cf0bf9f84bd690fe3a67a0e3559f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cee7cf0bf9f84bd690fe3a67a0e3559f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = arr[0];\n
    \       int minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (min % 2 == 0) {\n            return
    new List<long> { min, minIndex };\n        }\n        return new List<long>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef6d28b5432240149c750f4fda307b7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef6d28b5432240149c750f4fda307b7a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var evens = arr.Where(x
    => x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return
    new List<long>();\n        }\n        var min = evens.Min();\n        var index
    = arr.IndexOf(min);\n        return new List<long> { min, index };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1cbc87cff73446d5a53622225f67c1cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1cbc87cff73446d5a53622225f67c1cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1388244a5de427781e318a04c9cd413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1388244a5de427781e318a04c9cd413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1388244a5de427781e318a04c9cd413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1388244a5de427781e318a04c9cd413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0
    \n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25c1f5ca150b45f2b0186879be7e52a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25c1f5ca150b45f2b0186879be7e52a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5c2df472be5469ea388ff068340d75a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5c2df472be5469ea388ff068340d75a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0
    \n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03026daad6c44eed831bda307611db4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03026daad6c44eed831bda307611db4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d3348cdc3184a0c935366549afd0887>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5d3348cdc3184a0c935366549afd0887>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return arr;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b019531b25104cc0a96bf008024f4d7c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b019531b25104cc0a96bf008024f4d7c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bcdb696b9f834c54bf9d98854e27df39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bcdb696b9f834c54bf9d98854e27df39>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03026daad6c44eed831bda307611db4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03026daad6c44eed831bda307611db4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced5024ba09a4e6ba11139859eb0326a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced5024ba09a4e6ba11139859eb0326a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce2771358e4d47b99658ce7f0ba664ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ce2771358e4d47b99658ce7f0ba664ea>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long minIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n
    \           if (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n                min
    = arr[(int)i];\n                minIndex = i;\n            }\n        }\n        if
    (minIndex == -1) {\n            return new List<long>();\n        }\n        return
    new List<long> { min, minIndex };\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a74c0a736c7499cb754b1c41d3482d6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9a74c0a736c7499cb754b1c41d3482d6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code goes
    here\n        return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5c2df472be5469ea388ff068340d75a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d5c2df472be5469ea388ff068340d75a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = long.MaxValue;\n        int minIndex =
    -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2
    == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex != -1) {\n            result.Add(min);\n
    \           result.Add(minIndex);\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fff9c0c52b24403b971e1cbdc77eecef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fff9c0c52b24403b971e1cbdc77eecef>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = long.MaxValue;\n        int minIndex =
    -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2
    == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    result;\n        }\n        result.Add(min);\n        result.Add(minIndex);\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e4be88572d0e4c649bf391cace213843>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e4be88572d0e4c649bf391cace213843>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        if (arr.Count == 0) {\n            return result;\n
    \       }\n        long min = arr[0];\n        int minIndex = 0;\n        for
    (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0 && arr[i] <
    min) {\n                min = arr[i];\n                minIndex = i;\n            }\n
    \       }\n        if (min % 2 == 0) {\n            result.Add(min);\n            result.Add(minIndex);\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4867432d789d4f758fc598b353110151>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4867432d789d4f758fc598b353110151>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0
    \n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03026daad6c44eed831bda307611db4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <03026daad6c44eed831bda307611db4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1388244a5de427781e318a04c9cd413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1388244a5de427781e318a04c9cd413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced5024ba09a4e6ba11139859eb0326a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced5024ba09a4e6ba11139859eb0326a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = long.MaxValue;\n
    \       long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e7d45e5bc38841238fff5635ee817c58>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e7d45e5bc38841238fff5635ee817c58>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798401
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0
    \n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <0775f236f33b4139bb733b1b020b98a2>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <0775f236f33b4139bb733b1b020b98a2>:0
    \n"
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = long.MaxValue;\n        int index = -1;\n
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0
    && arr[i] < min) {\n                min = arr[i];\n                index = i;\n
    \           }\n        }\n        if (index != -1) {\n            result.Add(min);\n
    \           result.Add(index);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <192a3c721d5849d6a5172403492a0954>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <192a3c721d5849d6a5172403492a0954>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long minIndex = -1;\n        for (long i = 0; i < arr.Count; i++) {\n
    \           if (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n                min
    = arr[(int)i];\n                minIndex = i;\n            }\n        }\n        if
    (minIndex == -1) {\n            return new List<long>();\n        }\n        return
    new List<long>() { min, minIndex };\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f99280b333d64f78937d3fbd5af1de06>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f99280b333d64f78937d3fbd5af1de06>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long idx = -1;\n        for (long i = 0; i < arr.Count; i++) {\n            if
    (arr[(int)i] % 2 == 0 && arr[(int)i] < min) {\n                min = arr[(int)i];\n
    \               idx = i;\n            }\n        }\n        if (idx == -1) {\n
    \           return new List<long>();\n        }\n        return new List<long>(new
    long[]{min, idx});\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e57c53ac516b4bf99a0f45cd450b1a67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e57c53ac516b4bf99a0f45cd450b1a67>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       int index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a59bf6f05114d5bab260649c62cfe58>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8a59bf6f05114d5bab260649c62cfe58>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0
    \n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cee7cf0bf9f84bd690fe3a67a0e3559f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cee7cf0bf9f84bd690fe3a67a0e3559f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0
    \n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        List<long> result
    = new List<long>();\n        long min = Int64.MaxValue;\n        long index =
    -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2
    == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    result;\n        }\n        result.Add(min);\n        result.Add(index);\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10fb594840384d09967ef690dd80b93a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <10fb594840384d09967ef690dd80b93a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced5024ba09a4e6ba11139859eb0326a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ced5024ba09a4e6ba11139859eb0326a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = Int64.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f720ef5be0ca48de8136f2d03ded9459>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f720ef5be0ca48de8136f2d03ded9459>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798401
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long index = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                index
    = i;\n            }\n        }\n        if (index == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, index };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39c958cafb6840368ea6b18252246c95>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        return null;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,
    (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,
    (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new long[]{(long)0L, (long)3L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)4L, (long)8L,
    (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L, (long)7L,
    (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <70e3dabb2bb741c6b56b925af08b3f4f>:0
    \n"
  stdout: ''
  timestamp: 1659798398
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // Your code goes
    here.\n        // You can add more classes and methods.\n        // You can also
    add more fields to the class Pluck.\n        // You can also add more methods
    to the class Pluck.\n        // You can also add more classes.\n        // You
    can also add more methods to other classes.\n        // You can also add more
    fields to other classes.\n        // You can also create/edit/delete tests.\n
    \       // You can also create/edit/delete constraints.\n        // You can also
    create/edit/delete hints.\n        // You can also create/edit/delete time limits.\n
    \       // You can also create/edit/delete memory limits.\n        // You can
    also create/edit/delete output limits.\n        // You can also create/edit/delete
    tests.\n        // You can also create/edit/delete constraints.\n        // You
    can also create/edit/delete hints.\n        // You can also create/edit/delete
    time limits.\n        // You can also create/edit/delete memory limits.\n        //
    You can also create/edit/delete output limits.\n        // You can also create/edit/delete
    tests.\n        // You can also create/edit/delete constraints.\n        // You
    can also create/edit/delete hints.\n        // You can also create/edit/delete
    time limits.\n        // You can also create/edit/delete memory limits.\n        //
    You can also create/edit/delete output limits.\n        // You can also create/edit/delete
    tests.\n        // You can also create/edit/delete constraints.\n        // You
    can also create/edit/delete hints.\n        // You can also create/edit/delete
    time limits.\n        // You can also create/edit/delete memory limits.\n        //
    You can also create/edit/delete output limits.\n        // You can also create/edit/delete
    tests.\n        // You can also create/edit/delete constraints.\n        // You
    can also create/edit/delete hints.\n        // You can also create/edit/delete
    time limits.\n        // You can also create/edit/delete memory limits.\n        //
    You can also create/edit/delete output limits.\n        // You can also create/edit/delete
    tests.\n        // You can also create/edit\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp64_609f9.cs(34,30): error CS0161: ''Problem.Pluck(List<long>)'': not all
    code paths return a value

    '
  timestamp: 1659798401
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       long minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long> { min, minIndex };\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25c1f5ca150b45f2b0186879be7e52a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <25c1f5ca150b45f2b0186879be7e52a6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference
    not set to an instance of an object\n  at Problem.Main (System.String[] args)
    [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.NullReferenceException: Object reference not set to an instance of an object\n
    \ at Problem.Main (System.String[] args) [0x00031] in <d90ba4fd1393402bb0da081d55aa2f3d>:0
    \n"
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        long min = long.MaxValue;\n
    \       int minIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (minIndex == -1) {\n            return
    new List<long>();\n        }\n        return new List<long>() { min, minIndex
    };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1388244a5de427781e318a04c9cd413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d1388244a5de427781e318a04c9cd413>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        if (arr.Count ==
    0) {\n            return new List<long>();\n        }\n        long min = arr[0];\n
    \       int minIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if
    (arr[i] % 2 == 0 && arr[i] < min) {\n                min = arr[i];\n                minIndex
    = i;\n            }\n        }\n        if (min % 2 == 0) {\n            return
    new List<long>() { min, minIndex };\n        }\n        return new List<long>();\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4b697f822d74ef086e3c20fb513e0c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4b697f822d74ef086e3c20fb513e0c2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798400
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        // your code here\n
    \       return new List<long>();\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new
    long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,
    (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new long[]{(long)4L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)6L,
    (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b062e3b615134bdfa12999a3308ce15a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // \"Given a list representing a branch of a tree that has non-negative
    integer nodes\n    // your task is to pluck one of the nodes and return it.\n
    \   // The plucked node should be the node with the smallest even value.\n    //
    If multiple nodes with the same smallest even value are found return the node
    that has smallest index.\n    // The plucked node should be returned in a list,
    [ smalest_value, its index ],\n    // If there are no even values or the given
    list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,
    (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the
    smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,
    (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n
    \   // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n
    \   // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n
    \   // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,
    (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,
    (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n
    \   // so we will choose the first zero, which has the smallest index.\n    //
    Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n
    \   public static List<long> Pluck(List<long> arr) {\n        var evens = arr.Where(x
    => x % 2 == 0).ToList();\n        if (evens.Count == 0) {\n            return
    new List<long>();\n        }\n        var min = evens.Min();\n        var index
    = arr.IndexOf(min);\n        return new List<long> { min, index };\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,
    (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new
    long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new
    long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,
    (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,
    (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1cbc87cff73446d5a53622225f67c1cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1cbc87cff73446d5a53622225f67c1cc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659798399
