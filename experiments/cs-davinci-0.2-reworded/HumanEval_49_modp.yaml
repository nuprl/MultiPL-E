name: HumanEval_49_modp
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> Modp((3L),\
  \ (5L))\n    // (3L)\n    // >>> Modp((1101L), (101L))\n    // (2L)\n    // >>>\
  \ Modp((0L), (101L))\n    // (1L)\n    // >>> Modp((3L), (11L))\n    // (8L)\n \
  \   // >>> Modp((100L), (101L))\n    // (1L)\n    public static long Modp(long n,\
  \ long p) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Modp((3L),\
  \ (5L)) == (3L));\n    Debug.Assert(Modp((1101L), (101L)) == (2L));\n    Debug.Assert(Modp((0L),\
  \ (101L)) == (1L));\n    Debug.Assert(Modp((3L), (11L)) == (8L));\n    Debug.Assert(Modp((100L),\
  \ (101L)) == (1L));\n    Debug.Assert(Modp((30L), (5L)) == (4L));\n    Debug.Assert(Modp((31L),\
  \ (5L)) == (3L));\n    }\n\n}\n"
completions: ["        if (n == 0) return 1;\n        if (n % 2 == 0) {\n        \
    \    long t = Modp(n / 2, p);\n            return (t * t) % p;\n        } else\
    \ {\n            return (n * Modp(n - 1, p)) % p;\n        }", "        if (n\
    \ == 0) return 1;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2,\
    \ p);\n            return (t * t) % p;\n        } else {\n            return (n\
    \ * Modp(n - 1, p)) % p;\n        }", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n % 2 == 0) {\n            long x = Modp(n / 2, p);\n\
    \            return (x * x) % p;\n        }\n        return (Modp(n - 1, p) *\
    \ n) % p;", "        if (n == 0) return 1;\n        if (n == 1) return n;\n  \
    \      if (n % 2 == 0) {\n            long x = Modp(n / 2, p);\n            return\
    \ (x * x) % p;\n        } else {\n            return (n * Modp(n - 1, p)) % p;\n\
    \        }", "        if (n == 0) {\n            return 1;\n        }\n      \
    \  if (n % 2 == 0) {\n            long r = Modp(n / 2, p);\n            return\
    \ (r * r) % p;\n        }\n        return (Modp(n - 1, p) * n) % p;", "      \
    \  if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t = Modp(n\
    \ / 2, p);\n            return (t * t) % p;\n        } else {\n            return\
    \ (Modp(n - 1, p) * n) % p;\n        }", "        if (n == 0) return 1;\n    \
    \    if (n == 1) return n;\n        if (n % 2 == 0) {\n            long t = Modp(n\
    \ / 2, p);\n            return (t * t) % p;\n        }\n        return (n * Modp(n\
    \ - 1, p)) % p;", "        long res = 1;\n        for (int i = 0; i < n; i++)\
    \ {\n            res = (res * 2) % p;\n        }\n        return res;", "    \
    \    if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0)\
    \ {\n            long t = Modp(n / 2, p);\n            return (t * t) % p;\n \
    \       }\n        return (Modp(n - 1, p) * n) % p;", "        if (n == 0) return\
    \ 1;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n      \
    \      return (t * t) % p;\n        } else {\n            return (n * Modp(n -\
    \ 1, p)) % p;\n        }", "        if (n == 0) return 1;\n        if (n == 1)\
    \ return n;\n        if (n % 2 == 0) {\n            long x = Modp(n / 2, p);\n\
    \            return (x * x) % p;\n        } else {\n            return (n * Modp(n\
    \ - 1, p)) % p;\n        }", "        long res = 1;\n        for (int i = 0; i\
    \ < n; i++) {\n            res = (res * 2) % p;\n        }\n        return res;",
  "        if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0)\
    \ {\n            long x = Modp(n / 2, p);\n            return (x * x) % p;\n \
    \       }\n        return (Modp(n - 1, p) * n) % p;", "        if (n == 0) {\n\
    \            return 1;\n        }\n        long r = Modp(n / 2, p);\n        r\
    \ = (r * r) % p;\n        if (n % 2 == 1) {\n            r = (r * 2) % p;\n  \
    \      }\n        return r;", "        if (n == 0) return 1;\n        if (n ==\
    \ 1) return n;\n        if (n % 2 == 0) return Modp(n / 2, p) * Modp(n / 2, p)\
    \ % p;\n        return Modp(n / 2, p) * Modp(n / 2, p) * n % p;", "        if\
    \ (n == 0) return 1;\n        if (n == 1) return n;\n        if (n % 2 == 0) {\n\
    \            long x = Modp(n / 2, p);\n            return (x * x) % p;\n     \
    \   } else {\n            return (n * Modp(n - 1, p)) % p;\n        }", "    \
    \    if (n == 0) return 1;\n        if (n == 1) return n;\n        if (n % 2 ==\
    \ 0) {\n            long x = Modp(n / 2, p);\n            return (x * x) % p;\n\
    \        } else {\n            return (n * Modp(n - 1, p)) % p;\n        }", " \
    \       if (n == 0) return 1;\n        if (n % 2 == 0) {\n            long t =\
    \ Modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n       \
    \     return (Modp(n - 1, p) * n) % p;\n        }", "        if (n == 0) return\
    \ 1;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n      \
    \      return (t * t) % p;\n        } else {\n            return (n * Modp(n -\
    \ 1, p)) % p;\n        }", "        long result = 1;\n        long base_ = 2;\n\
    \        while (n > 0) {\n            if (n % 2 == 1) {\n                result\
    \ = (result * base_) % p;\n            }\n            n = n / 2;\n           \
    \ base_ = (base_ * base_) % p;\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
