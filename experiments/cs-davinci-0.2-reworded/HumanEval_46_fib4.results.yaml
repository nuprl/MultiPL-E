language: cs
name: HumanEval_46_fib4
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        if (n < 4) {\n            return fib4[n];\n        }\n        long[]
    fib4_new = new long[4];\n        for (long i = 4; i <= n; i++) {\n            fib4_new[0]
    = fib4[1] + fib4[2] + fib4[3];\n            fib4_new[1] = fib4[0];\n            fib4_new[2]
    = fib4[1];\n            fib4_new[3] = fib4[2];\n            fib4 = fib4_new;\n
    \       }\n        return fib4[0];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <301dee578e6a430c837618ec597ba9b7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <301dee578e6a430c837618ec597ba9b7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        if (n <= 3) {\n            return fib4[n];\n        }\n        long[]
    fib4_n = new long[4];\n        fib4_n[0] = 1;\n        fib4_n[1] = 0;\n        fib4_n[2]
    = 0;\n        fib4_n[3] = 0;\n        for (long i = 4; i <= n; i++) {\n            long[]
    fib4_n_1 = new long[4];\n            fib4_n_1[0] = fib4_n[0];\n            fib4_n_1[1]
    = fib4_n[1];\n            fib4_n_1[2] = fib4_n[2];\n            fib4_n_1[3] =
    fib4_n[3];\n            fib4_n[0] = fib4_n_1[0] + fib4_n_1[1] + fib4_n_1[2] +
    fib4_n_1[3];\n            fib4_n[1] = fib4_n_1[0];\n            fib4_n[2] = fib4_n_1[1];\n
    \           fib4_n[3] = fib4_n_1[2];\n        }\n        return fib4_n[0];\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n
    \   Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n
    \   Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2a96125c6fce41669f0d878c13038788>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2a96125c6fce41669f0d878c13038788>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib = new
    long[4];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3]
    = 0;\n        for (int i = 4; i <= n; i++) {\n            long temp = fib[0] +
    fib[1] + fib[2] + fib[3];\n            fib[0] = fib[1];\n            fib[1] =
    fib[2];\n            fib[2] = fib[3];\n            fib[3] = temp;\n        }\n
    \       return fib[3];\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 0) throw
    new ArgumentOutOfRangeException();\n        if (n == 0) return 0;\n        if
    (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n == 3) return
    0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n        long
    d = 0;\n        for (long i = 4; i <= n; i++) {\n            long e = a + b +
    c + d;\n            a = b;\n            b = c;\n            c = d;\n            d
    = e;\n        }\n        return a + b + c + d;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f93f135fff3f4b37926ca01b65b60363>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f93f135fff3f4b37926ca01b65b60363>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    temp = a + b + c + d;\n            a = b;\n            b = c;\n            c =
    d;\n            d = temp;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0596e308446d4bda8109166a209a47b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0596e308446d4bda8109166a209a47b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n
    \           d = e;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95334a7c299549cea6d802df113be01a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95334a7c299549cea6d802df113be01a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        for
    (int i = 3; i <= n; i++) {\n            e = a + b + c + d;\n            a = b;\n
    \           b = c;\n            c = d;\n            d = e;\n        }\n        return
    e;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba6d676a18264f1b9c0a369cfc577b21>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba6d676a18264f1b9c0a369cfc577b21>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        long
    f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n        long
    j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long
    o = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n        long
    s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n        long
    w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n        long
    aa = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n        long
    ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah = 0;\n        long
    ai = 0;\n        long aj = 0;\n        long ak = 0;\n        long al = 0;\n        long
    am = 0;\n        long an = 0;\n        long ao = 0;\n        long ap = 0;\n        long
    aq = 0;\n        long ar = 0;\n        long as = 0;\n        long at = 0;\n        long
    au = 0;\n        long av = 0;\n        long aw = 0;\n        long ax = 0;\n        long
    ay = 0;\n        long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long
    bc = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n        long
    bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj = 0;\n        long
    bk = 0;\n        long bl = 0;\n        long bm = 0;\n        long bn = 0;\n        long
    bo = 0;\n        long bp = 0;\n        long bq = 0;\n        long br = 0;\n        long
    bs = 0;\n        long b\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2dyn4y6u.cs(66,14): error CS1001: Identifier expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1002: ; expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp2dyn4y6u.cs(66,17): error CS1031: Type expected

    /tmp/tmp2dyn4y6u.cs(93,15): error CS1002: ; expected

    '
  timestamp: 1659797369
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fibs = new
    long[4];\n        fibs[0] = 0;\n        fibs[1] = 0;\n        fibs[2] = 2;\n        fibs[3]
    = 0;\n        for (int i = 4; i <= n; i++) {\n            long fib = fibs[0] +
    fibs[1] + fibs[2] + fibs[3];\n            fibs[0] = fibs[1];\n            fibs[1]
    = fibs[2];\n            fibs[2] = fibs[3];\n            fibs[3] = fib;\n        }\n
    \       return fibs[3];\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        if (n < 4) {\n            return fib4[n];\n        }\n        long[]
    fib4_n = new long[4];\n        fib4_n[0] = 0;\n        fib4_n[1] = 0;\n        fib4_n[2]
    = 2;\n        fib4_n[3] = 0;\n        long[] fib4_n_1 = new long[4];\n        fib4_n_1[0]
    = 0;\n        fib4_n_1[1] = 0;\n        fib4_n_1[2] = 2;\n        fib4_n_1[3]
    = 0;\n        long[] fib4_n_2 = new long[4];\n        fib4_n_2[0] = 0;\n        fib4_n_2[1]
    = 0;\n        fib4_n_2[2] = 0;\n        fib4_n_2[3] = 0;\n        long[] fib4_n_3
    = new long[4];\n        fib4_n_3[0] = 0;\n        fib4_n_3[1] = 0;\n        fib4_n_3[2]
    = 0;\n        fib4_n_3[3] = 0;\n        long[] fib4_n_4 = new long[4];\n        fib4_n_4[0]
    = 0;\n        fib4_n_4[1] = 0;\n        fib4_n_4[2] = 0;\n        fib4_n_4[3]
    = 0;\n        long[] fib4_n_5 = new long[4];\n        fib4_n_5[0] = 0;\n        fib4_n_5[1]
    = 0;\n        fib4_n_5[2] = 0;\n        fib4_n_5[3] = 0;\n        long[] fib4_n_6
    = new long[4];\n       \n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe04vtvsh.cs(22,24): error CS0161: ''Problem.Fib4(long)'': not all code
    paths return a value

    '
  timestamp: 1659797370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib = new
    long[4];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3]
    = 0;\n        long[] fib4 = new long[4];\n        fib4[0] = 1;\n        fib4[1]
    = 1;\n        fib4[2] = 1;\n        fib4[3] = 1;\n        long[] result = new
    long[4];\n        result[0] = 0;\n        result[1] = 0;\n        result[2] =
    2;\n        result[3] = 0;\n        long[] temp = new long[4];\n        temp[0]
    = 0;\n        temp[1] = 0;\n        temp[2] = 2;\n        temp[3] = 0;\n        long[]
    temp2 = new long[4];\n        temp2[0] = 0;\n        temp2[1] = 0;\n        temp2[2]
    = 2;\n        temp2[3] = 0;\n        long[] temp3 = new long[4];\n        temp3[0]
    = 0;\n        temp3[1] = 0;\n        temp3[2] = 2;\n        temp3[3] = 0;\n        long[]
    temp4 = new long[4];\n        temp4[0] = 0;\n        temp4[1] = 0;\n        temp4[2]
    = 2;\n        temp4[3] = 0;\n        long[] temp5 = new long[4];\n        temp5[0]
    = 0;\n        temp5[1] = 0;\n        temp5[2] = 2;\n        temp5[3] = 0;\n        long[]
    temp6 = new long[4];\n        temp6[0] = 0;\n        temp6[1] = 0;\n        temp6[2]
    = 2;\n        temp6[3] = 0;\n        long[] temp7 = new long[4];\n        temp7[0]
    = 0;\n        temp7[1] = 0;\n        temp7[2] = 2;\n        temp7[3] = 0;\n        long[]
    temp8 =\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplz8uatev.cs(73,23): error CS1525: Invalid expression term ''}''

    /tmp/tmplz8uatev.cs(73,23): error CS1002: ; expected

    '
  timestamp: 1659797369
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Your code goes
    here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5bcbe27f35047cebf391a4a0e08df48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5bcbe27f35047cebf391a4a0e08df48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        if (n < 4) {\n            return fib4[n];\n        }\n        for
    (int i = 4; i <= n; i++) {\n            long temp = fib4[0] + fib4[1] + fib4[2]
    + fib4[3];\n            fib4[0] = fib4[1];\n            fib4[1] = fib4[2];\n            fib4[2]
    = fib4[3];\n            fib4[3] = temp;\n        }\n        return fib4[3];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        long
    f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n        long
    j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long
    o = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n        long
    s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n        long
    w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n        long
    aa = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n        long
    ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah = 0;\n        long
    ai = 0;\n        long aj = 0;\n        long ak = 0;\n        long al = 0;\n        long
    am = 0;\n        long an = 0;\n        long ao = 0;\n        long ap = 0;\n        long
    aq = 0;\n        long ar = 0;\n        long as = 0;\n        long at = 0;\n        long
    au = 0;\n        long av = 0;\n        long aw = 0;\n        long ax = 0;\n        long
    ay = 0;\n        long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long
    bc = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n        long
    bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj = 0;\n        long
    bk = 0;\n        long bl = 0;\n        long bm = 0;\n        long bn = 0;\n        long
    bo = 0;\n        long bp = 0;\n        long bq = 0;\n        long br = 0;\n        long
    bs = 0;\n        long b\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2dyn4y6u.cs(66,14): error CS1001: Identifier expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1002: ; expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp2dyn4y6u.cs(66,17): error CS1031: Type expected

    /tmp/tmp2dyn4y6u.cs(93,15): error CS1002: ; expected

    '
  timestamp: 1659797369
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 0) {\n            throw
    new ArgumentException(\"n must be >= 0\");\n        }\n        if (n == 0) {\n
    \           return 0;\n        }\n        if (n == 1) {\n            return 0;\n
    \       }\n        if (n == 2) {\n            return 2;\n        }\n        if
    (n == 3) {\n            return 0;\n        }\n        long n0 = 0;\n        long
    n1 = 0;\n        long n2 = 2;\n        long n3 = 0;\n        long n4 = 0;\n        for
    (long i = 4; i <= n; i++) {\n            n4 = n0 + n1 + n2 + n3;\n            n0
    = n1;\n            n1 = n2;\n            n2 = n3;\n            n3 = n4;\n        }\n
    \       return n4;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 0) {\n            throw
    new ArgumentException(\"n must be non-negative\");\n        }\n        if (n ==
    0) {\n            return 0;\n        }\n        if (n == 1) {\n            return
    0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if
    (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i = 4; i <=
    n; i++) {\n            long e = a + b + c + d;\n            a = b;\n            b
    = c;\n            c = d;\n            d = e;\n        }\n        return a + b
    + c + d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <71637c19572a4b2d847bec7f135314c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <71637c19572a4b2d847bec7f135314c6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib = new
    long[4];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3]
    = 0;\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = fib[(i
    - 1) % 4] + fib[(i - 2) % 4] + fib[(i - 3) % 4] + fib[(i - 4) % 4];\n        }\n
    \       return fib[n % 4];\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        long[] fib4_new = new long[4];\n        fib4_new[0] = 0;\n        fib4_new[1]
    = 0;\n        fib4_new[2] = 2;\n        fib4_new[3] = 0;\n        long[] fib4_old
    = new long[4];\n        fib4_old[0] = 0;\n        fib4_old[1] = 0;\n        fib4_old[2]
    = 2;\n        fib4_old[3] = 0;\n        long[] fib4_older = new long[4];\n        fib4_older[0]
    = 0;\n        fib4_older[1] = 0;\n        fib4_older[2] = 2;\n        fib4_older[3]
    = 0;\n        long[] fib4_oldest = new long[4];\n        fib4_oldest[0] = 0;\n
    \       fib4_oldest[1] = 0;\n        fib4_oldest[2] = 2;\n        fib4_oldest[3]
    = 0;\n        long[] fib4_temp = new long[4];\n        fib4_temp[0] = 0;\n        fib4_temp[1]
    = 0;\n        fib4_temp[2] = 2;\n        fib4_temp[3] = 0;\n        long[] fib4_temp2
    = new long[4];\n        fib4_temp2[0] = 0;\n        fib4_temp2[1] = 0;\n        fib4_temp2[2]
    = 2;\n        fib4_temp2[3] = 0;\n        long[] fib4_temp3 = new long[4];\n        fib4_temp3[0]
    = 0;\n        fib4_temp3[1] = 0;\n        fib4_temp3[2] = 2;\n        fib4_temp3[3]
    = 0;\n        long[] fib4_temp4 = new\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzgtl7j7r.cs(63,32): error CS1031: Type expected

    /tmp/tmpzgtl7j7r.cs(63,32): error CS1526: A new expression requires (), [], or
    {} after type

    /tmp/tmpzgtl7j7r.cs(63,32): error CS1002: ; expected

    '
  timestamp: 1659797369
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[n+1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n
    \       fib4[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib4[i]
    = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n        }\n        return fib4[n];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) {\n            return
    0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if
    (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return
    0;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    temp = a + b + c + d;\n            a = b;\n            b = c;\n            c =
    d;\n            d = temp;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <02688f9dbb754d42919332de574af21b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <02688f9dbb754d42919332de574af21b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 0) {\n            throw
    new ArgumentException(\"n must be non-negative\");\n        }\n        if (n ==
    0) {\n            return 0;\n        }\n        if (n == 1) {\n            return
    0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if
    (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i = 4; i <=
    n; i++) {\n            long new_a = d;\n            long new_b = a;\n            long
    new_c = b;\n            long new_d = c + a + b + d;\n            a = new_a;\n
    \           b = new_b;\n            c = new_c;\n            d = new_d;\n        }\n
    \       return c + a + b + d;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <910b294f80954f48ad8ad1d814cbd4de>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <910b294f80954f48ad8ad1d814cbd4de>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    Fib4\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8366b4ea19a14d279276ce4d86d73ec0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8366b4ea19a14d279276ce4d86d73ec0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        long result = 0;\n        for (int i = 4; i <= n; i++) {\n            result
    = fib4[0] + fib4[1] + fib4[2] + fib4[3];\n            fib4[0] = fib4[1];\n            fib4[1]
    = fib4[2];\n            fib4[2] = fib4[3];\n            fib4[3] = result;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n
    \           d = e;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95334a7c299549cea6d802df113be01a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95334a7c299549cea6d802df113be01a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <477e0fd1e271413fb8f2d86a12dd28d7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <477e0fd1e271413fb8f2d86a12dd28d7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fibs = new
    long[4];\n        fibs[0] = 0;\n        fibs[1] = 0;\n        fibs[2] = 2;\n        fibs[3]
    = 0;\n        for (int i = 4; i <= n; i++) {\n            long temp = fibs[0]
    + fibs[1] + fibs[2] + fibs[3];\n            fibs[0] = fibs[1];\n            fibs[1]
    = fibs[2];\n            fibs[2] = fibs[3];\n            fibs[3] = temp;\n        }\n
    \       return fibs[3];\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        for (int i = 4; i <= n; i++) {\n            long temp = fib4[0]
    + fib4[1] + fib4[2] + fib4[3];\n            fib4[0] = fib4[1];\n            fib4[1]
    = fib4[2];\n            fib4[2] = fib4[3];\n            fib4[3] = temp;\n        }\n
    \       return fib4[3];\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    temp = a + b + c + d;\n            a = b;\n            b = c;\n            c =
    d;\n            d = temp;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0596e308446d4bda8109166a209a47b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0596e308446d4bda8109166a209a47b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib = new
    long[4];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3]
    = 0;\n        for (int i = 4; i <= n; i++) {\n            long temp = fib[0] +
    fib[1] + fib[2] + fib[3];\n            fib[0] = fib[1];\n            fib[1] =
    fib[2];\n            fib[2] = fib[3];\n            fib[3] = temp;\n        }\n
    \       return fib[3];\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        for
    (long i = 4; i <= n; i++) {\n            e = a + b + c + d;\n            a = b;\n
    \           b = c;\n            c = d;\n            d = e;\n        }\n        return
    e;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        long
    f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n        long
    j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long
    o = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n        long
    s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n        long
    w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n        long
    aa = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n        long
    ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah = 0;\n        long
    ai = 0;\n        long aj = 0;\n        long ak = 0;\n        long al = 0;\n        long
    am = 0;\n        long an = 0;\n        long ao = 0;\n        long ap = 0;\n        long
    aq = 0;\n        long ar = 0;\n        long as = 0;\n        long at = 0;\n        long
    au = 0;\n        long av = 0;\n        long aw = 0;\n        long ax = 0;\n        long
    ay = 0;\n        long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long
    bc = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n        long
    bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj = 0;\n        long
    bk = 0;\n        long bl = 0;\n        long bm = 0;\n        long bn = 0;\n        long
    bo = 0;\n        long bp = 0;\n        long bq = 0;\n        long br = 0;\n        long
    bs = 0;\n        long b\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2dyn4y6u.cs(66,14): error CS1001: Identifier expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1002: ; expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp2dyn4y6u.cs(66,17): error CS1031: Type expected

    /tmp/tmp2dyn4y6u.cs(93,15): error CS1002: ; expected

    '
  timestamp: 1659797369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        long[] fib4_new = new long[4];\n        fib4_new[0] = 0;\n        fib4_new[1]
    = 0;\n        fib4_new[2] = 2;\n        fib4_new[3] = 0;\n        long[] fib4_old
    = new long[4];\n        fib4_old[0] = 0;\n        fib4_old[1] = 0;\n        fib4_old[2]
    = 2;\n        fib4_old[3] = 0;\n        long[] fib4_older = new long[4];\n        fib4_older[0]
    = 0;\n        fib4_older[1] = 0;\n        fib4_older[2] = 2;\n        fib4_older[3]
    = 0;\n        long[] fib4_oldest = new long[4];\n        fib4_oldest[0] = 0;\n
    \       fib4_oldest[1] = 0;\n        fib4_oldest[2] = 2;\n        fib4_oldest[3]
    = 0;\n        long[] fib4_temp = new long[4];\n        fib4_temp[0] = 0;\n        fib4_temp[1]
    = 0;\n        fib4_temp[2] = 2;\n        fib4_temp[3] = 0;\n        long[] fib4_temp2
    = new long[4];\n        fib4_temp2[0] = 0;\n        fib4_temp2[1] = 0;\n        fib4_temp2[2]
    = 2;\n        fib4_temp2[3] = 0;\n        long[] fib4_temp3 = new long[4];\n        fib4_temp3[0]
    = 0;\n        fib4_temp3[1] = 0;\n        fib4_temp3[2] = 2;\n        fib4_temp3[3]
    = 0;\n        long[] fib4_temp4 = new\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzgtl7j7r.cs(63,32): error CS1031: Type expected

    /tmp/tmpzgtl7j7r.cs(63,32): error CS1526: A new expression requires (), [], or
    {} after type

    /tmp/tmpzgtl7j7r.cs(63,32): error CS1002: ; expected

    '
  timestamp: 1659797369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        if (n < 4) {\n            return fib4[n];\n        }\n        long[]
    fib4_1 = new long[4];\n        fib4_1[0] = 0;\n        fib4_1[1] = 0;\n        fib4_1[2]
    = 2;\n        fib4_1[3] = 0;\n        long[] fib4_2 = new long[4];\n        fib4_2[0]
    = 0;\n        fib4_2[1] = 0;\n        fib4_2[2] = 2;\n        fib4_2[3] = 0;\n
    \       long[] fib4_3 = new long[4];\n        fib4_3[0] = 0;\n        fib4_3[1]
    = 0;\n        fib4_3[2] = 2;\n        fib4_3[3] = 0;\n        long[] fib4_4 =
    new long[4];\n        fib4_4[0] = 0;\n        fib4_4[1] = 0;\n        fib4_4[2]
    = 2;\n        fib4_4[3] = 0;\n        long[] fib4_5 = new long[4];\n        fib4_5[0]
    = 0;\n        fib4_5[1] = 0;\n        fib4_5[2] = 2;\n        fib4_5[3] = 0;\n
    \       long[] fib4_6 = new long[4];\n        fib4_6[0] = 0;\n        fib4_6[1]
    = 0;\n        fib4_6[2] = 2;\n        fib4_6[3] = 0;\n        long[] fib4_7 =
    new long[4];\n        fib4_7[0] = 0;\n        fib4_7[1] = 0;\n        fib4_7[2]
    = 2;\n        fib4_7[3] = 0;\n        long[] fib4\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpig0zry3q.cs(66,20): error CS1002: ; expected

    '
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[n+1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n
    \       fib4[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib4[i]
    = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n        }\n        return fib4[n];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long[] f = new long[4];\n        f[0] = 0;\n        f[1]
    = 0;\n        f[2] = 2;\n        f[3] = 0;\n        for (int i = 4; i <= n; i++)
    {\n            long temp = f[0] + f[1] + f[2] + f[3];\n            f[0] = f[1];\n
    \           f[1] = f[2];\n            f[2] = f[3];\n            f[3] = temp;\n
    \       }\n        return f[3];\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0, b = 0,
    c = 2, d = 0;\n        for (long i = 3; i <= n; i++) {\n            d = a + b
    + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a913a946607341bab7c8cb84dbcb80ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a913a946607341bab7c8cb84dbcb80ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        throw new NotImplementedException();\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.NotImplementedException: The method or operation
    is not implemented.\n  at Problem.Main (System.String[] args) [0x00001] in <1db6655b54b54c6abd5d1dfe4f67b4af>:0
    \n[ERROR] FATAL UNHANDLED EXCEPTION: System.NotImplementedException: The method
    or operation is not implemented.\n  at Problem.Main (System.String[] args) [0x00001]
    in <1db6655b54b54c6abd5d1dfe4f67b4af>:0 \n"
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    Fib4\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8366b4ea19a14d279276ce4d86d73ec0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8366b4ea19a14d279276ce4d86d73ec0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    temp = a + b + c + d;\n            a = b;\n            b = c;\n            c =
    d;\n            d = temp;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0596e308446d4bda8109166a209a47b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0596e308446d4bda8109166a209a47b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    Fib4.\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8425c5b8a2a64c44a5ea05787c778f01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8425c5b8a2a64c44a5ea05787c778f01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[n+1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n
    \       fib4[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib4[i]
    = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n        }\n        return fib4[n];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0, b = 0,
    c = 2, d = 0;\n        for (long i = 3; i <= n; i++) {\n            d = a + b
    + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a913a946607341bab7c8cb84dbcb80ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a913a946607341bab7c8cb84dbcb80ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0, b = 0,
    c = 2, d = 0;\n        for (long i = 3; i <= n; i++) {\n            d = a + b
    + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a913a946607341bab7c8cb84dbcb80ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a913a946607341bab7c8cb84dbcb80ba>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        long
    f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n        long
    j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long
    o = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n        long
    s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n        long
    w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n        long
    aa = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n        long
    ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah = 0;\n        long
    ai = 0;\n        long aj = 0;\n        long ak = 0;\n        long al = 0;\n        long
    am = 0;\n        long an = 0;\n        long ao = 0;\n        long ap = 0;\n        long
    aq = 0;\n        long ar = 0;\n        long as = 0;\n        long at = 0;\n        long
    au = 0;\n        long av = 0;\n        long aw = 0;\n        long ax = 0;\n        long
    ay = 0;\n        long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long
    bc = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n        long
    bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj = 0;\n        long
    bk = 0;\n        long bl = 0;\n        long bm = 0;\n        long bn = 0;\n        long
    bo = 0;\n        long bp = 0;\n        long bq = 0;\n        long br = 0;\n        long
    bs = 0;\n        long b\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2dyn4y6u.cs(66,14): error CS1001: Identifier expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1002: ; expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp2dyn4y6u.cs(66,17): error CS1031: Type expected

    /tmp/tmp2dyn4y6u.cs(93,15): error CS1002: ; expected

    '
  timestamp: 1659797369
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (int i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[n+1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n
    \       fib4[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib4[i]
    = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n        }\n        return fib4[n];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (int i = 4; i <= n; i++) {\n            long
    temp = a + b + c + d;\n            a = b;\n            b = c;\n            c =
    d;\n            d = temp;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0610a005c61466bace0618b91a1f4d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0610a005c61466bace0618b91a1f4d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        long
    f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n        long
    j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long
    o = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n        long
    s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n        long
    w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n        long
    aa = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n        long
    ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah = 0;\n        long
    ai = 0;\n        long aj = 0;\n        long ak = 0;\n        long al = 0;\n        long
    am = 0;\n        long an = 0;\n        long ao = 0;\n        long ap = 0;\n        long
    aq = 0;\n        long ar = 0;\n        long as = 0;\n        long at = 0;\n        long
    au = 0;\n        long av = 0;\n        long aw = 0;\n        long ax = 0;\n        long
    ay = 0;\n        long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long
    bc = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n        long
    bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj = 0;\n        long
    bk = 0;\n        long bl = 0;\n        long bm = 0;\n        long bn = 0;\n        long
    bo = 0;\n        long bp = 0;\n        long bq = 0;\n        long br = 0;\n        long
    bs = 0;\n        long b\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2dyn4y6u.cs(66,14): error CS1001: Identifier expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1002: ; expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp2dyn4y6u.cs(66,17): error CS1031: Type expected

    /tmp/tmp2dyn4y6u.cs(93,15): error CS1002: ; expected

    '
  timestamp: 1659797369
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        long
    f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n        long
    j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long
    o = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n        long
    s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n        long
    w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n        long
    aa = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n        long
    ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah = 0;\n        long
    ai = 0;\n        long aj = 0;\n        long ak = 0;\n        long al = 0;\n        long
    am = 0;\n        long an = 0;\n        long ao = 0;\n        long ap = 0;\n        long
    aq = 0;\n        long ar = 0;\n        long as = 0;\n        long at = 0;\n        long
    au = 0;\n        long av = 0;\n        long aw = 0;\n        long ax = 0;\n        long
    ay = 0;\n        long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long
    bc = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n        long
    bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj = 0;\n        long
    bk = 0;\n        long bl = 0;\n        long bm = 0;\n        long bn = 0;\n        long
    bo = 0;\n        long bp = 0;\n        long bq = 0;\n        long br = 0;\n        long
    bs = 0;\n        long b\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2dyn4y6u.cs(66,14): error CS1001: Identifier expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1002: ; expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp2dyn4y6u.cs(66,17): error CS1031: Type expected

    /tmp/tmp2dyn4y6u.cs(93,15): error CS1002: ; expected

    '
  timestamp: 1659797369
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Your code goes
    here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5bcbe27f35047cebf391a4a0e08df48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5bcbe27f35047cebf391a4a0e08df48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[n + 1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n
    \       fib4[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib4[i]
    = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n        }\n        return
    fib4[n];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        for
    (long i = 3; i <= n; i++) {\n            e = a + b + c + d;\n            a = b;\n
    \           b = c;\n            c = d;\n            d = e;\n        }\n        return
    e;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40d4d6047c04495c97c7306d9a031da6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40d4d6047c04495c97c7306d9a031da6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib = new
    long[4];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3]
    = 0;\n        long[] fib2 = new long[4];\n        fib2[0] = 1;\n        fib2[1]
    = 1;\n        fib2[2] = 1;\n        fib2[3] = 1;\n        long[] fib3 = new long[4];\n
    \       fib3[0] = 0;\n        fib3[1] = 0;\n        fib3[2] = 0;\n        fib3[3]
    = 0;\n        long[] fib4 = new long[4];\n        fib4[0] = 0;\n        fib4[1]
    = 0;\n        fib4[2] = 0;\n        fib4[3] = 0;\n        long[] fib5 = new long[4];\n
    \       fib5[0] = 0;\n        fib5[1] = 0;\n        fib5[2] = 0;\n        fib5[3]
    = 0;\n        long[] fib6 = new long[4];\n        fib6[0] = 0;\n        fib6[1]
    = 0;\n        fib6[2] = 0;\n        fib6[3] = 0;\n        long[] fib7 = new long[4];\n
    \       fib7[0] = 0;\n        fib7[1] = 0;\n        fib7[2] = 0;\n        fib7[3]
    = 0;\n        long[] fib8 = new long[4];\n        fib8[0] = 0;\n        fib8[1]
    = 0;\n        fib8[2] = 0;\n        fib8[3] = 0;\n        long[] fib9 = new long[4];\n
    \       fib9[0] = 0;\n        fib9[1] = 0;\n        fib9[2] = 0;\n        fib9[3]
    = 0;\n        long[] fib10 = new long[4];\n        fib10[0] = 0;\n        fib10[1]
    = 0;\n        fib10[2] = 0;\n        fib10[3]\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0mi1smzc.cs(72,17): error CS1002: ; expected

    '
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n
    \           d = e;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95334a7c299549cea6d802df113be01a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95334a7c299549cea6d802df113be01a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (int i = 4; i <= n; i++) {\n            long
    temp = a + b + c + d;\n            a = b;\n            b = c;\n            c =
    d;\n            d = temp;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0610a005c61466bace0618b91a1f4d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0610a005c61466bace0618b91a1f4d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n
    \           d = e;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95334a7c299549cea6d802df113be01a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95334a7c299549cea6d802df113be01a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    temp = a + b + c + d;\n            a = b;\n            b = c;\n            c =
    d;\n            d = temp;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0596e308446d4bda8109166a209a47b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0596e308446d4bda8109166a209a47b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        for (int i = 4; i <= n; i++) {\n            fib4[i % 4] = fib4[(i
    - 1) % 4] + fib4[(i - 2) % 4] + fib4[(i - 3) % 4] + fib4[(i - 4) % 4];\n        }\n
    \       return fib4[n % 4];\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        for
    (long i = 3; i <= n; i++) {\n            e = a + b + c + d;\n            a = b;\n
    \           b = c;\n            c = d;\n            d = e;\n        }\n        return
    e;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40d4d6047c04495c97c7306d9a031da6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40d4d6047c04495c97c7306d9a031da6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0, b = 0,
    c = 2, d = 0;\n        for (int i = 3; i <= n; i++) {\n            d = a + b +
    c;\n            a = b;\n            b = c;\n            c = d;\n        }\n        return
    d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fca51c7fc3ad422296e89ef59b18d29e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fca51c7fc3ad422296e89ef59b18d29e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        long[] fibs = new long[4];\n        fibs[0] = 0;\n        fibs[1]
    = 0;\n        fibs[2] = 2;\n        fibs[3] = 0;\n        for (int i = 4; i <=
    n; i++) {\n            long temp = fibs[3];\n            fibs[3] = fibs[2] + fibs[1]
    + fibs[0] + fibs[3];\n            fibs[0] = fibs[1];\n            fibs[1] = fibs[2];\n
    \           fibs[2] = temp;\n        }\n        return fibs[3];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        long[] fib4_next = new long[4];\n        fib4_next[0] = 0;\n        fib4_next[1]
    = 0;\n        fib4_next[2] = 2;\n        fib4_next[3] = 0;\n        long[] fib4_temp
    = new long[4];\n        for (long i = 0; i < n; i++) {\n            fib4_temp[0]
    = fib4[0];\n            fib4_temp[1] = fib4[1];\n            fib4_temp[2] = fib4[2];\n
    \           fib4_temp[3] = fib4[3];\n            fib4[0] = fib4_next[0];\n            fib4[1]
    = fib4_next[1];\n            fib4[2] = fib4_next[2];\n            fib4[3] = fib4_next[3];\n
    \           fib4_next[0] = fib4_temp[0] + fib4_temp[1] + fib4_temp[2] + fib4_temp[3];\n
    \           fib4_next[1] = fib4_temp[0];\n            fib4_next[2] = fib4_temp[1];\n
    \           fib4_next[3] = fib4_temp[2];\n        }\n        return fib4[0];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acbbb4e29c0d401699ca4e07fcc2c101>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acbbb4e29c0d401699ca4e07fcc2c101>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Your code goes
    here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5bcbe27f35047cebf391a4a0e08df48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5bcbe27f35047cebf391a4a0e08df48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Your code goes
    here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5bcbe27f35047cebf391a4a0e08df48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5bcbe27f35047cebf391a4a0e08df48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) {\n            return
    0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if
    (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return
    0;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[n + 1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n
    \       fib4[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib4[i]
    = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n        }\n        return
    fib4[n];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (int i = 4; i <= n; i++) {\n            long
    e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n
    \           d = e;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e705699c684e4fab86b93460caa2a1b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e705699c684e4fab86b93460caa2a1b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Fill in the code
    here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <691c9aca7f22453fa5f805f2f3dcb0f9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <691c9aca7f22453fa5f805f2f3dcb0f9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    Fib4\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8366b4ea19a14d279276ce4d86d73ec0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8366b4ea19a14d279276ce4d86d73ec0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        for
    (long i = 3; i <= n; i++) {\n            e = a + b + c + d;\n            a = b;\n
    \           b = c;\n            c = d;\n            d = e;\n        }\n        return
    e;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40d4d6047c04495c97c7306d9a031da6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40d4d6047c04495c97c7306d9a031da6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        // Hint: You can use a matrix to represent the recurrence
    relation.\n        // Hint: You can use the exponentiation by squaring algorithm
    to efficiently compute the n-th power of a matrix.\n        // Hint: You can use
    the Chinese Remainder Theorem to efficiently compute the n-th power of a matrix
    modulo a prime.\n        // Hint: You can use the Chinese Remainder Theorem to
    efficiently compute the n-th power of a matrix modulo a composite number.\n        //
    Hint: You can use the Chinese Remainder Theorem to efficiently compute the n-th
    power of a matrix modulo a composite number.\n        // Hint: You can use the
    Chinese Remainder Theorem to efficiently compute the n-th power of a matrix modulo
    a composite number.\n        // Hint: You can use the Chinese Remainder Theorem
    to efficiently compute the n-th power of a matrix modulo a composite number.\n
    \       // Hint: You can use the Chinese Remainder Theorem to efficiently compute
    the n-th power of a matrix modulo a composite number.\n        // Hint: You can
    use the Chinese Remainder Theorem to efficiently compute the n-th power of a matrix
    modulo a composite number.\n        // Hint: You can use the Chinese Remainder
    Theorem to efficiently compute the n-th power of a matrix modulo a composite number.\n
    \       // Hint: You can use the Chinese Remainder Theorem to efficiently compute
    the n-th power of a matrix modulo a composite number.\n        // Hint: You can
    use the Chinese Remainder Theorem to efficiently compute the n-th power of a matrix
    modulo a composite number.\n        // Hint: You can use the Chinese Remainder
    Theorem to efficiently compute the n-th power of a matrix modulo a composite number.\n
    \       // Hint: You can use the Chinese Remainder Theorem to efficiently compute
    the n-th power of a matrix modulo a composite number.\n        // Hint: You can
    use the Chinese Remainder Theorem to efficiently compute the n-th power of a matrix
    modulo a composite number.\n        // Hint: You can use the Chinese Remainder
    Theorem to efficiently compute the n-th power of a matrix modulo a composite number.\n
    \       // Hint: You can use\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8hl6tc_v.cs(22,24): error CS0161: ''Problem.Fib4(long)'': not all code
    paths return a value

    '
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long[] fib4 = new long[4];\n        fib4[0] = 0;\n        fib4[1]
    = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n        for (int i = 4; i <=
    n; i++) {\n            long temp = fib4[0] + fib4[1] + fib4[2] + fib4[3];\n            fib4[0]
    = fib4[1];\n            fib4[1] = fib4[2];\n            fib4[2] = fib4[3];\n            fib4[3]
    = temp;\n        }\n        return fib4[3];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] a = new long[4];\n
    \       a[0] = 0;\n        a[1] = 0;\n        a[2] = 2;\n        a[3] = 0;\n        for
    (int i = 4; i <= n; i++) {\n            long temp = a[0] + a[1] + a[2] + a[3];\n
    \           a[0] = a[1];\n            a[1] = a[2];\n            a[2] = a[3];\n
    \           a[3] = temp;\n        }\n        return a[3];\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[n + 1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n
    \       fib4[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib4[i]
    = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n        }\n        return
    fib4[n];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        long result = 0;\n        for (int i = 4; i <= n; i++) {\n            result
    = fib4[0] + fib4[1] + fib4[2] + fib4[3];\n            fib4[0] = fib4[1];\n            fib4[1]
    = fib4[2];\n            fib4[2] = fib4[3];\n            fib4[3] = result;\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8cb8dc0d56324f4f90da1603ca643126>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8cb8dc0d56324f4f90da1603ca643126>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (int i = 4; i <= n; i++) {\n            long
    temp = a + b + c + d;\n            a = b;\n            b = c;\n            c =
    d;\n            d = temp;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0610a005c61466bace0618b91a1f4d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0610a005c61466bace0618b91a1f4d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        if (n < 4) {\n            return fib4[n];\n        }\n        long[]
    fib4_n = new long[4];\n        fib4_n[0] = 0;\n        fib4_n[1] = 0;\n        fib4_n[2]
    = 2;\n        fib4_n[3] = 0;\n        long[] fib4_n_1 = new long[4];\n        fib4_n_1[0]
    = 0;\n        fib4_n_1[1] = 0;\n        fib4_n_1[2] = 2;\n        fib4_n_1[3]
    = 0;\n        long[] fib4_n_2 = new long[4];\n        fib4_n_2[0] = 0;\n        fib4_n_2[1]
    = 0;\n        fib4_n_2[2] = 2;\n        fib4_n_2[3] = 0;\n        long[] fib4_n_3
    = new long[4];\n        fib4_n_3[0] = 0;\n        fib4_n_3[1] = 0;\n        fib4_n_3[2]
    = 2;\n        fib4_n_3[3] = 0;\n        long[] fib4_n_4 = new long[4];\n        fib4_n_4[0]
    = 0;\n        fib4_n_4[1] = 0;\n        fib4_n_4[2] = 2;\n        fib4_n_4[3]
    = 0;\n        for (long i = 4; i <= n; i++) {\n            fib4_n[0] = fib4_n_1[0]
    + fib4_n_2[0] + fib4_n_3[0] + fib4_n_4[0];\n            fib4_n[1] = fib4_n_1[1]
    + fib4_n_\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3gmbp4gs.cs(58,46): error CS1002: ; expected

    /tmp/tmp3gmbp4gs.cs(60,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp3gmbp4gs.cs(67,2): error CS1513: } expected

    '
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        long
    f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n        long
    j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long
    o = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n        long
    s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n        long
    w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n        long
    aa = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n        long
    ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah = 0;\n        long
    ai = 0;\n        long aj = 0;\n        long ak = 0;\n        long al = 0;\n        long
    am = 0;\n        long an = 0;\n        long ao = 0;\n        long ap = 0;\n        long
    aq = 0;\n        long ar = 0;\n        long as = 0;\n        long at = 0;\n        long
    au = 0;\n        long av = 0;\n        long aw = 0;\n        long ax = 0;\n        long
    ay = 0;\n        long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long
    bc = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n        long
    bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj = 0;\n        long
    bk = 0;\n        long bl = 0;\n        long bm = 0;\n        long bn = 0;\n        long
    bo = 0;\n        long bp = 0;\n        long bq = 0;\n        long br = 0;\n        long
    bs = 0;\n        long b\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2dyn4y6u.cs(66,14): error CS1001: Identifier expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1002: ; expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp2dyn4y6u.cs(66,17): error CS1031: Type expected

    /tmp/tmp2dyn4y6u.cs(93,15): error CS1002: ; expected

    '
  timestamp: 1659797369
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    temp = a + b + c + d;\n            a = b;\n            b = c;\n            c =
    d;\n            d = temp;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0596e308446d4bda8109166a209a47b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0596e308446d4bda8109166a209a47b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Your code goes
    here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5bcbe27f35047cebf391a4a0e08df48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5bcbe27f35047cebf391a4a0e08df48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        long[] fib4_new = new long[4];\n        fib4_new[0] = 0;\n        fib4_new[1]
    = 0;\n        fib4_new[2] = 2;\n        fib4_new[3] = 0;\n        long[] fib4_old
    = new long[4];\n        fib4_old[0] = 0;\n        fib4_old[1] = 0;\n        fib4_old[2]
    = 2;\n        fib4_old[3] = 0;\n        long[] fib4_older = new long[4];\n        fib4_older[0]
    = 0;\n        fib4_older[1] = 0;\n        fib4_older[2] = 2;\n        fib4_older[3]
    = 0;\n        long[] fib4_oldest = new long[4];\n        fib4_oldest[0] = 0;\n
    \       fib4_oldest[1] = 0;\n        fib4_oldest[2] = 2;\n        fib4_oldest[3]
    = 0;\n        long[] fib4_temp = new long[4];\n        fib4_temp[0] = 0;\n        fib4_temp[1]
    = 0;\n        fib4_temp[2] = 2;\n        fib4_temp[3] = 0;\n        long[] fib4_temp2
    = new long[4];\n        fib4_temp2[0] = 0;\n        fib4_temp2[1] = 0;\n        fib4_temp2[2]
    = 2;\n        fib4_temp2[3] = 0;\n        long[] fib4_temp3 = new long[4];\n        fib4_temp3[0]
    = 0;\n        fib4_temp3[1] = 0;\n        fib4_temp3[2] = 2;\n        fib4_temp3[3]
    = 0;\n        long[] fib4_temp4 = new\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzgtl7j7r.cs(63,32): error CS1031: Type expected

    /tmp/tmpzgtl7j7r.cs(63,32): error CS1526: A new expression requires (), [], or
    {} after type

    /tmp/tmpzgtl7j7r.cs(63,32): error CS1002: ; expected

    '
  timestamp: 1659797369
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        long[] fib4_new = new long[4];\n        fib4_new[0] = 0;\n        fib4_new[1]
    = 0;\n        fib4_new[2] = 2;\n        fib4_new[3] = 0;\n        if (n <= 3)
    {\n            return fib4[n];\n        }\n        for (long i = 4; i <= n; i++)
    {\n            fib4_new[0] = fib4[1] + fib4[2] + fib4[3] + fib4[0];\n            fib4_new[1]
    = fib4[2] + fib4[3] + fib4[0] + fib4[1];\n            fib4_new[2] = fib4[3] +
    fib4[0] + fib4[1] + fib4[2];\n            fib4_new[3] = fib4[0] + fib4[1] + fib4[2]
    + fib4[3];\n            fib4[0] = fib4_new[0];\n            fib4[1] = fib4_new[1];\n
    \           fib4[2] = fib4_new[2];\n            fib4[3] = fib4_new[3];\n        }\n
    \       return fib4[0];\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cabb34f16309447180c3096be597b6eb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cabb34f16309447180c3096be597b6eb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        for
    (long i = 3; i <= n; i++) {\n            e = a + b + c + d;\n            a = b;\n
    \           b = c;\n            c = d;\n            d = e;\n        }\n        return
    e;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40d4d6047c04495c97c7306d9a031da6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40d4d6047c04495c97c7306d9a031da6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        for
    (long i = 3; i <= n; i++) {\n            e = a + b + c + d;\n            a = b;\n
    \           b = c;\n            c = d;\n            d = e;\n        }\n        return
    e;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40d4d6047c04495c97c7306d9a031da6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40d4d6047c04495c97c7306d9a031da6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        long
    f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n        long
    j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long
    o = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n        long
    s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n        long
    w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n        long
    aa = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n        long
    ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah = 0;\n        long
    ai = 0;\n        long aj = 0;\n        long ak = 0;\n        long al = 0;\n        long
    am = 0;\n        long an = 0;\n        long ao = 0;\n        long ap = 0;\n        long
    aq = 0;\n        long ar = 0;\n        long as = 0;\n        long at = 0;\n        long
    au = 0;\n        long av = 0;\n        long aw = 0;\n        long ax = 0;\n        long
    ay = 0;\n        long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long
    bc = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n        long
    bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj = 0;\n        long
    bk = 0;\n        long bl = 0;\n        long bm = 0;\n        long bn = 0;\n        long
    bo = 0;\n        long bp = 0;\n        long bq = 0;\n        long br = 0;\n        long
    bs = 0;\n        long b\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2dyn4y6u.cs(66,14): error CS1001: Identifier expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1002: ; expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp2dyn4y6u.cs(66,17): error CS1031: Type expected

    /tmp/tmp2dyn4y6u.cs(93,15): error CS1002: ; expected

    '
  timestamp: 1659797369
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fibs = new
    long[4];\n        fibs[0] = 0;\n        fibs[1] = 0;\n        fibs[2] = 2;\n        fibs[3]
    = 0;\n        for (int i = 4; i <= n; i++) {\n            long temp = fibs[0]
    + fibs[1] + fibs[2] + fibs[3];\n            fibs[0] = fibs[1];\n            fibs[1]
    = fibs[2];\n            fibs[2] = fibs[3];\n            fibs[3] = temp;\n        }\n
    \       return fibs[3];\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (int i = 4; i <= n; i++) {\n            long
    e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n
    \           d = e;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e705699c684e4fab86b93460caa2a1b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e705699c684e4fab86b93460caa2a1b0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n
    \           d = e;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95334a7c299549cea6d802df113be01a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95334a7c299549cea6d802df113be01a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement\n
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4f0f94eb3cc464ea67fc2c7dfd9999a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b4f0f94eb3cc464ea67fc2c7dfd9999a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    temp = d;\n            d = a + b + c + d;\n            a = b;\n            b =
    c;\n            c = temp;\n        }\n        return d;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    Fib4.\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8425c5b8a2a64c44a5ea05787c778f01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8425c5b8a2a64c44a5ea05787c778f01>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    temp = a + b + c + d;\n            a = b;\n            b = c;\n            c =
    d;\n            d = temp;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0596e308446d4bda8109166a209a47b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0596e308446d4bda8109166a209a47b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0, b = 0,
    c = 2, d = 0;\n        for (long i = 4; i <= n; i++) {\n            d = a + b
    + c;\n            a = b;\n            b = c;\n            c = d;\n        }\n
    \       return d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acbbc6ff3c45477a816a0caa964b7161>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <acbbc6ff3c45477a816a0caa964b7161>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        long[] fib4 = new long[n+1];\n        fib4[0] = 0;\n        fib4[1]
    = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n        for (int i = 4; i <=
    n; i++) {\n            fib4[i] = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n
    \       }\n        return fib4[n];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        long[] fib4_next = new long[4];\n        fib4_next[0] = 0;\n        fib4_next[1]
    = 0;\n        fib4_next[2] = 2;\n        fib4_next[3] = 0;\n        long[] fib4_temp
    = new long[4];\n        fib4_temp[0] = 0;\n        fib4_temp[1] = 0;\n        fib4_temp[2]
    = 2;\n        fib4_temp[3] = 0;\n        long[] fib4_temp2 = new long[4];\n        fib4_temp2[0]
    = 0;\n        fib4_temp2[1] = 0;\n        fib4_temp2[2] = 2;\n        fib4_temp2[3]
    = 0;\n        long[] fib4_temp3 = new long[4];\n        fib4_temp3[0] = 0;\n        fib4_temp3[1]
    = 0;\n        fib4_temp3[2] = 2;\n        fib4_temp3[3] = 0;\n        long[] fib4_temp4
    = new long[4];\n        fib4_temp4[0] = 0;\n        fib4_temp4[1] = 0;\n        fib4_temp4[2]
    = 2;\n        fib4_temp4[3] = 0;\n        long[] fib4_temp5 = new long[4];\n        fib4_temp5[0]
    = 0;\n        fib4_temp5[1] = 0;\n        fib4_temp5[2] = 2;\n        fib4_temp5[3]
    = 0;\n        long[] fib4_temp6 = new long[4];\n        fib4_temp6[0] = 0;\n        fib4_temp6[1]
    = 0;\n        fib4_temp6[2] = 2;\n        fib4_temp6[3] = 0;\n\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4dpj3mne.cs(22,24): error CS0161: ''Problem.Fib4(long)'': not all code
    paths return a value

    '
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i = 4; i <=
    n; i++) {\n            long temp = a + b + c + d;\n            a = b;\n            b
    = c;\n            c = d;\n            d = temp;\n        }\n        return a +
    b + c + d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <11131092fd3f483b8fed208e92b7d122>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <11131092fd3f483b8fed208e92b7d122>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (int i = 4; i <= n; i++) {\n            long
    temp = a + b + c + d;\n            a = b;\n            b = c;\n            c =
    d;\n            d = temp;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0610a005c61466bace0618b91a1f4d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0610a005c61466bace0618b91a1f4d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[n+1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n
    \       fib4[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib4[i]
    = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n        }\n        return fib4[n];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    temp = a + b + c + d;\n            a = b;\n            b = c;\n            c =
    d;\n            d = temp;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0596e308446d4bda8109166a209a47b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0596e308446d4bda8109166a209a47b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 0) {\n            throw
    new ArgumentException(\"n must be non-negative\");\n        }\n        if (n ==
    0) {\n            return 0;\n        }\n        if (n == 1) {\n            return
    0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if
    (n == 3) {\n            return 0;\n        }\n        long[] fibs = new long[4];\n
    \       fibs[0] = 0;\n        fibs[1] = 0;\n        fibs[2] = 2;\n        fibs[3]
    = 0;\n        for (int i = 4; i <= n; i++) {\n            long next = fibs[0]
    + fibs[1] + fibs[2] + fibs[3];\n            fibs[0] = fibs[1];\n            fibs[1]
    = fibs[2];\n            fibs[2] = fibs[3];\n            fibs[3] = next;\n        }\n
    \       return fibs[3];\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    Fib4\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8366b4ea19a14d279276ce4d86d73ec0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8366b4ea19a14d279276ce4d86d73ec0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        for
    (long i = 3; i <= n; i++) {\n            e = a + b + c + d;\n            a = b;\n
    \           b = c;\n            c = d;\n            d = e;\n        }\n        return
    e;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40d4d6047c04495c97c7306d9a031da6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40d4d6047c04495c97c7306d9a031da6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        if (n < 4) {\n            return fib4[n];\n        }\n        long[]
    fib4_n = new long[4];\n        fib4_n[0] = 0;\n        fib4_n[1] = 0;\n        fib4_n[2]
    = 2;\n        fib4_n[3] = 0;\n        long[] fib4_n_1 = new long[4];\n        fib4_n_1[0]
    = 0;\n        fib4_n_1[1] = 0;\n        fib4_n_1[2] = 2;\n        fib4_n_1[3]
    = 0;\n        long[] fib4_n_2 = new long[4];\n        fib4_n_2[0] = 0;\n        fib4_n_2[1]
    = 0;\n        fib4_n_2[2] = 2;\n        fib4_n_2[3] = 0;\n        long[] fib4_n_3
    = new long[4];\n        fib4_n_3[0] = 0;\n        fib4_n_3[1] = 0;\n        fib4_n_3[2]
    = 2;\n        fib4_n_3[3] = 0;\n        long[] fib4_n_4 = new long[4];\n        fib4_n_4[0]
    = 0;\n        fib4_n_4[1] = 0;\n        fib4_n_4[2] = 2;\n        fib4_n_4[3]
    = 0;\n        for (long i = 4; i <= n; i++) {\n            fib4_n[0] = fib4_n_1[0]
    + fib4_n_2[0] + fib4_n_3[0] + fib4_n_4[0];\n            fib4_n[1] = fib4_n_1[1]
    + fib4_n_\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3gmbp4gs.cs(58,46): error CS1002: ; expected

    /tmp/tmp3gmbp4gs.cs(60,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp3gmbp4gs.cs(67,2): error CS1513: } expected

    '
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        if (n == 0) return a;\n
    \       if (n == 1) return b;\n        if (n == 2) return c;\n        if (n ==
    3) return d;\n        for (long i = 4; i <= n; i++) {\n            long temp =
    a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n            d
    = temp;\n        }\n        return d;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    e = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n
    \           d = e;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95334a7c299549cea6d802df113be01a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <95334a7c299549cea6d802df113be01a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib = new
    long[4];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3]
    = 0;\n        for (int i = 4; i <= n; i++) {\n            fib[i % 4] = fib[(i
    - 1) % 4] + fib[(i - 2) % 4] + fib[(i - 3) % 4] + fib[(i - 4) % 4];\n        }\n
    \       return fib[n % 4];\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        for (int i = 4; i <= n; i++) {\n            fib4[i % 4] = fib4[(i
    - 1) % 4] + fib4[(i - 2) % 4] + fib4[(i - 3) % 4] + fib4[(i - 4) % 4];\n        }\n
    \       return fib4[n % 4];\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        if (n < 4) {\n            return fib4[n];\n        }\n        for
    (int i = 4; i <= n; i++) {\n            fib4[3] = fib4[0] + fib4[1] + fib4[2]
    + fib4[3];\n            fib4[0] = fib4[1];\n            fib4[1] = fib4[2];\n            fib4[2]
    = fib4[3];\n        }\n        return fib4[3];\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21a8c62fee184a05929785d14ebea460>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <21a8c62fee184a05929785d14ebea460>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long[] fib = new long[n + 1];\n        fib[0] = 0;\n
    \       fib[1] = 0;\n        fib[2] = 2;\n        fib[3] = 0;\n        for (int
    i = 4; i <= n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2] + fib[i -
    3] + fib[i - 4];\n        }\n        return fib[n];\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) {\n            return
    0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if
    (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return
    0;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    tmp = a + b + c + d;\n            a = b;\n            b = c;\n            c =
    d;\n            d = tmp;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5c18f22bf083449fa3d26d21e57d98fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5c18f22bf083449fa3d26d21e57d98fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        if (n < 4) {\n            return fib4[n];\n        }\n        long[]
    fib4_n = new long[4];\n        fib4_n[0] = 0;\n        fib4_n[1] = 0;\n        fib4_n[2]
    = 2;\n        fib4_n[3] = 0;\n        long[] fib4_n_1 = new long[4];\n        fib4_n_1[0]
    = 0;\n        fib4_n_1[1] = 0;\n        fib4_n_1[2] = 2;\n        fib4_n_1[3]
    = 0;\n        long[] fib4_n_2 = new long[4];\n        fib4_n_2[0] = 0;\n        fib4_n_2[1]
    = 0;\n        fib4_n_2[2] = 2;\n        fib4_n_2[3] = 0;\n        long[] fib4_n_3
    = new long[4];\n        fib4_n_3[0] = 0;\n        fib4_n_3[1] = 0;\n        fib4_n_3[2]
    = 2;\n        fib4_n_3[3] = 0;\n        long[] fib4_n_4 = new long[4];\n        fib4_n_4[0]
    = 0;\n        fib4_n_4[1] = 0;\n        fib4_n_4[2] = 2;\n        fib4_n_4[3]
    = 0;\n        long[] fib4_n_5 = new long[4];\n        fib4_n_5[0] = 0;\n        fib4_n_5[1]
    = 0;\n        fib4_n_5[2] = 2;\n        fib4_n_5[3] = 0;\n        long[] fib4_n_6
    = new long[4];\n       \n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa3uebz7o.cs(22,24): error CS0161: ''Problem.Fib4(long)'': not all code
    paths return a value

    '
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        for
    (long i = 3; i <= n; i++) {\n            e = a + b + c + d;\n            a = b;\n
    \           b = c;\n            c = d;\n            d = e;\n        }\n        return
    e;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40d4d6047c04495c97c7306d9a031da6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <40d4d6047c04495c97c7306d9a031da6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) {\n            return
    0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if
    (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return
    0;\n        }\n        long[] arr = new long[4];\n        arr[0] = 0;\n        arr[1]
    = 0;\n        arr[2] = 2;\n        arr[3] = 0;\n        for (int i = 4; i <= n;
    i++) {\n            long temp = arr[0] + arr[1] + arr[2] + arr[3];\n            arr[0]
    = arr[1];\n            arr[1] = arr[2];\n            arr[2] = arr[3];\n            arr[3]
    = temp;\n        }\n        return arr[3];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[n + 1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n
    \       fib4[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib4[i]
    = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n        }\n        return
    fib4[n];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[n + 1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n
    \       fib4[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib4[i]
    = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n        }\n        return
    fib4[n];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n <= 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797372
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        long
    f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n        long
    j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long
    o = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n        long
    s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n        long
    w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n        long
    aa = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n        long
    ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah = 0;\n        long
    ai = 0;\n        long aj = 0;\n        long ak = 0;\n        long al = 0;\n        long
    am = 0;\n        long an = 0;\n        long ao = 0;\n        long ap = 0;\n        long
    aq = 0;\n        long ar = 0;\n        long as = 0;\n        long at = 0;\n        long
    au = 0;\n        long av = 0;\n        long aw = 0;\n        long ax = 0;\n        long
    ay = 0;\n        long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long
    bc = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n        long
    bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj = 0;\n        long
    bk = 0;\n        long bl = 0;\n        long bm = 0;\n        long bn = 0;\n        long
    bo = 0;\n        long bp = 0;\n        long bq = 0;\n        long br = 0;\n        long
    bs = 0;\n        long b\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2dyn4y6u.cs(66,14): error CS1001: Identifier expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1002: ; expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp2dyn4y6u.cs(66,17): error CS1031: Type expected

    /tmp/tmp2dyn4y6u.cs(93,15): error CS1002: ; expected

    '
  timestamp: 1659797369
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 0) {\n            throw
    new ArgumentException();\n        }\n        if (n == 0) {\n            return
    0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if
    (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return
    0;\n        }\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        long
    f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n        long
    j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long
    o = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n        long
    s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n        long
    w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n        long
    aa = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n        long
    ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah = 0;\n        long
    ai = 0;\n        long aj = 0;\n        long ak = 0;\n        long al = 0;\n        long
    am = 0;\n        long an = 0;\n        long ao = 0;\n        long ap = 0;\n        long
    aq = 0;\n        long ar = 0;\n        long as = 0;\n        long at = 0;\n        long
    au = 0;\n        long av = 0;\n        long aw = 0;\n        long ax = 0;\n        long
    ay = 0;\n        long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long
    bc = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n        long
    bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj = 0;\n        long
    bk = 0;\n        long bl = 0;\n        long bm = 0;\n        long bn = 0;\n        long
    bo = 0;\n        long bp = 0;\n        long bq = 0;\n        long br = 0;\n        long
    bs = 0;\n        long b\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2dyn4y6u.cs(66,14): error CS1001: Identifier expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1002: ; expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp2dyn4y6u.cs(66,17): error CS1031: Type expected

    /tmp/tmp2dyn4y6u.cs(93,15): error CS1002: ; expected

    '
  timestamp: 1659797369
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 0) {\n            throw
    new ArgumentException(\"n must be non-negative\");\n        }\n        if (n ==
    0) {\n            return 0;\n        }\n        if (n == 1) {\n            return
    0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if
    (n == 3) {\n            return 0;\n        }\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        for (long i = 4; i <=
    n; i++) {\n            long temp = a + b + c + d;\n            a = b;\n            b
    = c;\n            c = d;\n            d = temp;\n        }\n        return a +
    b + c + d;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8817421a931844be818b1d84da582a03>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8817421a931844be818b1d84da582a03>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib = new
    long[4];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3]
    = 0;\n        for (int i = 4; i <= n; i++) {\n            long temp = fib[0] +
    fib[1] + fib[2] + fib[3];\n            fib[0] = fib[1];\n            fib[1] =
    fib[2];\n            fib[2] = fib[3];\n            fib[3] = temp;\n        }\n
    \       return fib[3];\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (int i = 4; i <= n; i++) {\n            long
    temp = a + b + c + d;\n            a = b;\n            b = c;\n            c =
    d;\n            d = temp;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0610a005c61466bace0618b91a1f4d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e0610a005c61466bace0618b91a1f4d9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    Fib4\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8366b4ea19a14d279276ce4d86d73ec0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8366b4ea19a14d279276ce4d86d73ec0>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    t = a + b + c + d;\n            a = b;\n            b = c;\n            c = d;\n
    \           d = t;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e39d0ee14d0471d9e75c879286ab941>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7e39d0ee14d0471d9e75c879286ab941>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib = new
    long[4];\n        fib[0] = 0;\n        fib[1] = 0;\n        fib[2] = 2;\n        fib[3]
    = 0;\n        if (n < 4) {\n            return fib[n];\n        }\n        long
    a = 0;\n        long b = 0;\n        long c = 2;\n        long d = 0;\n        long
    temp = 0;\n        for (int i = 4; i <= n; i++) {\n            temp = a + b +
    c + d;\n            a = b;\n            b = c;\n            c = d;\n            d
    = temp;\n        }\n        return temp;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[4];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3]
    = 0;\n        long[] fib4_new = new long[4];\n        fib4_new[0] = 0;\n        fib4_new[1]
    = 0;\n        fib4_new[2] = 2;\n        fib4_new[3] = 0;\n        if (n == 0)
    {\n            return fib4[0];\n        }\n        if (n == 1) {\n            return
    fib4[1];\n        }\n        if (n == 2) {\n            return fib4[2];\n        }\n
    \       if (n == 3) {\n            return fib4[3];\n        }\n        for (long
    i = 4; i <= n; i++) {\n            fib4_new[0] = fib4[1];\n            fib4_new[1]
    = fib4[2];\n            fib4_new[2] = fib4[3];\n            fib4_new[3] = fib4[0]
    + fib4[1] + fib4[2] + fib4[3];\n            fib4[0] = fib4_new[0];\n            fib4[1]
    = fib4_new[1];\n            fib4[2] = fib4_new[2];\n            fib4[3] = fib4_new[3];\n
    \       }\n        return fib4[3];\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[n + 1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n
    \       fib4[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib4[i]
    = fib4[i - 1] + fib4[i - 2] + fib4[i - 3] + fib4[i - 4];\n        }\n        return
    fib4[n];\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797371
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    temp = a + b + c + d;\n            a = b;\n            b = c;\n            c =
    d;\n            d = temp;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0596e308446d4bda8109166a209a47b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0596e308446d4bda8109166a209a47b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) {\n            return
    0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n        if
    (n == 2) {\n            return 2;\n        }\n        if (n == 3) {\n            return
    0;\n        }\n        long[] fib4 = new long[n + 1];\n        fib4[0] = 0;\n
    \       fib4[1] = 0;\n        fib4[2] = 2;\n        fib4[3] = 0;\n        for
    (int i = 4; i <= n; i++) {\n            fib4[i] = fib4[i - 1] + fib4[i - 2] +
    fib4[i - 3] + fib4[i - 4];\n        }\n        return fib4[n];\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        for (long i = 4; i <= n; i++) {\n            long
    temp = a + b + c + d;\n            a = b;\n            b = c;\n            c =
    d;\n            d = temp;\n        }\n        return a + b + c + d;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0596e308446d4bda8109166a209a47b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0596e308446d4bda8109166a209a47b5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long[] fib4 = new
    long[n+1];\n        fib4[0] = 0;\n        fib4[1] = 0;\n        fib4[2] = 2;\n
    \       fib4[3] = 0;\n        for (int i = 4; i <= n; i++) {\n            fib4[i]
    = fib4[i-1] + fib4[i-2] + fib4[i-3] + fib4[i-4];\n        }\n        return fib4[n];\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Fib4((5L))
    == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n    Debug.Assert(Fib4((10L))
    == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Your code goes
    here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5bcbe27f35047cebf391a4a0e08df48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5bcbe27f35047cebf391a4a0e08df48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // TODO: Implement
    this function.\n        return 0;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) ==
    (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <be89684ffc13421981c62145c7ad6846>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        long
    f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n        long
    j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long
    o = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n        long
    s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n        long
    w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n        long
    aa = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n        long
    ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah = 0;\n        long
    ai = 0;\n        long aj = 0;\n        long ak = 0;\n        long al = 0;\n        long
    am = 0;\n        long an = 0;\n        long ao = 0;\n        long ap = 0;\n        long
    aq = 0;\n        long ar = 0;\n        long as = 0;\n        long at = 0;\n        long
    au = 0;\n        long av = 0;\n        long aw = 0;\n        long ax = 0;\n        long
    ay = 0;\n        long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long
    bc = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n        long
    bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj = 0;\n        long
    bk = 0;\n        long bl = 0;\n        long bm = 0;\n        long bn = 0;\n        long
    bo = 0;\n        long bp = 0;\n        long bq = 0;\n        long br = 0;\n        long
    bs = 0;\n        long b\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2dyn4y6u.cs(66,14): error CS1001: Identifier expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1002: ; expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp2dyn4y6u.cs(66,17): error CS1031: Type expected

    /tmp/tmp2dyn4y6u.cs(93,15): error CS1002: ; expected

    '
  timestamp: 1659797369
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        // Your code goes
    here.\n        return 0;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5bcbe27f35047cebf391a4a0e08df48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a5bcbe27f35047cebf391a4a0e08df48>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n < 0) {\n            throw
    new ArgumentException(\"n must be non-negative\");\n        }\n        if (n ==
    0) {\n            return 0;\n        }\n        if (n == 1) {\n            return
    0;\n        }\n        if (n == 2) {\n            return 2;\n        }\n        if
    (n == 3) {\n            return 0;\n        }\n        long[] f = new long[n +
    1];\n        f[0] = 0;\n        f[1] = 0;\n        f[2] = 2;\n        f[3] = 0;\n
    \       for (int i = 4; i <= n; i++) {\n            f[i] = f[i - 1] + f[i - 2]
    + f[i - 3] + f[i - 4];\n        }\n        return f[n];\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797372
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        if (n == 0) return
    0;\n        if (n == 1) return 0;\n        if (n == 2) return 2;\n        if (n
    == 3) return 0;\n        long a = 0;\n        long b = 0;\n        long c = 2;\n
    \       long d = 0;\n        long e = 0;\n        for (long i = 4; i <= n; i++)
    {\n            e = a + b + c + d;\n            a = b;\n            b = c;\n            c
    = d;\n            d = e;\n        }\n        return e;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L))
    == (28L));\n    Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L))
    == (386L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659797370
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // The Fib4 number sequence is a sequence similar to the Fibbonacci
    sequnece that's defined as follows:\n    // fib4(0) -> 0\n    // fib4(1) -> 0\n
    \   // fib4(2) -> 2\n    // fib4(3) -> 0\n    // fib4(n) -> fib4(n-1) + fib4(n-2)
    + fib4(n-3) + fib4(n-4).\n    // Please write a function to efficiently compute
    the n-th element of the fib4 number sequence.  Do not use recursion.\n    // >>>
    Fib4((5L))\n    // (4L)\n    // >>> Fib4((6L))\n    // (8L)\n    // >>> Fib4((7L))\n
    \   // (14L)\n    public static long Fib4(long n) {\n        long a = 0;\n        long
    b = 0;\n        long c = 2;\n        long d = 0;\n        long e = 0;\n        long
    f = 0;\n        long g = 0;\n        long h = 0;\n        long i = 0;\n        long
    j = 0;\n        long k = 0;\n        long l = 0;\n        long m = 0;\n        long
    o = 0;\n        long p = 0;\n        long q = 0;\n        long r = 0;\n        long
    s = 0;\n        long t = 0;\n        long u = 0;\n        long v = 0;\n        long
    w = 0;\n        long x = 0;\n        long y = 0;\n        long z = 0;\n        long
    aa = 0;\n        long ab = 0;\n        long ac = 0;\n        long ad = 0;\n        long
    ae = 0;\n        long af = 0;\n        long ag = 0;\n        long ah = 0;\n        long
    ai = 0;\n        long aj = 0;\n        long ak = 0;\n        long al = 0;\n        long
    am = 0;\n        long an = 0;\n        long ao = 0;\n        long ap = 0;\n        long
    aq = 0;\n        long ar = 0;\n        long as = 0;\n        long at = 0;\n        long
    au = 0;\n        long av = 0;\n        long aw = 0;\n        long ax = 0;\n        long
    ay = 0;\n        long az = 0;\n        long ba = 0;\n        long bb = 0;\n        long
    bc = 0;\n        long bd = 0;\n        long be = 0;\n        long bf = 0;\n        long
    bg = 0;\n        long bh = 0;\n        long bi = 0;\n        long bj = 0;\n        long
    bk = 0;\n        long bl = 0;\n        long bm = 0;\n        long bn = 0;\n        long
    bo = 0;\n        long bp = 0;\n        long bq = 0;\n        long br = 0;\n        long
    bs = 0;\n        long b\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(Fib4((5L)) == (4L));\n    Debug.Assert(Fib4((8L)) == (28L));\n
    \   Debug.Assert(Fib4((10L)) == (104L));\n    Debug.Assert(Fib4((12L)) == (386L));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2dyn4y6u.cs(66,14): error CS1001: Identifier expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1002: ; expected

    /tmp/tmp2dyn4y6u.cs(66,14): error CS1525: Invalid expression term ''as''

    /tmp/tmp2dyn4y6u.cs(66,17): error CS1031: Type expected

    /tmp/tmp2dyn4y6u.cs(93,15): error CS1002: ; expected

    '
  timestamp: 1659797369
