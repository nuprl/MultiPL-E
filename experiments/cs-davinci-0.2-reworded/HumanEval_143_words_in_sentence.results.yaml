language: cs
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        // To print results to the standard\
    \ output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        var words = sentence.Split(' ');\n        var result\
    \ = new List<string>();\n        foreach (var word in words) {\n            if\
    \ (IsPrime(word.Length)) {\n                result.Add(word);\n            }\n\
    \        }\n        return string.Join(\" \", result);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk50qlmbs.cs(30,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", result);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvev4dk1i.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", result);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvev4dk1i.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var primes = new List<int>();\n\
    \        for (int i = 2; i < 100; i++) {\n            bool isPrime = true;\n \
    \           for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                primes.Add(i);\n\
    \            }\n        }\n        var result = new List<string>();\n        foreach\
    \ (var word in words) {\n            if (primes.Contains(word.Length)) {\n   \
    \             result.Add(word);\n            }\n        }\n        return string.Join(\"\
    \ \", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here.\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <81d8dafc78e44f27b1eee3f321a2f1fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <81d8dafc78e44f27b1eee3f321a2f1fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var primes = new List<int>();\n\
    \        for (int i = 0; i < words.Length; i++) {\n            if (IsPrime(words[i].Length))\
    \ {\n                primes.Add(i);\n            }\n        }\n        var sb\
    \ = new StringBuilder();\n        for (int i = 0; i < primes.Count; i++) {\n \
    \           sb.Append(words[primes[i]]);\n            if (i != primes.Count -\
    \ 1) {\n                sb.Append(' ');\n            }\n        }\n        return\
    \ sb.ToString();\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplnyhh84p.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        string[] words = sentence.Split(' ');\n\
    \        string result = \"\";\n        foreach (string word in words) {\n   \
    \         if (IsPrime(word.Length)) {\n                result += word + \" \"\
    ;\n            }\n        }\n        return result.Trim();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfh9kccab.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0000b] in <344ea9fe7c354336b0573f7d1e910622>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0000b] in <344ea9fe7c354336b0573f7d1e910622>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var primes = new List<int>();\n\
    \        for (int i = 2; i < words.Length; i++) {\n            bool isPrime =\
    \ true;\n            for (int j = 2; j < i; j++) {\n                if (i % j\
    \ == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  primes.Add(i);\n            }\n        }\n        var result = new List<string>();\n\
    \        foreach (var prime in primes) {\n            result.Add(words[prime]);\n\
    \        }\n        return string.Join(\" \", result);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8882df711567439184674bfccbf65402>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8882df711567439184674bfccbf65402>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var primes = new List<int>();\n\
    \        for (int i = 2; i < words.Length; i++) {\n            if (IsPrime(i))\
    \ {\n                primes.Add(i);\n            }\n        }\n        var result\
    \ = new List<string>();\n        foreach (var word in words) {\n            if\
    \ (primes.Contains(word.Length)) {\n                result.Add(word);\n      \
    \      }\n        }\n        return string.Join(\" \", result);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgrqfv10g.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0000b] in <cf333f9ecdfa4e9ba1dace3150ed105d>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0000b] in <cf333f9ecdfa4e9ba1dace3150ed105d>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", result);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvev4dk1i.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // TODO: Implement this function\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ec1af851590e43f08bd4fd99ab7fd577>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ec1af851590e43f08bd4fd99ab7fd577>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", result);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvev4dk1i.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code here\n        return \"\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5bdd2a8f965547e5b9340c884a6dce65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5bdd2a8f965547e5b9340c884a6dce65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        List<string> result =\
    \ new List<string>();\n        foreach (string word in words) {\n            if\
    \ (IsPrime(word.Length)) {\n                result.Add(word);\n            }\n\
    \        }\n        return string.Join(\" \", result);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpflgodoco.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var primes = new List<int>();\n\
    \        for (int i = 2; i < 100; i++) {\n            if (IsPrime(i)) {\n    \
    \            primes.Add(i);\n            }\n        }\n        var result = new\
    \ List<string>();\n        foreach (var word in words) {\n            if (primes.Contains(word.Length))\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", result);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi8ujy_b9.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // TODO: Implement your solution here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed43a82f8f8e40ecb1bcc1357be18b6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed43a82f8f8e40ecb1bcc1357be18b6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", result);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvev4dk1i.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        var words = sentence.Split(' ');\n  \
    \      var result = new List<string>();\n        foreach (var word in words) {\n\
    \            if (IsPrime(word.Length)) {\n                result.Add(word);\n\
    \            }\n        }\n        return string.Join(\" \", result);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc925__h1.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", result);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvev4dk1i.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // TODO: Implement this function\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ec1af851590e43f08bd4fd99ab7fd577>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ec1af851590e43f08bd4fd99ab7fd577>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        List<string> primes =\
    \ new List<string>();\n        foreach (string word in words) {\n            if\
    \ (IsPrime(word.Length)) {\n                primes.Add(word);\n            }\n\
    \        }\n        return string.Join(\" \", primes);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxhb3k17i.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0000b] in <cf333f9ecdfa4e9ba1dace3150ed105d>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0000b] in <cf333f9ecdfa4e9ba1dace3150ed105d>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        var words = sentence.Split(' ');\n \
    \       var result = new List<string>();\n        foreach (var word in words)\
    \ {\n            if (IsPrime(word.Length)) {\n                result.Add(word);\n\
    \            }\n        }\n        return string.Join(\" \", result);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1vhtbj78.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        string[] words = sentence.Split(' ');\n\
    \        string result = \"\";\n        for (int i = 0; i < words.Length; i++)\
    \ {\n            if (IsPrime(words[i].Length)) {\n                result += words[i]\
    \ + \" \";\n            }\n        }\n        return result.Trim();\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7c_o7wxq.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var sb = new StringBuilder();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                sb.Append(word);\n                sb.Append(' ');\n     \
    \       }\n        }\n        return sb.ToString().Trim();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7q49sbwo.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var primes = new List<int>();\n\
    \        for (int i = 2; i < words.Length; i++) {\n            bool isPrime =\
    \ true;\n            for (int j = 2; j < i; j++) {\n                if (i % j\
    \ == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  primes.Add(i);\n            }\n        }\n        var res = new List<string>();\n\
    \        foreach (var prime in primes) {\n            res.Add(words[prime]);\n\
    \        }\n        return string.Join(\" \", res);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9050646b19234dabb3faefe58b22aba2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9050646b19234dabb3faefe58b22aba2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        string[] words = sentence.Split(' ');\n\
    \        string result = \"\";\n        foreach (string word in words) {\n   \
    \         if (IsPrime(word.Length)) {\n                result += word + \" \"\
    ;\n            }\n        }\n        return result.Trim();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2kt1h1su.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        string[] words = sentence.Split(' ');\n\
    \        string result = \"\";\n        foreach (string word in words) {\n   \
    \         if (IsPrime(word.Length)) {\n                result += word + \" \"\
    ;\n            }\n        }\n        return result.Trim();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2kt1h1su.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", result);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvev4dk1i.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", result);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvev4dk1i.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // TODO: Implement your solution here\n        string[] words = sentence.Split('\
    \ ');\n        string result = \"\";\n        for (int i = 0; i < words.Length;\
    \ i++) {\n            if (IsPrime(words[i].Length)) {\n                result\
    \ += words[i] + \" \";\n            }\n        }\n        return result.Trim();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq3sqp1ux.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var sb = new StringBuilder();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                sb.Append(word);\n                sb.Append(' ');\n     \
    \       }\n        }\n        return sb.ToString().Trim();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7q49sbwo.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        for (int i = 0; i < words.Length; i++) {\n            if (IsPrime(words[i].Length))\
    \ {\n                result += words[i] + \" \";\n            }\n        }\n \
    \       return result.Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf0yidwh3.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // TODO: Implement your solution here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed43a82f8f8e40ecb1bcc1357be18b6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed43a82f8f8e40ecb1bcc1357be18b6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var primes = new List<int>();\n\
    \        for (int i = 2; i < 100; i++) {\n            bool isPrime = true;\n \
    \           for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                primes.Add(i);\n\
    \            }\n        }\n        var result = new List<string>();\n        foreach\
    \ (var word in words) {\n            if (primes.Contains(word.Length)) {\n   \
    \             result.Add(word);\n            }\n        }\n        return string.Join(\"\
    \ \", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code here\n        return \"\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5bdd2a8f965547e5b9340c884a6dce65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5bdd2a8f965547e5b9340c884a6dce65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // TODO: Implement this function\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ec1af851590e43f08bd4fd99ab7fd577>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ec1af851590e43f08bd4fd99ab7fd577>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        return \"\";\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n  \
    \  Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3bc4dca43965429982aa3d2091187d85>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3bc4dca43965429982aa3d2091187d85>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        string[] words = sentence.Split(' ');\n\
    \        string result = \"\";\n        for (int i = 0; i < words.Length; i++)\
    \ {\n            if (IsPrime(words[i].Length)) {\n                result += words[i]\
    \ + \" \";\n            }\n        }\n        return result.Trim();\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7c_o7wxq.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", result);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvev4dk1i.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // TODO: Implement this function\n        return \"\";\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ec1af851590e43f08bd4fd99ab7fd577>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ec1af851590e43f08bd4fd99ab7fd577>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var primes = new List<int>();\n\
    \        var sb = new StringBuilder();\n        foreach (var word in words) {\n\
    \            if (IsPrime(word.Length)) {\n                primes.Add(word.Length);\n\
    \                sb.Append(word + \" \");\n            }\n        }\n        return\
    \ sb.ToString().Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvh_dnwku.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", result);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvev4dk1i.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // TODO: Implement your solution here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed43a82f8f8e40ecb1bcc1357be18b6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed43a82f8f8e40ecb1bcc1357be18b6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var res = new List<string>();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                res.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", res);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5yjzg1ee.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", result);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvev4dk1i.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // TODO: Implement your solution here\n        return \"\";\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed43a82f8f8e40ecb1bcc1357be18b6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed43a82f8f8e40ecb1bcc1357be18b6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        for (int i = 0; i < words.Length; i++) {\n            if (IsPrime(words[i].Length))\
    \ {\n                result += words[i] + \" \";\n            }\n        }\n \
    \       return result.Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf0yidwh3.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        List<string> result =\
    \ new List<string>();\n        foreach (string word in words) {\n            if\
    \ (IsPrime(word.Length)) {\n                result.Add(word);\n            }\n\
    \        }\n        return string.Join(\" \", result);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpflgodoco.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        var words = sentence.Split(' ');\n \
    \       var result = new List<string>();\n        foreach (var word in words)\
    \ {\n            if (IsPrime(word.Length)) {\n                result.Add(word);\n\
    \            }\n        }\n        return string.Join(\" \", result);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1vhtbj78.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // your code here\n        return \"\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cfce432a52ae40b68d0893aea4ddbadd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cfce432a52ae40b68d0893aea4ddbadd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", result);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvev4dk1i.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var primes = new List<int>();\n\
    \        for (int i = 2; i < 100; i++) {\n            bool isPrime = true;\n \
    \           for (int j = 2; j < i; j++) {\n                if (i % j == 0) {\n\
    \                    isPrime = false;\n                    break;\n          \
    \      }\n            }\n            if (isPrime) {\n                primes.Add(i);\n\
    \            }\n        }\n        var result = new List<string>();\n        foreach\
    \ (var word in words) {\n            if (primes.Contains(word.Length)) {\n   \
    \             result.Add(word);\n            }\n        }\n        return string.Join(\"\
    \ \", result);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // your code here\n        return \"\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cfce432a52ae40b68d0893aea4ddbadd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cfce432a52ae40b68d0893aea4ddbadd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", result);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvev4dk1i.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        for (int i = 0; i < words.Length; i++) {\n            if (IsPrime(words[i].Length))\
    \ {\n                result += words[i] + \" \";\n            }\n        }\n \
    \       return result.Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf0yidwh3.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // your code here\n        return \"\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cfce432a52ae40b68d0893aea4ddbadd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cfce432a52ae40b68d0893aea4ddbadd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        return string.Join(\" \", sentence.Split(' ').Where(w => IsPrime(w.Length)));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"\
    This is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets\
    \ go for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2v2q0tth.cs(24,64): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5g5017im.cs(23,26): error CS0161: ''Problem.WordsInSentence(string)'':
    not all code paths return a value

    '
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // your code here\n        return \"\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cfce432a52ae40b68d0893aea4ddbadd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cfce432a52ae40b68d0893aea4ddbadd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", result);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvev4dk1i.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here.\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <81d8dafc78e44f27b1eee3f321a2f1fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <81d8dafc78e44f27b1eee3f321a2f1fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var primes = new List<int>();\n\
    \        var sb = new StringBuilder();\n        foreach (var word in words) {\n\
    \            if (IsPrime(word.Length)) {\n                primes.Add(word.Length);\n\
    \                sb.Append(word);\n                sb.Append(' ');\n         \
    \   }\n        }\n        return sb.ToString().Trim();\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv6hxwt_h.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        // To print results to the standard\
    \ output you can use Console.WriteLine()\n        // Example: Console.WriteLine(\"\
    Hello world!\");\n        string[] words = sentence.Split(' ');\n        string\
    \ result = \"\";\n        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2vtmixy0.cs(30,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", result);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvev4dk1i.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0000b] in <344ea9fe7c354336b0573f7d1e910622>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0000b] in <344ea9fe7c354336b0573f7d1e910622>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", result);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvev4dk1i.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // your code here\n        return \"\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cfce432a52ae40b68d0893aea4ddbadd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cfce432a52ae40b68d0893aea4ddbadd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var primes = new List<int>();\n\
    \        for (int i = 2; i < words.Length; i++) {\n            bool isPrime =\
    \ true;\n            for (int j = 2; j < i; j++) {\n                if (i % j\
    \ == 0) {\n                    isPrime = false;\n                    break;\n\
    \                }\n            }\n            if (isPrime) {\n              \
    \  primes.Add(i);\n            }\n        }\n        var result = new List<string>();\n\
    \        foreach (var prime in primes) {\n            result.Add(words[prime]);\n\
    \        }\n        return string.Join(\" \", result);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8882df711567439184674bfccbf65402>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8882df711567439184674bfccbf65402>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // your code here\n        return \"\";\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cfce432a52ae40b68d0893aea4ddbadd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cfce432a52ae40b68d0893aea4ddbadd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        string[] words = sentence.Split(' ');\n\
    \        string result = \"\";\n        foreach (string word in words) {\n   \
    \         if (IsPrime(word.Length)) {\n                result += word + \" \"\
    ;\n            }\n        }\n        return result.Trim();\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2kt1h1su.cs(28,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var primes = new List<int>();\n\
    \        for (int i = 2; i < words.Length; i++) {\n            if (IsPrime(i))\
    \ {\n                primes.Add(i);\n            }\n        }\n        var result\
    \ = new List<string>();\n        foreach (var word in words) {\n            if\
    \ (primes.Contains(word.Length)) {\n                result.Add(word);\n      \
    \      }\n        }\n        return string.Join(\" \", result);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This\
    \ is a test\")).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go\
    \ for swimming\")).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"\
    there is no place available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgrqfv10g.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // TODO: Implement this function\n        //throw new NotImplementedException();\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words)\n        {\n            if (IsPrime(word.Length))\n\
    \            {\n                result += word + \" \";\n            }\n     \
    \   }\n        return result.Trim();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\"\
    )));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"\
    go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place available\
    \ here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqp5e1pkb.cs(30,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        for (int i = 0; i < words.Length; i++) {\n            if (IsPrime(words[i].Length))\
    \ {\n                result += words[i] + \" \";\n            }\n        }\n \
    \       return result.Trim();\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf0yidwh3.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x0000b] in <344ea9fe7c354336b0573f7d1e910622>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x0000b] in <344ea9fe7c354336b0573f7d1e910622>:0\
    \ \n"
  stdout: ''
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        var words = sentence.Split(' ');\n        var primes = new List<int>();\n\
    \        for (int i = 2; i < 100; i++) {\n            if (IsPrime(i)) {\n    \
    \            primes.Add(i);\n            }\n        }\n        var result = new\
    \ List<string>();\n        foreach (var word in words) {\n            if (primes.Contains(word.Length))\
    \ {\n                result.Add(word);\n            }\n        }\n        return\
    \ string.Join(\" \", result);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n\
    \    Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi8ujy_b9.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        string result = \"\";\n\
    \        foreach (string word in words) {\n            if (IsPrime(word.Length))\
    \ {\n                result += word + \" \";\n            }\n        }\n     \
    \   return result.Trim();\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(WordsInSentence((\"This is a test\")).Equals((\"is\")));\n \
    \   Debug.Assert(WordsInSentence((\"lets go for swimming\")).Equals((\"go for\"\
    )));\n    Debug.Assert(WordsInSentence((\"there is no place available here\")).Equals((\"\
    there is no place\")));\n    Debug.Assert(WordsInSentence((\"Hi I am Hussein\"\
    )).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"go for it\"\
    )).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"here\")).Equals((\"\
    \")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"is\")));\n \
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu3tqflbe.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        List<string> result =\
    \ new List<string>();\n        foreach (string word in words) {\n            if\
    \ (IsPrime(word.Length)) {\n                result.Add(word);\n            }\n\
    \        }\n        return string.Join(\" \", result);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpflgodoco.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        string[] words = sentence.Split(' ');\n        List<string> result =\
    \ new List<string>();\n        foreach (string word in words) {\n            if\
    \ (IsPrime(word.Length)) {\n                result.Add(word);\n            }\n\
    \        }\n        return string.Join(\" \", result);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpflgodoco.cs(27,17): error CS0103: The name ''IsPrime'' does not exist
    in the current context

    '
  timestamp: 1659793768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Write your code here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3e2d4af384914f2ab4586289b9dd1d8b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a string representing a sentence,\n    //\
    \ the sentence contains some words separated by a space,\n    // and you have\
    \ to return a string that contains the words from the original sentence,\n   \
    \ // whose lengths are prime numbers,\n    // the order of the words in the new\
    \ string should be the same as the original one.\n    // Example 1:\n    // >>>\
    \ WordsInSentence((\"This is a test\"))\n    // (\"is\")\n    // Example 2:\n\
    \    // >>> WordsInSentence((\"lets go for swimming\"))\n    // (\"go for\")\n\
    \    // Constraints:\n    // * 1 <= len(sentence) <= 100\n    // * sentence contains\
    \ only letters\n    public static string WordsInSentence(string sentence) {\n\
    \        // Your code goes here\n        return \"\";\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(WordsInSentence((\"This is a test\"\
    )).Equals((\"is\")));\n    Debug.Assert(WordsInSentence((\"lets go for swimming\"\
    )).Equals((\"go for\")));\n    Debug.Assert(WordsInSentence((\"there is no place\
    \ available here\")).Equals((\"there is no place\")));\n    Debug.Assert(WordsInSentence((\"\
    Hi I am Hussein\")).Equals((\"Hi am Hussein\")));\n    Debug.Assert(WordsInSentence((\"\
    go for it\")).Equals((\"go for it\")));\n    Debug.Assert(WordsInSentence((\"\
    here\")).Equals((\"\")));\n    Debug.Assert(WordsInSentence((\"here is\")).Equals((\"\
    is\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7161b7a1987b4b309751f253e14b085a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793769
