name: HumanEval_153_Strongest_Extension
language: rs
prompt: "/// You will be given the name of a class (a string) and a list of extensions.\n\
  /// The extensions are to be used to load additional classes to the class. The\n\
  /// strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  /// letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n/// in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n/// You should find the strongest extension and return a string in this \n///\
  \ format: ClassName.StrongestExtensionName.\n/// If there are two or more extensions\
  \ with the same strength, you should\n/// choose the one that comes first in the\
  \ list.\n/// For example, if you are given \"Slices\" as the class and a list of\
  \ the\n/// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
  /// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n/// (its strength is -1).\n/// Example:\n/// >>> Strongest_Extension(String::from(\"\
  my_class\"), vec![String::from(\"AA\"), String::from(\"Be\"), String::from(\"CC\"\
  )])\n/// String::from(\"my_class.AA\")\nfn Strongest_Extension(class_name: String,\
  \ extensions: Vec<String>) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = Strongest_Extension;\n    assert_eq!(candidate(String::from(\"\
  Watashi\"), vec![String::from(\"tEN\"), String::from(\"niNE\"), String::from(\"\
  eIGHt8OKe\")]), String::from(\"Watashi.eIGHt8OKe\"));\n    assert_eq!(candidate(String::from(\"\
  Boku123\"), vec![String::from(\"nani\"), String::from(\"NazeDa\"), String::from(\"\
  YEs.WeCaNe\"), String::from(\"32145tggg\")]), String::from(\"Boku123.YEs.WeCaNe\"\
  ));\n    assert_eq!(candidate(String::from(\"__YESIMHERE\"), vec![String::from(\"\
  t\"), String::from(\"eMptY\"), String::from(\"nothing\"), String::from(\"zeR00\"\
  ), String::from(\"NuLl__\"), String::from(\"123NoooneB321\")]), String::from(\"\
  __YESIMHERE.NuLl__\"));\n    assert_eq!(candidate(String::from(\"K\"), vec![String::from(\"\
  Ta\"), String::from(\"TAR\"), String::from(\"t234An\"), String::from(\"cosSo\")]),\
  \ String::from(\"K.TAR\"));\n    assert_eq!(candidate(String::from(\"__HAHA\"),\
  \ vec![String::from(\"Tab\"), String::from(\"123\"), String::from(\"781345\"), String::from(\"\
  -_-\")]), String::from(\"__HAHA.123\"));\n    assert_eq!(candidate(String::from(\"\
  YameRore\"), vec![String::from(\"HhAas\"), String::from(\"okIWILL123\"), String::from(\"\
  WorkOut\"), String::from(\"Fails\"), String::from(\"-_-\")]), String::from(\"YameRore.okIWILL123\"\
  ));\n    assert_eq!(candidate(String::from(\"finNNalLLly\"), vec![String::from(\"\
  Die\"), String::from(\"NowW\"), String::from(\"Wow\"), String::from(\"WoW\")]),\
  \ String::from(\"finNNalLLly.WoW\"));\n    assert_eq!(candidate(String::from(\"\
  _\"), vec![String::from(\"Bb\"), String::from(\"91245\")]), String::from(\"_.Bb\"\
  ));\n    assert_eq!(candidate(String::from(\"Sp\"), vec![String::from(\"671235\"\
  ), String::from(\"Bb\")]), String::from(\"Sp.671235\"));\n}\n"
completions: ["    let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    return format!(\"\
    {}.{}\", class_name, strongest_extension);", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let strength = extension.chars().fold((0, 0), |(cap, sm),\
    \ c| {\n            if c.is_uppercase() {\n                (cap + 1, sm)\n   \
    \         } else {\n                (cap, sm + 1)\n            }\n        });\n\
    \        if strength.0 - strength.1 > strongest_strength {\n            strongest_strength\
    \ = strength.0 - strength.1;\n            strongest_extension = extension;\n \
    \       }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", " \
    \   let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = (cap as f64) - (sm as f64);\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = (cap as f64) - (sm as f64);\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0.0;\n    for extension in extensions {\n  \
    \      let mut cap = 0;\n        let mut sm = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        let strength\
    \ = (cap as f64) - (sm as f64);\n        if strength > strongest_strength {\n\
    \            strongest_strength = strength;\n            strongest_extension =\
    \ extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = (cap as f64) - (sm as f64);\n\
    \        if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    return format!(\"\
    {}.{}\", class_name, strongest_extension);", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap - sm;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = (cap as f64) - (sm as f64);\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = (cap as f64) - (sm as f64);\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_extension_strength = 0;\n    for extension in extensions\
    \ {\n        let mut caps = 0;\n        let mut smalls = 0;\n        for c in\
    \ extension.chars() {\n            if c.is_uppercase() {\n                caps\
    \ += 1;\n            } else {\n                smalls += 1;\n            }\n \
    \       }\n        let strength = caps - smalls;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension_name = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension_name = extension;\n        }\n\
    \    }\n    return format!(\"{}.{}\", class_name, strongest_extension_name);",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut upper_case_count\
    \ = 0;\n        let mut lower_case_count = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                upper_case_count += 1;\n\
    \            } else if c.is_lowercase() {\n                lower_case_count +=\
    \ 1;\n            }\n        }\n        let strength = upper_case_count as f64\
    \ - lower_case_count as f64;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = (cap as f64) - (sm as f64);\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return format!(\"{}.{}\", class_name, strongest_extension);", "    let mut\
    \ strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut upper_case_count\
    \ = 0;\n        let mut lower_case_count = 0;\n        for character in extension.chars()\
    \ {\n            if character.is_uppercase() {\n                upper_case_count\
    \ += 1;\n            } else if character.is_lowercase() {\n                lower_case_count\
    \ += 1;\n            }\n        }\n        let extension_strength = upper_case_count\
    \ as f64 - lower_case_count as f64;\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return format!(\"\
    {}.{}\", class_name, strongest_extension);", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let extension_strength = extension.chars().fold((0,\
    \ 0), |acc, c| {\n            if c.is_uppercase() {\n                (acc.0 +\
    \ 1, acc.1)\n            } else {\n                (acc.0, acc.1 + 1)\n      \
    \      }\n        });\n        let extension_strength = extension_strength.0 as\
    \ f64 - extension_strength.1 as f64;\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_extension_strength = 0.0;\n    for extension in extensions\
    \ {\n        let mut cap = 0;\n        let mut sm = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        let strength\
    \ = cap as f64 - sm as f64;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = (cap as f64) - (sm as f64);\n\
    \        if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0;\n    for extension in extensions {\n    \
    \    let strength = extension.chars().fold((0, 0), |(cap, sm), c| {\n        \
    \    if c.is_uppercase() {\n                (cap + 1, sm)\n            } else\
    \ {\n                (cap, sm + 1)\n            }\n        });\n        if strength.0\
    \ - strength.1 > strongest_strength {\n            strongest_strength = strength.0\
    \ - strength.1;\n            strongest_extension = extension;\n        }\n   \
    \ }\n    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0.0;\n    for extension in extensions {\n  \
    \      let mut cap = 0;\n        let mut sm = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        let strength\
    \ = cap as f64 - sm as f64;\n        if strength > strongest_strength {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return format!(\"{}.{}\", class_name, strongest_extension);",
  "    let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = (cap as f64) - (sm as f64);\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_extension_strength = 0.0;\n    for extension in extensions\
    \ {\n        let mut upper_case_count = 0;\n        let mut lower_case_count =\
    \ 0;\n        for c in extension.chars() {\n            if c.is_uppercase() {\n\
    \                upper_case_count += 1;\n            } else if c.is_lowercase()\
    \ {\n                lower_case_count += 1;\n            }\n        }\n      \
    \  let extension_strength = (upper_case_count as f64) - (lower_case_count as f64);\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", "    let\
    \ mut strongest_extension = String::new();\n    let mut strongest_strength = 0.0;\n\
    \    for extension in extensions {\n        let mut strength = 0.0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  strength += 1.0;\n            } else {\n                strength -= 1.0;\n\
    \            }\n        }\n        if strength > strongest_strength {\n      \
    \      strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    return format!(\"{}.{}\", class_name, strongest_extension);",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut strength = 0.0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                strength += 1.0;\n   \
    \         } else {\n                strength -= 1.0;\n            }\n        }\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_extension_strength = 0.0;\n    for extension in extensions\
    \ {\n        let mut cap = 0;\n        let mut sm = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        let strength\
    \ = cap as f64 - sm as f64;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0;\n    for extension in extensions {\n    \
    \    let mut strength = 0;\n        for c in extension.chars() {\n           \
    \ if c.is_uppercase() {\n                strength += 1;\n            } else {\n\
    \                strength -= 1;\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    return format!(\"\
    {}.{}\", class_name, strongest_extension);", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let strength = extension.chars().filter(|c| c.is_uppercase()).count()\
    \ as f64 - extension.chars().filter(|c| c.is_lowercase()).count() as f64;\n  \
    \      if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut upper_case_count = 0;\n        let mut lower_case_count\
    \ = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                upper_case_count += 1;\n            } else if c.is_lowercase()\
    \ {\n                lower_case_count += 1;\n            }\n        }\n      \
    \  let strength = (upper_case_count as f64) - (lower_case_count as f64);\n   \
    \     if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap - sm;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap - sm;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = (cap as f64) - (sm as f64);\n\
    \        if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = (cap as f64) - (sm as f64);\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    return format!(\"\
    {}.{}\", class_name, strongest_extension);", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut capital_letters = 0;\n        let mut small_letters\
    \ = 0;\n        for letter in extension.chars() {\n            if letter.is_uppercase()\
    \ {\n                capital_letters += 1;\n            } else {\n           \
    \     small_letters += 1;\n            }\n        }\n        let strength = (capital_letters\
    \ as f64) - (small_letters as f64);\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest = \"\".to_string();\n\
    \    let mut strength = 0;\n    for extension in extensions {\n        let mut\
    \ cap = 0;\n        let mut sm = 0;\n        for c in extension.chars() {\n  \
    \          if c.is_uppercase() {\n                cap += 1;\n            } else\
    \ {\n                sm += 1;\n            }\n        }\n        if cap - sm >\
    \ strength {\n            strength = cap - sm;\n            strongest = extension;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, strongest)", "    let mut\
    \ strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension_name\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension_name = extension;\n        }\n  \
    \  }\n    format!(\"{}.{}\", class_name, strongest_extension_name)", "    let\
    \ mut strongest = 0;\n    let mut strongest_extension = String::new();\n    for\
    \ extension in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n\
    \        for c in extension.chars() {\n            if c.is_uppercase() {\n   \
    \             cap += 1;\n            } else {\n                sm += 1;\n    \
    \        }\n        }\n        let strength = cap - sm;\n        if strength >\
    \ strongest {\n            strongest = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut uppercase_count = 0;\n        let mut lowercase_count\
    \ = 0;\n        for character in extension.chars() {\n            if character.is_uppercase()\
    \ {\n                uppercase_count += 1;\n            } else if character.is_lowercase()\
    \ {\n                lowercase_count += 1;\n            }\n        }\n       \
    \ let strength = (uppercase_count as f64) - (lowercase_count as f64);\n      \
    \  if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0;\n    for extension in extensions {\n    \
    \    let mut strength = 0;\n        for c in extension.chars() {\n           \
    \ if c.is_uppercase() {\n                strength += 1;\n            } else {\n\
    \                strength -= 1;\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_extension_strength = 0.0;\n    for extension in extensions\
    \ {\n        let mut cap = 0;\n        let mut sm = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        let strength\
    \ = cap as f64 - sm as f64;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let strength = extension.chars().fold((0,\
    \ 0), |(cap, sm), c| {\n            if c.is_uppercase() {\n                (cap\
    \ + 1, sm)\n            } else {\n                (cap, sm + 1)\n            }\n\
    \        });\n        if strength.0 - strength.1 > strongest_strength {\n    \
    \        strongest_strength = strength.0 - strength.1;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = \"\".to_string();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut uppercase_count =\
    \ 0;\n        let mut lowercase_count = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                uppercase_count += 1;\n\
    \            } else if c.is_lowercase() {\n                lowercase_count +=\
    \ 1;\n            }\n        }\n        let strength = uppercase_count as f64\
    \ - lowercase_count as f64;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut extension_strength\
    \ = 0.0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                extension_strength += 1.0;\n            } else if c.is_lowercase()\
    \ {\n                extension_strength -= 1.0;\n            }\n        }\n  \
    \      if extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", "    let\
    \ mut strongest_extension = String::new();\n    let mut strongest_strength = 0.0;\n\
    \    for extension in extensions {\n        let mut cap = 0;\n        let mut\
    \ sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = (cap as f64) - (sm as f64);\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = (cap as f64) - (sm as f64);\n        if\
    \ strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0.0;\n    for extension in extensions {\n  \
    \      let strength = extension.chars().filter(|c| c.is_uppercase()).count() as\
    \ f64 - extension.chars().filter(|c| c.is_lowercase()).count() as f64;\n     \
    \   if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut capital_letters = 0;\n        let mut small_letters\
    \ = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                capital_letters += 1;\n            } else {\n           \
    \     small_letters += 1;\n            }\n        }\n        let strength = capital_letters\
    \ as f64 - small_letters as f64;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0;\n    for extension in extensions {\n        let mut cap = 0;\n        let\
    \ mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap - sm;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = \"\".to_string();\n    let mut strongest_extension_strength = 0.0;\n    for\
    \ extension in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n\
    \        for c in extension.chars() {\n            if c.is_uppercase() {\n   \
    \             cap += 1;\n            } else {\n                sm += 1;\n    \
    \        }\n        }\n        let strength = cap as f64 - sm as f64;\n      \
    \  if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut strength = 0.0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                strength += 1.0;\n   \
    \         } else {\n                strength -= 1.0;\n            }\n        }\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut extension_strength = 0.0;\n        for character\
    \ in extension.chars() {\n            if character.is_uppercase() {\n        \
    \        extension_strength += 1.0;\n            } else {\n                extension_strength\
    \ -= 1.0;\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0.0;\n    for extension in extensions {\n  \
    \      let mut cap = 0;\n        let mut sm = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        let strength\
    \ = (cap as f64) - (sm as f64);\n        if strength > strongest_strength {\n\
    \            strongest_strength = strength;\n            strongest_extension =\
    \ extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let strength = extension.chars().filter(|c|\
    \ c.is_uppercase()).count() as f64 - extension.chars().filter(|c| c.is_lowercase()).count()\
    \ as f64;\n        if strength > strongest_strength {\n            strongest_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let strength = extension.chars().fold((0, 0), |acc, c|\
    \ {\n            if c.is_uppercase() {\n                (acc.0 + 1, acc.1)\n \
    \           } else {\n                (acc.0, acc.1 + 1)\n            }\n    \
    \    });\n        let strength = strength.0 as f64 - strength.1 as f64;\n    \
    \    if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_extension_strength = 0.0;\n    for extension in extensions\
    \ {\n        let mut cap = 0;\n        let mut sm = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        let strength\
    \ = (cap as f64) - (sm as f64);\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let strength = extension.chars().filter(|c| c.is_uppercase()).count()\
    \ as f64 - extension.chars().filter(|c| c.is_lowercase()).count() as f64;\n  \
    \      if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = (cap as f64) - (sm as f64);\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    return format!(\"\
    {}.{}\", class_name, strongest_extension);", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let strength = extension.chars().fold((0, 0), |(caps,\
    \ smalls), c| {\n            if c.is_uppercase() {\n                (caps + 1,\
    \ smalls)\n            } else {\n                (caps, smalls + 1)\n        \
    \    }\n        });\n        if strength.0 - strength.1 > strongest_strength {\n\
    \            strongest_strength = strength.0 - strength.1;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut strength = 0.0;\n\
    \        for c in extension.chars() {\n            if c.is_uppercase() {\n   \
    \             strength += 1.0;\n            } else {\n                strength\
    \ -= 1.0;\n            }\n        }\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = \"\".to_string();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = (cap as f64) - (sm as f64);\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_extension_strength = 0.0;\n    for extension in extensions\
    \ {\n        let mut cap = 0;\n        let mut sm = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        let strength\
    \ = (cap as f64) - (sm as f64);\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut caps = 0;\n     \
    \   let mut smalls = 0;\n        for c in extension.chars() {\n            if\
    \ c.is_uppercase() {\n                caps += 1;\n            } else {\n     \
    \           smalls += 1;\n            }\n        }\n        let strength = caps\
    \ as f64 - smalls as f64;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let strength = extension.chars().filter(|c| c.is_uppercase()).count()\
    \ as f64 - extension.chars().filter(|c| c.is_lowercase()).count() as f64;\n  \
    \      if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = (cap as f64) - (sm as f64);\n        if\
    \ strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = (cap as f64) - (sm as f64);\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0.0;\n    for extension in extensions {\n  \
    \      let mut strength = 0.0;\n        for c in extension.chars() {\n       \
    \     if c.is_uppercase() {\n                strength += 1.0;\n            } else\
    \ {\n                strength -= 1.0;\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_extension_strength = 0.0;\n    for extension in extensions\
    \ {\n        let mut cap = 0;\n        let mut sm = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        let strength\
    \ = cap as f64 - sm as f64;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut caps = 0;\n     \
    \   let mut smalls = 0;\n        for c in extension.chars() {\n            if\
    \ c.is_uppercase() {\n                caps += 1;\n            } else {\n     \
    \           smalls += 1;\n            }\n        }\n        let strength = caps\
    \ as f64 - smalls as f64;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut upper_case_count\
    \ = 0;\n        let mut lower_case_count = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                upper_case_count += 1;\n\
    \            } else if c.is_lowercase() {\n                lower_case_count +=\
    \ 1;\n            }\n        }\n        let strength = (upper_case_count as f64)\
    \ - (lower_case_count as f64);\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension_name = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension_name = extension;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, strongest_extension_name)", "    let\
    \ mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let extension_strength = extension.chars().fold((0,\
    \ 0), |acc, c| {\n            if c.is_uppercase() {\n                (acc.0 +\
    \ 1, acc.1)\n            } else {\n                (acc.0, acc.1 + 1)\n      \
    \      }\n        });\n        let extension_strength = extension_strength.0 as\
    \ f64 - extension_strength.1 as f64;\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0;\n    for extension in extensions {\n    \
    \    let strength = extension.chars().fold((0, 0), |acc, c| {\n            if\
    \ c.is_uppercase() {\n                (acc.0 + 1, acc.1)\n            } else {\n\
    \                (acc.0, acc.1 + 1)\n            }\n        });\n        if strength.0\
    \ - strength.1 > strongest_strength {\n            strongest_strength = strength.0\
    \ - strength.1;\n            strongest_extension = extension;\n        }\n   \
    \ }\n    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let strength = extension.chars().filter(|c| c.is_uppercase()).count()\
    \ as f64 - extension.chars().filter(|c| c.is_lowercase()).count() as f64;\n  \
    \      if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut upper_case_count = 0;\n        let mut lower_case_count\
    \ = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                upper_case_count += 1;\n            } else if c.is_lowercase()\
    \ {\n                lower_case_count += 1;\n            }\n        }\n      \
    \  let strength = upper_case_count as f64 - lower_case_count as f64;\n       \
    \ if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = (cap as f64) - (sm as f64);\n        if\
    \ strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0;\n    for extension\
    \ in extensions {\n        let mut capital_letters = 0;\n        let mut small_letters\
    \ = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                capital_letters += 1;\n            } else {\n           \
    \     small_letters += 1;\n            }\n        }\n        let strength = capital_letters\
    \ - small_letters;\n        if strength > strongest_extension_strength {\n   \
    \         strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut uppercase_count =\
    \ 0;\n        let mut lowercase_count = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                uppercase_count += 1;\n\
    \            } else if c.is_lowercase() {\n                lowercase_count +=\
    \ 1;\n            }\n        }\n        let strength = uppercase_count as f64\
    \ - lowercase_count as f64;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let extension_strength =\
    \ extension.chars().filter(|c| c.is_uppercase()).count() as f64 - extension.chars().filter(|c|\
    \ c.is_lowercase()).count() as f64;\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_extension_strength = 0;\n    for extension in extensions\
    \ {\n        let mut cap = 0;\n        let mut sm = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        let strength\
    \ = cap - sm;\n        if strength > strongest_extension_strength {\n        \
    \    strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut upper_case_count\
    \ = 0;\n        let mut lower_case_count = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                upper_case_count += 1;\n\
    \            } else if c.is_lowercase() {\n                lower_case_count +=\
    \ 1;\n            }\n        }\n        let strength = (upper_case_count as f64)\
    \ - (lower_case_count as f64);\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut capital_letters = 0;\n        let mut small_letters\
    \ = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                capital_letters += 1;\n            } else {\n           \
    \     small_letters += 1;\n            }\n        }\n        let strength = capital_letters\
    \ as f64 - small_letters as f64;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0;\n    for extension in extensions {\n        let mut cap = 0;\n        let\
    \ mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap - sm;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut uppercase_letters = 0;\n        let mut lowercase_letters\
    \ = 0;\n        for letter in extension.chars() {\n            if letter.is_uppercase()\
    \ {\n                uppercase_letters += 1;\n            } else if letter.is_lowercase()\
    \ {\n                lowercase_letters += 1;\n            }\n        }\n     \
    \   let strength = uppercase_letters as f64 - lowercase_letters as f64;\n    \
    \    if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut extension_strength = 0.0;\n        for c in\
    \ extension.chars() {\n            if c.is_uppercase() {\n                extension_strength\
    \ += 1.0;\n            } else if c.is_lowercase() {\n                extension_strength\
    \ -= 1.0;\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    return format!(\"\
    {}.{}\", class_name, strongest_extension);", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut extension_strength = 0.0;\n        for c in\
    \ extension.chars() {\n            if c.is_uppercase() {\n                extension_strength\
    \ += 1.0;\n            } else if c.is_lowercase() {\n                extension_strength\
    \ -= 1.0;\n            }\n        }\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension_name = String::new();\n\
    \    let mut strongest_extension_strength = 0.0;\n    for extension in extensions\
    \ {\n        let mut uppercase_count = 0;\n        let mut lowercase_count = 0;\n\
    \        for c in extension.chars() {\n            if c.is_uppercase() {\n   \
    \             uppercase_count += 1;\n            } else if c.is_lowercase() {\n\
    \                lowercase_count += 1;\n            }\n        }\n        let\
    \ strength = uppercase_count as f64 - lowercase_count as f64;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension_name = extension;\n        }\n  \
    \  }\n    format!(\"{}.{}\", class_name, strongest_extension_name)", "    let\
    \ mut strongest_extension = String::new();\n    let mut strongest_strength = -1.0;\n\
    \    for extension in extensions {\n        let mut capital_letters = 0;\n   \
    \     let mut small_letters = 0;\n        for c in extension.chars() {\n     \
    \       if c.is_uppercase() {\n                capital_letters += 1;\n       \
    \     } else {\n                small_letters += 1;\n            }\n        }\n\
    \        let strength = (capital_letters as f64) - (small_letters as f64);\n \
    \       if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0.0;\n    for extension in extensions {\n  \
    \      let mut strength = 0.0;\n        for c in extension.chars() {\n       \
    \     if c.is_uppercase() {\n                strength += 1.0;\n            } else\
    \ {\n                strength -= 1.0;\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0.0;\n    for extension in extensions {\n  \
    \      let mut cap = 0;\n        let mut sm = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        let strength\
    \ = cap as f64 - sm as f64;\n        if strength > strongest_strength {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", " \
    \   let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let strength = extension.chars().filter(|c|\
    \ c.is_uppercase()).count() as f64 - extension.chars().filter(|c| c.is_lowercase()).count()\
    \ as f64;\n        if strength > strongest_strength {\n            strongest_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut strength = 0.0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                strength += 1.0;\n   \
    \         } else {\n                strength -= 1.0;\n            }\n        }\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0.0;\n    for extension in extensions {\n  \
    \      let mut upper_case_count = 0;\n        let mut lower_case_count = 0;\n\
    \        for character in extension.chars() {\n            if character.is_uppercase()\
    \ {\n                upper_case_count += 1;\n            } else if character.is_lowercase()\
    \ {\n                lower_case_count += 1;\n            }\n        }\n      \
    \  let strength = upper_case_count as f64 - lower_case_count as f64;\n       \
    \ if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut capital_letters = 0;\n        let mut small_letters\
    \ = 0;\n        for letter in extension.chars() {\n            if letter.is_uppercase()\
    \ {\n                capital_letters += 1;\n            } else {\n           \
    \     small_letters += 1;\n            }\n        }\n        let strength = capital_letters\
    \ as f64 - small_letters as f64;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut upper_case_count\
    \ = 0;\n        let mut lower_case_count = 0;\n        for character in extension.chars()\
    \ {\n            if character.is_uppercase() {\n                upper_case_count\
    \ += 1;\n            } else if character.is_lowercase() {\n                lower_case_count\
    \ += 1;\n            }\n        }\n        let strength = upper_case_count as\
    \ f64 - lower_case_count as f64;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0.0;\n    for extension in extensions {\n  \
    \      let mut strength = 0.0;\n        for c in extension.chars() {\n       \
    \     if c.is_uppercase() {\n                strength += 1.0;\n            } else\
    \ {\n                strength -= 1.0;\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0.0;\n    for extension in extensions {\n  \
    \      let mut strength = 0.0;\n        for c in extension.chars() {\n       \
    \     if c.is_uppercase() {\n                strength += 1.0;\n            } else\
    \ {\n                strength -= 1.0;\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0.0;\n    for extension in extensions {\n  \
    \      let mut cap = 0;\n        let mut sm = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        let strength\
    \ = cap as f64 - sm as f64;\n        if strength > strongest_strength {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", " \
    \   let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = (cap as f64) - (sm as f64);\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = (cap as f64) - (sm as f64);\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0.0;\n    for extension in extensions {\n  \
    \      let mut cap = 0;\n        let mut sm = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        let strength\
    \ = cap as f64 - sm as f64;\n        if strength > strongest_strength {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", " \
    \   let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_extension_strength = 0.0;\n    for extension in extensions\
    \ {\n        let mut cap = 0;\n        let mut sm = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        let strength\
    \ = (cap as f64) - (sm as f64);\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut caps = 0;\n     \
    \   let mut smalls = 0;\n        for c in extension.chars() {\n            if\
    \ c.is_uppercase() {\n                caps += 1;\n            } else {\n     \
    \           smalls += 1;\n            }\n        }\n        let strength = caps\
    \ as f64 - smalls as f64;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut caps = 0;\n     \
    \   let mut smalls = 0;\n        for c in extension.chars() {\n            if\
    \ c.is_uppercase() {\n                caps += 1;\n            } else {\n     \
    \           smalls += 1;\n            }\n        }\n        let strength = (caps\
    \ as f64) - (smalls as f64);\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = (cap as f64) - (sm as f64);\n\
    \        if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0;\n    for extension\
    \ in extensions {\n        let strength = extension.chars().filter(|c| c.is_uppercase()).count()\
    \ - extension.chars().filter(|c| c.is_lowercase()).count();\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = (cap as f64) - (sm as f64);\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0.0;\n    for extension in extensions {\n  \
    \      let mut strength = 0.0;\n        for c in extension.chars() {\n       \
    \     if c.is_uppercase() {\n                strength += 1.0;\n            } else\
    \ {\n                strength -= 1.0;\n            }\n        }\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_extension_strength = 0;\n    for extension in extensions\
    \ {\n        let mut cap = 0;\n        let mut sm = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        let strength\
    \ = cap - sm;\n        if strength > strongest_extension_strength {\n        \
    \    strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut uppercase_count = 0;\n        let mut lowercase_count\
    \ = 0;\n        for character in extension.chars() {\n            if character.is_uppercase()\
    \ {\n                uppercase_count += 1;\n            } else if character.is_lowercase()\
    \ {\n                lowercase_count += 1;\n            }\n        }\n       \
    \ let strength = uppercase_count as f64 - lowercase_count as f64;\n        if\
    \ strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0;\n    for extension\
    \ in extensions {\n        let mut uppercase_count = 0;\n        let mut lowercase_count\
    \ = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                uppercase_count += 1;\n            } else if c.is_lowercase()\
    \ {\n                lowercase_count += 1;\n            }\n        }\n       \
    \ let extension_strength = uppercase_count - lowercase_count;\n        if extension_strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ extension_strength;\n            strongest_extension = extension;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut\
    \ strongest_extension = String::new();\n    let mut strongest_strength = 0.0;\n\
    \    for extension in extensions {\n        let mut cap = 0;\n        let mut\
    \ sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = (cap as f64) - (sm as f64);\n        if\
    \ strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = (cap as f64) - (sm as f64);\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0.0;\n    for extension in extensions {\n  \
    \      let mut cap = 0;\n        let mut sm = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        let strength\
    \ = cap as f64 - sm as f64;\n        if strength > strongest_strength {\n    \
    \        strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", " \
    \   let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut upper_case_count = 0;\n        let mut lower_case_count\
    \ = 0;\n        for character in extension.chars() {\n            if character.is_uppercase()\
    \ {\n                upper_case_count += 1;\n            } else if character.is_lowercase()\
    \ {\n                lower_case_count += 1;\n            }\n        }\n      \
    \  let extension_strength = upper_case_count as f64 - lower_case_count as f64;\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    return format!(\"{}.{}\", class_name, strongest_extension);",
  "    let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = (cap as f64) - (sm as f64);\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0;\n    for extension in extensions {\n    \
    \    let strength = extension.chars().filter(|c| c.is_uppercase()).count() - extension.chars().filter(|c|\
    \ c.is_lowercase()).count();\n        if strength > strongest_strength {\n   \
    \         strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", " \
    \   let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut strength = 0.0;\n\
    \        for c in extension.chars() {\n            if c.is_ascii_uppercase() {\n\
    \                strength += 1.0;\n            } else if c.is_ascii_lowercase()\
    \ {\n                strength -= 1.0;\n            }\n        }\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest\
    \ = (0.0, String::from(\"\"));\n    for ext in extensions {\n        let mut cap\
    \ = 0;\n        let mut sm = 0;\n        for c in ext.chars() {\n            if\
    \ c.is_uppercase() {\n                cap += 1;\n            } else {\n      \
    \          sm += 1;\n            }\n        }\n        let strength = (cap as\
    \ f64) - (sm as f64);\n        if strength > strongest.0 {\n            strongest\
    \ = (strength, ext);\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest.1)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = cap - sm;\n        if strength > strongest_strength\
    \ {\n            strongest_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    return format!(\"{}.{}\", class_name, strongest_extension);",
  "    let mut strongest_extension_name = \"\".to_string();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension_name = extension;\n        }\n\
    \    }\n    format!(\"{}.{}\", class_name, strongest_extension_name)", "    let\
    \ mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0;\n    for extension in extensions {\n        let mut cap = 0;\n        let\
    \ mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap - sm;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap - sm;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut uppercase_letters = 0;\n        let mut lowercase_letters\
    \ = 0;\n        for letter in extension.chars() {\n            if letter.is_uppercase()\
    \ {\n                uppercase_letters += 1;\n            } else if letter.is_lowercase()\
    \ {\n                lowercase_letters += 1;\n            }\n        }\n     \
    \   let extension_strength = uppercase_letters as f64 - lowercase_letters as f64;\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", "    let\
    \ mut strongest_extension = String::new();\n    let mut strongest_strength = 0.0;\n\
    \    for extension in extensions {\n        let mut cap = 0;\n        let mut\
    \ sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_extension_strength = 0.0;\n    for extension in extensions\
    \ {\n        let mut upper_case_count = 0;\n        let mut lower_case_count =\
    \ 0;\n        for c in extension.chars() {\n            if c.is_uppercase() {\n\
    \                upper_case_count += 1;\n            } else if c.is_lowercase()\
    \ {\n                lower_case_count += 1;\n            }\n        }\n      \
    \  let strength = upper_case_count as f64 - lower_case_count as f64;\n       \
    \ if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0;\n    for extension in\
    \ extensions {\n        let strength = extension.chars().filter(|&c| c.is_uppercase()).count()\
    \ - extension.chars().filter(|&c| c.is_lowercase()).count();\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0.0;\n    for extension in extensions {\n  \
    \      let strength = extension.chars().filter(|&c| c.is_uppercase()).count()\
    \ as f64 - extension.chars().filter(|&c| c.is_lowercase()).count() as f64;\n \
    \       if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_extension_strength = 0.0;\n    for extension in extensions\
    \ {\n        let mut upper_case_count = 0;\n        let mut lower_case_count =\
    \ 0;\n        for c in extension.chars() {\n            if c.is_uppercase() {\n\
    \                upper_case_count += 1;\n            } else if c.is_lowercase()\
    \ {\n                lower_case_count += 1;\n            }\n        }\n      \
    \  let strength = upper_case_count as f64 - lower_case_count as f64;\n       \
    \ if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut strength = 0.0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                strength += 1.0;\n   \
    \         } else {\n                strength -= 1.0;\n            }\n        }\n\
    \        if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_extension_strength = 0.0;\n    for extension in extensions\
    \ {\n        let mut cap = 0;\n        let mut sm = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                cap += 1;\n          \
    \  } else {\n                sm += 1;\n            }\n        }\n        let strength\
    \ = cap as f64 - sm as f64;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0;\n    for extension in extensions {\n        let mut strength = 0;\n   \
    \     for c in extension.chars() {\n            if c.is_uppercase() {\n      \
    \          strength += 1;\n            } else {\n                strength -= 1;\n\
    \            }\n        }\n        if strength > strongest_strength {\n      \
    \      strongest_strength = strength;\n            strongest_extension = extension;\n\
    \        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", " \
    \   let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut upper_case_count = 0;\n        let mut lower_case_count\
    \ = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                upper_case_count += 1;\n            } else if c.is_lowercase()\
    \ {\n                lower_case_count += 1;\n            }\n        }\n      \
    \  let strength = (upper_case_count as f64) - (lower_case_count as f64);\n   \
    \     if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return format!(\"{}.{}\", class_name, strongest_extension);", "    let mut\
    \ strongest_extension = \"\".to_string();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut strength = 0.0;\n\
    \        for c in extension.chars() {\n            if c.is_uppercase() {\n   \
    \             strength += 1.0;\n            } else {\n                strength\
    \ -= 1.0;\n            }\n        }\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for ch in extension.chars() {\n            if ch.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = (cap as f64) - (sm as f64);\n\
    \        if strength > strongest_strength {\n            strongest_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_strength = 0.0;\n    for extension in\
    \ extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n        for\
    \ c in extension.chars() {\n            if c.is_uppercase() {\n              \
    \  cap += 1;\n            } else {\n                sm += 1;\n            }\n\
    \        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_strength {\n            strongest_strength = strength;\n       \
    \     strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_extension_strength = 0;\n    for extension in extensions\
    \ {\n        let mut cap = 0;\n        let mut sm = 0;\n        for character\
    \ in extension.chars() {\n            if character.is_uppercase() {\n        \
    \        cap += 1;\n            } else {\n                sm += 1;\n         \
    \   }\n        }\n        let strength = cap - sm;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    return format!(\"{}.{}\", class_name, strongest_extension);", "    let mut\
    \ strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut upper_case_count\
    \ = 0;\n        let mut lower_case_count = 0;\n        for character in extension.chars()\
    \ {\n            if character.is_uppercase() {\n                upper_case_count\
    \ += 1;\n            } else if character.is_lowercase() {\n                lower_case_count\
    \ += 1;\n            }\n        }\n        let extension_strength = upper_case_count\
    \ as f64 - lower_case_count as f64;\n        if extension_strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = extension_strength;\n        \
    \    strongest_extension = extension;\n        }\n    }\n    format!(\"{}.{}\"\
    , class_name, strongest_extension)", "    let mut strongest_extension = String::new();\n\
    \    let mut strongest_strength = 0.0;\n    for extension in extensions {\n  \
    \      let strength = extension.chars().fold((0, 0), |(cap, sm), c| {\n      \
    \      if c.is_uppercase() {\n                (cap + 1, sm)\n            } else\
    \ {\n                (cap, sm + 1)\n            }\n        });\n        if strength.0\
    \ as f64 - strength.1 as f64 > strongest_strength {\n            strongest_strength\
    \ = strength.0 as f64 - strength.1 as f64;\n            strongest_extension =\
    \ extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest_extension =\
    \ String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap - sm;\n        if strength > strongest_extension_strength\
    \ {\n            strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_extension_strength\
    \ = 0.0;\n    for extension in extensions {\n        let mut cap = 0;\n      \
    \  let mut sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut uppercase_count = 0;\n        let mut lowercase_count\
    \ = 0;\n        for character in extension.chars() {\n            if character.is_uppercase()\
    \ {\n                uppercase_count += 1;\n            } else if character.is_lowercase()\
    \ {\n                lowercase_count += 1;\n            }\n        }\n       \
    \ let strength = (uppercase_count as f64) - (lowercase_count as f64);\n      \
    \  if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut cap = 0;\n        let mut sm = 0;\n       \
    \ for c in extension.chars() {\n            if c.is_uppercase() {\n          \
    \      cap += 1;\n            } else {\n                sm += 1;\n           \
    \ }\n        }\n        let strength = cap as f64 - sm as f64;\n        if strength\
    \ > strongest_extension_strength {\n            strongest_extension_strength =\
    \ strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let strength = extension.chars().filter(|c| c.is_uppercase()).count()\
    \ as f64 - extension.chars().filter(|c| c.is_lowercase()).count() as f64;\n  \
    \      if strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0;\n    for extension\
    \ in extensions {\n        let mut strength = 0;\n        for c in extension.chars()\
    \ {\n            if c.is_uppercase() {\n                strength += 1;\n     \
    \       } else if c.is_lowercase() {\n                strength -= 1;\n       \
    \     }\n        }\n        if strength > strongest_extension_strength {\n   \
    \         strongest_extension_strength = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)",
  "    let mut strongest_extension = String::new();\n    let mut strongest_strength\
    \ = 0.0;\n    for extension in extensions {\n        let strength = extension.chars().filter(|c|\
    \ c.is_uppercase()).count() as f64 - extension.chars().filter(|c| c.is_lowercase()).count()\
    \ as f64;\n        if strength > strongest_strength {\n            strongest_strength\
    \ = strength;\n            strongest_extension = extension;\n        }\n    }\n\
    \    format!(\"{}.{}\", class_name, strongest_extension)", "    let mut strongest_extension\
    \ = String::new();\n    let mut strongest_extension_strength = 0.0;\n    for extension\
    \ in extensions {\n        let mut upper_case_count = 0;\n        let mut lower_case_count\
    \ = 0;\n        for character in extension.chars() {\n            if character.is_uppercase()\
    \ {\n                upper_case_count += 1;\n            } else if character.is_lowercase()\
    \ {\n                lower_case_count += 1;\n            }\n        }\n      \
    \  let extension_strength = (upper_case_count as f64) - (lower_case_count as f64);\n\
    \        if extension_strength > strongest_extension_strength {\n            strongest_extension_strength\
    \ = extension_strength;\n            strongest_extension = extension;\n      \
    \  }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)", "    let\
    \ mut strongest_extension = String::new();\n    let mut strongest_strength = 0.0;\n\
    \    for extension in extensions {\n        let mut cap = 0;\n        let mut\
    \ sm = 0;\n        for c in extension.chars() {\n            if c.is_uppercase()\
    \ {\n                cap += 1;\n            } else {\n                sm += 1;\n\
    \            }\n        }\n        let strength = cap as f64 - sm as f64;\n  \
    \      if strength > strongest_strength {\n            strongest_strength = strength;\n\
    \            strongest_extension = extension;\n        }\n    }\n    format!(\"\
    {}.{}\", class_name, strongest_extension)", "    let mut strongest = 0;\n    let\
    \ mut strongest_extension = String::new();\n    for extension in extensions {\n\
    \        let mut strength = 0;\n        for c in extension.chars() {\n       \
    \     if c.is_uppercase() {\n                strength += 1;\n            } else\
    \ {\n                strength -= 1;\n            }\n        }\n        if strength\
    \ > strongest {\n            strongest = strength;\n            strongest_extension\
    \ = extension;\n        }\n    }\n    format!(\"{}.{}\", class_name, strongest_extension)"]
stop_tokens:
- "\n}"
