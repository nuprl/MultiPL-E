name: HumanEval_134_check_if_last_char_is_a_letter
language: rs
prompt: "/// Create a function that returns True if the last character\n/// of a given\
  \ string is an alphabetical character and is not\n/// a part of a word, and False\
  \ otherwise.\n/// Note: \"word\" is a group of characters separated by space.\n\
  /// Examples:\n/// >>> check_if_last_char_is_a_letter(String::from(\"apple pie\"\
  ))\n/// false\n/// >>> check_if_last_char_is_a_letter(String::from(\"apple pi e\"\
  ))\n/// true\n/// >>> check_if_last_char_is_a_letter(String::from(\"apple pi e \"\
  ))\n/// false\n/// >>> check_if_last_char_is_a_letter(String::from(\"\"))\n/// false\n\
  fn check_if_last_char_is_a_letter(txt: String) -> bool {\n"
tests: "}\n\nfn main() {\n    let candidate = check_if_last_char_is_a_letter;\n  \
  \  assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  }\n"
completions: ['    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', "    let mut last_char_is_letter = false;\n    let mut last_char_is_space\
    \ = false;\n    for c in txt.chars() {\n        if c.is_alphabetic() {\n     \
    \       last_char_is_letter = true;\n            last_char_is_space = false;\n\
    \        } else if c.is_whitespace() {\n            last_char_is_space = true;\n\
    \        }\n    }\n    last_char_is_letter && !last_char_is_space", '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()']
stop_tokens:
- "\n}"
