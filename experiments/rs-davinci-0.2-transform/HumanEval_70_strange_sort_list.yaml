name: HumanEval_70_strange_sort_list
language: rs
prompt: "/// Given list of integers, return list in strange order.\n/// Strange sorting,\
  \ is when you start with the minimum value,\n/// then maximum of the remaining integers,\
  \ then minimum and so on.\n/// Examples:\n/// >>> strange_sort_list(vec![1, 2, 3,\
  \ 4])\n/// vec![1, 4, 2, 3]\n/// >>> strange_sort_list(vec![5, 5, 5, 5])\n/// vec![5,\
  \ 5, 5, 5]\n/// >>> strange_sort_list(vec![])\n/// Vec::<isize>::new()\nfn strange_sort_list(lst:\
  \ Vec<isize>) -> Vec<isize> {\n"
tests: "}\n\nfn main() {\n    let candidate = strange_sort_list;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut result = Vec::<isize>::new();\n    let mut sorted = lst.clone();\n\
    \    sorted.sort();\n    let mut min = sorted[0];\n    let mut max = sorted[sorted.len()\
    \ - 1];\n    let mut min_index = 0;\n    let mut max_index = sorted.len() - 1;\n\
    \    while min_index < max_index {\n        result.push(min);\n        result.push(max);\n\
    \        min_index += 1;\n        max_index -= 1;\n        min = sorted[min_index];\n\
    \        max = sorted[max_index];\n    }\n    if min_index == max_index {\n  \
    \      result.push(min);\n    }\n    result", "    let mut lst = lst;\n    lst.sort();\n\
    \    let mut result = Vec::new();\n    let mut i = 0;\n    let mut j = lst.len()\
    \ - 1;\n    while i <= j {\n        result.push(lst[i]);\n        i += 1;\n  \
    \      if i <= j {\n            result.push(lst[j]);\n            j -= 1;\n  \
    \      }\n    }\n    result", "    let mut lst = lst;\n    lst.sort();\n    let\
    \ mut res = Vec::new();\n    let mut i = 0;\n    let mut j = lst.len() - 1;\n\
    \    while i <= j {\n        res.push(lst[i]);\n        i += 1;\n        if i\
    \ <= j {\n            res.push(lst[j]);\n            j -= 1;\n        }\n    }\n\
    \    res", "    let mut lst = lst;\n    lst.sort();\n    let mut result = Vec::new();\n\
    \    let mut i = 0;\n    let mut j = lst.len() - 1;\n    while i <= j {\n    \
    \    result.push(lst[i]);\n        i += 1;\n        if i <= j {\n            result.push(lst[j]);\n\
    \            j -= 1;\n        }\n    }\n    result", "    let mut lst = lst;\n\
    \    lst.sort();\n    let mut res = Vec::new();\n    let mut i = 0;\n    let mut\
    \ j = lst.len() - 1;\n    while i <= j {\n        res.push(lst[i]);\n        i\
    \ += 1;\n        if i <= j {\n            res.push(lst[j]);\n            j -=\
    \ 1;\n        }\n    }\n    res", "    let mut lst = lst;\n    lst.sort();\n \
    \   let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = lst.len() -\
    \ 1;\n    while i <= j {\n        res.push(lst[i]);\n        i += 1;\n       \
    \ if i <= j {\n            res.push(lst[j]);\n            j -= 1;\n        }\n\
    \    }\n    res", "    let mut lst = lst;\n    let mut res = Vec::new();\n   \
    \ while !lst.is_empty() {\n        let min = lst.iter().min().unwrap();\n    \
    \    let max = lst.iter().max().unwrap();\n        res.push(*min);\n        res.push(*max);\n\
    \        lst.retain(|&x| x != *min && x != *max);\n    }\n    res", "    let mut\
    \ lst = lst;\n    lst.sort();\n    let mut res = Vec::new();\n    let mut i =\
    \ 0;\n    let mut j = lst.len() - 1;\n    while i <= j {\n        res.push(lst[i]);\n\
    \        i += 1;\n        if i <= j {\n            res.push(lst[j]);\n       \
    \     j -= 1;\n        }\n    }\n    res", "    let mut lst = lst;\n    lst.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = lst.len()\
    \ - 1;\n    while i <= j {\n        res.push(lst[i]);\n        i += 1;\n     \
    \   if i <= j {\n            res.push(lst[j]);\n            j -= 1;\n        }\n\
    \    }\n    res", "    let mut lst = lst;\n    let mut res = Vec::new();\n   \
    \ while !lst.is_empty() {\n        let min = lst.iter().min().unwrap();\n    \
    \    let max = lst.iter().max().unwrap();\n        res.push(*min);\n        res.push(*max);\n\
    \        lst.retain(|x| x != min && x != max);\n    }\n    res", "    let mut\
    \ lst = lst;\n    lst.sort();\n    let mut res = Vec::new();\n    let mut i =\
    \ 0;\n    let mut j = lst.len() - 1;\n    while i <= j {\n        res.push(lst[i]);\n\
    \        i += 1;\n        if i <= j {\n            res.push(lst[j]);\n       \
    \     j -= 1;\n        }\n    }\n    res", "    let mut lst = lst;\n    lst.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = lst.len()\
    \ - 1;\n    while i <= j {\n        res.push(lst[i]);\n        i += 1;\n     \
    \   if i <= j {\n            res.push(lst[j]);\n            j -= 1;\n        }\n\
    \    }\n    res", "    let mut lst = lst;\n    lst.sort();\n    let mut res =\
    \ Vec::new();\n    let mut i = 0;\n    let mut j = lst.len() - 1;\n    while i\
    \ <= j {\n        res.push(lst[i]);\n        i += 1;\n        if i <= j {\n  \
    \          res.push(lst[j]);\n            j -= 1;\n        }\n    }\n    res",
  "    let mut lst = lst;\n    lst.sort();\n    let mut res = Vec::new();\n    let\
    \ mut i = 0;\n    let mut j = lst.len() - 1;\n    while i <= j {\n        res.push(lst[i]);\n\
    \        i += 1;\n        if i <= j {\n            res.push(lst[j]);\n       \
    \     j -= 1;\n        }\n    }\n    res", "    let mut lst = lst;\n    lst.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = lst.len()\
    \ - 1;\n    while i <= j {\n        res.push(lst[i]);\n        i += 1;\n     \
    \   if i <= j {\n            res.push(lst[j]);\n            j -= 1;\n        }\n\
    \    }\n    res", "    let mut lst = lst;\n    lst.sort();\n    let mut res =\
    \ Vec::new();\n    let mut i = 0;\n    let mut j = lst.len() - 1;\n    while i\
    \ <= j {\n        res.push(lst[i]);\n        i += 1;\n        if i <= j {\n  \
    \          res.push(lst[j]);\n            j -= 1;\n        }\n    }\n    res",
  "    let mut lst = lst;\n    lst.sort();\n    let mut res = Vec::new();\n    let\
    \ mut i = 0;\n    let mut j = lst.len() - 1;\n    while i <= j {\n        res.push(lst[i]);\n\
    \        i += 1;\n        if i <= j {\n            res.push(lst[j]);\n       \
    \     j -= 1;\n        }\n    }\n    res", "    let mut lst = lst;\n    lst.sort();\n\
    \    let mut res = Vec::new();\n    let mut i = 0;\n    let mut j = lst.len()\
    \ - 1;\n    while i <= j {\n        res.push(lst[i]);\n        i += 1;\n     \
    \   if i <= j {\n            res.push(lst[j]);\n            j -= 1;\n        }\n\
    \    }\n    res", "    let mut lst = lst;\n    lst.sort();\n    let mut res =\
    \ Vec::new();\n    let mut i = 0;\n    let mut j = lst.len() - 1;\n    while i\
    \ <= j {\n        res.push(lst[i]);\n        i += 1;\n        if i <= j {\n  \
    \          res.push(lst[j]);\n            j -= 1;\n        }\n    }\n    res",
  "    let mut lst = lst;\n    lst.sort();\n    let mut result = Vec::new();\n   \
    \ let mut i = 0;\n    let mut j = lst.len() - 1;\n    while i <= j {\n       \
    \ result.push(lst[i]);\n        i += 1;\n        if i <= j {\n            result.push(lst[j]);\n\
    \            j -= 1;\n        }\n    }\n    result"]
stop_tokens:
- "\n}"
