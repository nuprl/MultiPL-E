name: HumanEval_136_largest_smallest_integers
language: rs
prompt: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
  \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
  \ in a list.\n/// If there is no negative or positive integers, return them as None.\n\
  /// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3, 5, 7])\n/// (None,\
  \ Some(1))\n/// >>> largest_smallest_integers(vec![])\n/// (None, None)\n/// >>>\
  \ largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
  \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n"
tests: "}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n}\n"
completions: ['    unimplemented!()', "    let mut largest_negative = None;\n    let\
    \ mut smallest_positive = None;\n    for i in lst {\n        if i < 0 {\n    \
    \        if largest_negative.is_none() || i > largest_negative.unwrap() {\n  \
    \              largest_negative = Some(i);\n            }\n        } else if i\
    \ > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', "    let mut largest_negative = None;\n    let mut smallest_positive\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', "    let mut largest_negative: Option<isize> = None;\n \
    \   let mut smallest_positive: Option<isize> = None;\n    for i in lst {\n   \
    \     if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', "    let mut largest_negative = None;\n    let mut smallest_positive\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', "    let\
    \ mut max_neg = None;\n    let mut min_pos = None;\n    for i in lst {\n     \
    \   if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap() {\n \
    \               max_neg = Some(i);\n            }\n        } else if i > 0 {\n\
    \            if min_pos.is_none() || i < min_pos.unwrap() {\n                min_pos\
    \ = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)", "    let\
    \ mut largest_negative = None;\n    let mut smallest_positive = None;\n    for\
    \ i in lst {\n        if i < 0 {\n            if largest_negative.is_none() ||\
    \ i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()']
stop_tokens:
- "\n}"
