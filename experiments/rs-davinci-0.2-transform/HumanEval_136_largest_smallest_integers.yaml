name: HumanEval_136_largest_smallest_integers
language: rs
prompt: "/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
  \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
  \ in a list.\n/// If there is no negative or positive integers, return them as None.\n\
  /// Examples:\n/// >>> largest_smallest_integers(vec![2, 4, 1, 3, 5, 7])\n/// (None,\
  \ Some(1))\n/// >>> largest_smallest_integers(vec![])\n/// (None, None)\n/// >>>\
  \ largest_smallest_integers(vec![0])\n/// (None, None)\nfn largest_smallest_integers(lst:\
  \ Vec<isize>) -> (Option<isize>, Option<isize>) {\n"
tests: "}\n\nfn main() {\n    let candidate = largest_smallest_integers;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n}\n"
completions: ['    unimplemented!()', "    let mut largest_negative = None;\n    let\
    \ mut smallest_positive = None;\n    for i in lst {\n        if i < 0 {\n    \
    \        if largest_negative.is_none() || i > largest_negative.unwrap() {\n  \
    \              largest_negative = Some(i);\n            }\n        } else if i\
    \ > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', "    let mut largest_negative = None;\n    let mut smallest_positive\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', "    let mut largest_negative: Option<isize> = None;\n \
    \   let mut smallest_positive: Option<isize> = None;\n    for i in lst {\n   \
    \     if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', "    let mut largest_negative = None;\n    let mut smallest_positive\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', "    let\
    \ mut max_neg = None;\n    let mut min_pos = None;\n    for i in lst {\n     \
    \   if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap() {\n \
    \               max_neg = Some(i);\n            }\n        } else if i > 0 {\n\
    \            if min_pos.is_none() || i < min_pos.unwrap() {\n                min_pos\
    \ = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)", "    let\
    \ mut largest_negative = None;\n    let mut smallest_positive = None;\n    for\
    \ i in lst {\n        if i < 0 {\n            if largest_negative.is_none() ||\
    \ i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', '    unimplemented!();', "    let mut largest_negative =\
    \ None;\n    let mut smallest_positive = None;\n    for i in lst {\n        if\
    \ i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!()', " \
    \   let mut largest_negative: Option<isize> = None;\n    let mut smallest_positive:\
    \ Option<isize> = None;\n    for i in lst {\n        if i < 0 {\n            if\
    \ largest_negative.is_none() || i > largest_negative.unwrap() {\n            \
    \    largest_negative = Some(i);\n            }\n        } else if i > 0 {\n \
    \           if smallest_positive.is_none() || i < smallest_positive.unwrap() {\n\
    \                smallest_positive = Some(i);\n            }\n        }\n    }\n\
    \    (largest_negative, smallest_positive)", "    let mut largest_negative = None;\n\
    \    let mut smallest_positive = None;\n    for i in lst {\n        if i < 0 {\n\
    \            if largest_negative.is_none() || i > largest_negative.unwrap() {\n\
    \                largest_negative = Some(i);\n            }\n        } else if\
    \ i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', "    let mut largest = None;\n    let mut smallest = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest.is_none() || i\
    \ > largest.unwrap() {\n                largest = Some(i);\n            }\n  \
    \      } else if i > 0 {\n            if smallest.is_none() || i < smallest.unwrap()\
    \ {\n                smallest = Some(i);\n            }\n        }\n    }\n  \
    \  (largest, smallest)", '    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', '    unimplemented!()', "    let mut max = None;\n    let\
    \ mut min = None;\n    for i in lst {\n        if i > 0 {\n            if let\
    \ Some(m) = min {\n                if i < m {\n                    min = Some(i);\n\
    \                }\n            } else {\n                min = Some(i);\n   \
    \         }\n        } else if i < 0 {\n            if let Some(m) = max {\n \
    \               if i > m {\n                    max = Some(i);\n             \
    \   }\n            } else {\n                max = Some(i);\n            }\n \
    \       }\n    }\n    (max, min)", '    unimplemented!()', "    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", "    let mut largest_negative:\
    \ Option<isize> = None;\n    let mut smallest_positive: Option<isize> = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', "    let mut largest_negative: Option<isize> = None;\n \
    \   let mut smallest_positive: Option<isize> = None;\n    for i in lst {\n   \
    \     if i < 0 {\n            match largest_negative {\n                None =>\
    \ largest_negative = Some(i),\n                Some(n) => {\n                \
    \    if i > n {\n                        largest_negative = Some(i);\n       \
    \             }\n                }\n            }\n        } else if i > 0 {\n\
    \            match smallest_positive {\n                None => smallest_positive\
    \ = Some(i),\n                Some(n) => {\n                    if i < n {\n \
    \                       smallest_positive = Some(i);\n                    }\n\
    \                }\n            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!();', "    let mut largest_negative =\
    \ None;\n    let mut smallest_positive = None;\n    for i in lst {\n        if\
    \ i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  "    let mut largest_negative: Option<isize> = None;\n    let mut smallest_positive:\
    \ Option<isize> = None;\n    for i in lst {\n        if i < 0 {\n            if\
    \ largest_negative.is_none() || i > largest_negative.unwrap() {\n            \
    \    largest_negative = Some(i);\n            }\n        } else if i > 0 {\n \
    \           if smallest_positive.is_none() || i < smallest_positive.unwrap() {\n\
    \                smallest_positive = Some(i);\n            }\n        }\n    }\n\
    \    (largest_negative, smallest_positive)", "    let mut largest_negative = None;\n\
    \    let mut smallest_positive = None;\n    for i in lst {\n        if i < 0 {\n\
    \            if largest_negative.is_none() || i > largest_negative.unwrap() {\n\
    \                largest_negative = Some(i);\n            }\n        } else if\
    \ i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!();', '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', "    let mut largest = None;\n \
    \   let mut smallest = None;\n    for i in lst {\n        if i > 0 {\n       \
    \     if let Some(x) = smallest {\n                if i < x {\n              \
    \      smallest = Some(i);\n                }\n            } else {\n        \
    \        smallest = Some(i);\n            }\n        } else if i < 0 {\n     \
    \       if let Some(x) = largest {\n                if i > x {\n             \
    \       largest = Some(i);\n                }\n            } else {\n        \
    \        largest = Some(i);\n            }\n        }\n    }\n    (largest, smallest)",
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut min = None;\n    let mut max = None;\n    for i in lst {\n        if\
    \ i > 0 {\n            if min.is_none() || i < min.unwrap() {\n              \
    \  min = Some(i);\n            }\n        } else if i < 0 {\n            if max.is_none()\
    \ || i > max.unwrap() {\n                max = Some(i);\n            }\n     \
    \   }\n    }\n    (max, min)", '    unimplemented!()', "    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!()', '    unimplemented!();',
  '    unimplemented!()', '    unimplemented!()', "    let mut largest_negative =\
    \ None;\n    let mut smallest_positive = None;\n    for i in lst {\n        if\
    \ i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!()', " \
    \   let mut largest = None;\n    let mut smallest = None;\n    for i in lst {\n\
    \        if i > 0 {\n            if let Some(s) = smallest {\n               \
    \ if i < s {\n                    smallest = Some(i);\n                }\n   \
    \         } else {\n                smallest = Some(i);\n            }\n     \
    \   } else if i < 0 {\n            if let Some(l) = largest {\n              \
    \  if i > l {\n                    largest = Some(i);\n                }\n   \
    \         } else {\n                largest = Some(i);\n            }\n      \
    \  }\n    }\n    (largest, smallest)", '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', "    let mut largest_negative =\
    \ None;\n    let mut smallest_positive = None;\n    for i in lst {\n        if\
    \ i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!();', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', "    let mut largest = None;\n \
    \   let mut smallest = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if largest.is_none() || i > largest.unwrap() {\n                largest\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if smallest.is_none()\
    \ || i < smallest.unwrap() {\n                smallest = Some(i);\n          \
    \  }\n        }\n    }\n    (largest, smallest)", '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', "    let mut largest_negative = None;\n    let mut smallest_positive\
    \ = None;\n    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', "    let mut largest = None;\n    let mut smallest = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest.is_none() || i\
    \ > largest.unwrap() {\n                largest = Some(i);\n            }\n  \
    \      } else if i > 0 {\n            if smallest.is_none() || i < smallest.unwrap()\
    \ {\n                smallest = Some(i);\n            }\n        }\n    }\n  \
    \  (largest, smallest)", '    unimplemented!()', "    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', "    let mut largest = None;\n \
    \   let mut smallest = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if largest.is_none() || i > largest.unwrap() {\n                largest\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if smallest.is_none()\
    \ || i < smallest.unwrap() {\n                smallest = Some(i);\n          \
    \  }\n        }\n    }\n    (largest, smallest)", "    let mut min = None;\n \
    \   let mut max = None;\n    for i in lst {\n        if i > 0 {\n            if\
    \ min.is_none() || i < min.unwrap() {\n                min = Some(i);\n      \
    \      }\n        } else if i < 0 {\n            if max.is_none() || i > max.unwrap()\
    \ {\n                max = Some(i);\n            }\n        }\n    }\n    (max,\
    \ min)", '    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', "    let\
    \ mut largest_negative = None;\n    let mut smallest_positive = None;\n    for\
    \ i in lst {\n        if i < 0 {\n            if largest_negative.is_none() ||\
    \ i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', '    unimplemented!()', "    let mut min = None;\n    let\
    \ mut max = None;\n    for i in lst {\n        if i > 0 {\n            if min.is_none()\
    \ || i < min.unwrap() {\n                min = Some(i);\n            }\n     \
    \   } else if i < 0 {\n            if max.is_none() || i > max.unwrap() {\n  \
    \              max = Some(i);\n            }\n        }\n    }\n    (max, min)",
  '    unimplemented!()', "    let mut largest_negative: Option<isize> = None;\n \
    \   let mut smallest_positive: Option<isize> = None;\n    for i in lst {\n   \
    \     if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!()', " \
    \   let mut largest_negative: Option<isize> = None;\n    let mut smallest_positive:\
    \ Option<isize> = None;\n    for i in lst {\n        if i < 0 {\n            if\
    \ largest_negative.is_none() || i > largest_negative.unwrap() {\n            \
    \    largest_negative = Some(i);\n            }\n        } else if i > 0 {\n \
    \           if smallest_positive.is_none() || i < smallest_positive.unwrap() {\n\
    \                smallest_positive = Some(i);\n            }\n        }\n    }\n\
    \    (largest_negative, smallest_positive)", '    unimplemented!()', '    unimplemented!()',
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', '    unimplemented!()', "    let mut largest_negative: Option<isize>\
    \ = None;\n    let mut smallest_positive: Option<isize> = None;\n    for i in\
    \ lst {\n        if i < 0 {\n            if largest_negative.is_none() || i >\
    \ largest_negative.unwrap() {\n                largest_negative = Some(i);\n \
    \           }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', '    unimplemented!()', "    let mut neg_max = None;\n \
    \   let mut pos_min = None;\n    for i in lst {\n        if i < 0 {\n        \
    \    neg_max = match neg_max {\n                None => Some(i),\n           \
    \     Some(n) => Some(if i > n { i } else { n }),\n            };\n        } else\
    \ if i > 0 {\n            pos_min = match pos_min {\n                None => Some(i),\n\
    \                Some(n) => Some(if i < n { i } else { n }),\n            };\n\
    \        }\n    }\n    (neg_max, pos_min)", '    unimplemented!()', "    let mut\
    \ max_neg = None;\n    let mut min_pos = None;\n    for i in lst {\n        if\
    \ i > 0 {\n            if min_pos.is_none() || i < min_pos.unwrap() {\n      \
    \          min_pos = Some(i);\n            }\n        } else if i < 0 {\n    \
    \        if max_neg.is_none() || i > max_neg.unwrap() {\n                max_neg\
    \ = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)", '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut max_neg = None;\n    let mut min_pos = None;\n    for i in lst {\n\
    \        if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap()\
    \ {\n                max_neg = Some(i);\n            }\n        } else if i >\
    \ 0 {\n            if min_pos.is_none() || i < min_pos.unwrap() {\n          \
    \      min_pos = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)",
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', "    let\
    \ mut largest_negative = None;\n    let mut smallest_positive = None;\n    for\
    \ i in lst {\n        if i < 0 {\n            if largest_negative.is_none() ||\
    \ i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  "    let mut max_neg = None;\n    let mut min_pos = None;\n    for i in lst {\n\
    \        if i < 0 {\n            if max_neg.is_none() || i > max_neg.unwrap()\
    \ {\n                max_neg = Some(i);\n            }\n        } else if i >\
    \ 0 {\n            if min_pos.is_none() || i < min_pos.unwrap() {\n          \
    \      min_pos = Some(i);\n            }\n        }\n    }\n    (max_neg, min_pos)",
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!();', '    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', '    unimplemented!()', "    let mut largest_negative =\
    \ None;\n    let mut smallest_positive = None;\n    for i in lst {\n        if\
    \ i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!()', '    unimplemented!()',
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', "    let mut max_neg = None;\n    let mut min_pos = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if max_neg.is_none() || i\
    \ > max_neg.unwrap() {\n                max_neg = Some(i);\n            }\n  \
    \      } else if i > 0 {\n            if min_pos.is_none() || i < min_pos.unwrap()\
    \ {\n                min_pos = Some(i);\n            }\n        }\n    }\n   \
    \ (max_neg, min_pos)", '    unimplemented!()', "    let mut largest_negative =\
    \ None;\n    let mut smallest_positive = None;\n    for i in lst {\n        if\
    \ i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', "    let mut largest_negative =\
    \ None;\n    let mut smallest_positive = None;\n    for i in lst {\n        if\
    \ i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", "    let mut largest = None;\n\
    \    let mut smallest = None;\n    for i in lst {\n        if i < 0 {\n      \
    \      if largest.is_none() || largest.unwrap() < i {\n                largest\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if smallest.is_none()\
    \ || smallest.unwrap() > i {\n                smallest = Some(i);\n          \
    \  }\n        }\n    }\n    (largest, smallest)", "    let mut largest_negative\
    \ = None;\n    let mut smallest_positive = None;\n    for i in lst {\n       \
    \ if i < 0 {\n            if largest_negative.is_none() || i > largest_negative.unwrap()\
    \ {\n                largest_negative = Some(i);\n            }\n        } else\
    \ if i > 0 {\n            if smallest_positive.is_none() || i < smallest_positive.unwrap()\
    \ {\n                smallest_positive = Some(i);\n            }\n        }\n\
    \    }\n    (largest_negative, smallest_positive)", '    unimplemented!()', " \
    \   let mut largest_negative = None;\n    let mut smallest_positive = None;\n\
    \    for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)",
  '    unimplemented!()', '    unimplemented!()', "    let mut largest = None;\n \
    \   let mut smallest = None;\n    for i in lst {\n        if i < 0 {\n       \
    \     if largest.is_none() || largest.unwrap() < i {\n                largest\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if smallest.is_none()\
    \ || smallest.unwrap() > i {\n                smallest = Some(i);\n          \
    \  }\n        }\n    }\n    (largest, smallest)", '    unimplemented!()', "  \
    \  let mut largest_negative: Option<isize> = None;\n    let mut smallest_positive:\
    \ Option<isize> = None;\n    for i in lst {\n        if i < 0 {\n            if\
    \ largest_negative.is_none() || i > largest_negative.unwrap() {\n            \
    \    largest_negative = Some(i);\n            }\n        } else if i > 0 {\n \
    \           if smallest_positive.is_none() || i < smallest_positive.unwrap() {\n\
    \                smallest_positive = Some(i);\n            }\n        }\n    }\n\
    \    (largest_negative, smallest_positive)", '    unimplemented!()', "    let\
    \ mut largest_neg = None;\n    let mut smallest_pos = None;\n    for i in lst\
    \ {\n        if i < 0 {\n            if largest_neg.is_none() || i > largest_neg.unwrap()\
    \ {\n                largest_neg = Some(i);\n            }\n        } else if\
    \ i > 0 {\n            if smallest_pos.is_none() || i < smallest_pos.unwrap()\
    \ {\n                smallest_pos = Some(i);\n            }\n        }\n    }\n\
    \    (largest_neg, smallest_pos)", "    let mut largest_neg = None;\n    let mut\
    \ smallest_pos = None;\n    for i in lst {\n        if i < 0 {\n            if\
    \ largest_neg.is_none() || i > largest_neg.unwrap() {\n                largest_neg\
    \ = Some(i);\n            }\n        } else if i > 0 {\n            if smallest_pos.is_none()\
    \ || i < smallest_pos.unwrap() {\n                smallest_pos = Some(i);\n  \
    \          }\n        }\n    }\n    (largest_neg, smallest_pos)", '    unimplemented!()',
  "    let mut largest = None;\n    let mut smallest = None;\n    for i in lst {\n\
    \        if i > 0 {\n            if let Some(x) = smallest {\n               \
    \ if i < x {\n                    smallest = Some(i);\n                }\n   \
    \         } else {\n                smallest = Some(i);\n            }\n     \
    \   } else if i < 0 {\n            if let Some(x) = largest {\n              \
    \  if i > x {\n                    largest = Some(i);\n                }\n   \
    \         } else {\n                largest = Some(i);\n            }\n      \
    \  }\n    }\n    (largest, smallest)", '    unimplemented!()', '    unimplemented!()',
  '    unimplemented!()', '    unimplemented!()', '    unimplemented!()', '    unimplemented!()',
  "    let mut largest_negative = None;\n    let mut smallest_positive = None;\n \
    \   for i in lst {\n        if i < 0 {\n            if largest_negative.is_none()\
    \ || i > largest_negative.unwrap() {\n                largest_negative = Some(i);\n\
    \            }\n        } else if i > 0 {\n            if smallest_positive.is_none()\
    \ || i < smallest_positive.unwrap() {\n                smallest_positive = Some(i);\n\
    \            }\n        }\n    }\n    (largest_negative, smallest_positive)"]
stop_tokens:
- "\n}"
