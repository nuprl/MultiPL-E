language: rs
name: HumanEval_59_largest_prime_factor
results:
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n > 1 {\n        if n % largest_prime == 0\
    \ {\n            n /= largest_prime;\n        } else {\n            largest_prime\
    \ += 1;\n        }\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 0;\n    let mut i = 2;\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            largest_prime = i;\n            n /= i;\n     \
    \   } else {\n            i += 1;\n        }\n    }\n    if n > largest_prime\
    \ {\n        n\n    } else {\n        largest_prime\n    }\n}\n\nfn main() {\n\
    \    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n\
    \    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330),\
    \ 11);\n    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n > largest_prime {\n        if n % largest_prime\
    \ == 0 {\n            n /= largest_prime;\n        } else {\n            largest_prime\
    \ += 1;\n        }\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 1;\n    let mut i = 2;\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            largest_prime = i;\n            n /= i;\n     \
    \   } else {\n            i += 1;\n        }\n    }\n    if n > 1 {\n        largest_prime\
    \ = n;\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n % 2 == 0 {\n        n /= 2;\n    }\n   \
    \ let mut i = 3;\n    while i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n            largest_prime = i;\n        }\n        i += 2;\n    }\n\
    \    largest_prime\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut largest_prime\
    \ = 2;\n    let mut n = n;\n    while n % 2 == 0 {\n        n /= 2;\n    }\n \
    \   let mut i = 3;\n    while i <= (n as f64).sqrt() as isize {\n        while\
    \ n % i == 0 {\n            n /= i;\n            largest_prime = i;\n        }\n\
    \        i += 2;\n    }\n    if n > 2 {\n        largest_prime = n;\n    }\n \
    \   largest_prime\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 0;\n    let mut i = 2;\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            largest_prime = i;\n            n /= i;\n     \
    \   } else {\n            i += 1;\n        }\n    }\n    if n > largest_prime\
    \ {\n        n\n    } else {\n        largest_prime\n    }\n}\n\nfn main() {\n\
    \    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n\
    \    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330),\
    \ 11);\n    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n > 1 {\n        if n % largest_prime == 0\
    \ {\n            n /= largest_prime;\n        } else {\n            largest_prime\
    \ += 1;\n        }\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n > 1 {\n        if n % largest_prime == 0\
    \ {\n            n /= largest_prime;\n        } else {\n            largest_prime\
    \ += 1;\n        }\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n > largest_prime {\n        if n % largest_prime\
    \ == 0 {\n            n /= largest_prime;\n        } else {\n            largest_prime\
    \ += 1;\n        }\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut p = 2;\n    while n > 1 {\n        if n % p == 0 {\n            n /= p;\n\
    \        } else {\n            p += 1;\n        }\n    }\n    p\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n % 2 == 0 {\n        n /= 2;\n    }\n   \
    \ let mut i = 3;\n    while i <= (n as f64).sqrt() as isize {\n        while n\
    \ % i == 0 {\n            n /= i;\n            largest_prime = i;\n        }\n\
    \        i += 2;\n    }\n    if n > 2 {\n        largest_prime = n;\n    }\n \
    \   largest_prime\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n % 2 == 0 {\n        n /= 2;\n    }\n   \
    \ let mut i = 3;\n    while i <= n {\n        while n % i == 0 {\n           \
    \ largest_prime = i;\n            n /= i;\n        }\n        i += 2;\n    }\n\
    \    largest_prime\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_factor = 2;\n    while n > 1 {\n        if n % largest_factor ==\
    \ 0 {\n            n /= largest_factor;\n        } else {\n            largest_factor\
    \ += 1;\n        }\n    }\n    largest_factor\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n > 1 {\n        if n % largest_prime == 0\
    \ {\n            n /= largest_prime;\n        } else {\n            largest_prime\
    \ += 1;\n        }\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n > 1 {\n        if n % largest_prime == 0\
    \ {\n            n /= largest_prime;\n        } else {\n            largest_prime\
    \ += 1;\n        }\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut largest_factor\
    \ = 1;\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            largest_factor = i;\n            n /= i;\n        } else {\n    \
    \        i += 1;\n        }\n    }\n    if n > 1 {\n        largest_factor = n;\n\
    \    }\n    largest_factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp1wkoo7zf.rs:12:13\n\
    \   |\n6  | fn largest_prime_factor(n: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut n`\n...\n12 |  \
    \           n /= i;\n   |             ^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n % 2 == 0 {\n        n /= 2;\n    }\n   \
    \ let mut i = 3;\n    while i <= (n as f64).sqrt() as isize {\n        while n\
    \ % i == 0 {\n            n /= i;\n            largest_prime = i;\n        }\n\
    \        i += 2;\n    }\n    if n > 2 {\n        largest_prime = n;\n    }\n \
    \   largest_prime\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n > 1 {\n        if n % largest_prime == 0\
    \ {\n            n /= largest_prime;\n        } else {\n            largest_prime\
    \ += 1;\n        }\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut largest_prime_factor\
    \ = 1;\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            largest_prime_factor = i;\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    if n > 1 {\n        largest_prime_factor\
    \ = n;\n    }\n    largest_prime_factor\n}\n\nfn main() {\n    let candidate =\
    \ largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmphhsclngn.rs:12:13\n\
    \   |\n6  | fn largest_prime_factor(n: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut n`\n...\n12 |  \
    \           n /= i;\n   |             ^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 1;\n    let mut i = 2;\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            largest_prime = i;\n            n /= i;\n     \
    \   } else {\n            i += 1;\n        }\n    }\n    if n > 1 {\n        largest_prime\
    \ = n;\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut p = 2;\n    while n % p == 0 {\n        n /= p;\n    }\n    p += 1;\n  \
    \  while n > 1 {\n        while n % p == 0 {\n            n /= p;\n        }\n\
    \        p += 2;\n    }\n    p - 2\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n % factor != 0 {\n        factor += 1;\n    }\n\
    \    n /= factor;\n    while n % factor == 0 {\n        n /= factor;\n    }\n\
    \    if n == 1 {\n        factor\n    } else {\n        largest_prime_factor(n)\n\
    \    }\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut largest_prime_factor\
    \ = 1;\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            largest_prime_factor = i;\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    if n > 1 {\n        largest_prime_factor\
    \ = n;\n    }\n    largest_prime_factor\n}\n\nfn main() {\n    let candidate =\
    \ largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmphhsclngn.rs:12:13\n\
    \   |\n6  | fn largest_prime_factor(n: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut n`\n...\n12 |  \
    \           n /= i;\n   |             ^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n > 1 {\n        if n % largest_prime == 0\
    \ {\n            n /= largest_prime;\n        } else {\n            largest_prime\
    \ += 1;\n        }\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n % 2 == 0 {\n        n /= 2;\n    }\n   \
    \ let mut i = 3;\n    while i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n            largest_prime = i;\n        }\n        i += 2;\n    }\n\
    \    largest_prime\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n > largest_prime {\n        if n % largest_prime\
    \ == 0 {\n            n /= largest_prime;\n        } else {\n            largest_prime\
    \ += 1;\n        }\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n > 1 {\n        if n % largest_prime == 0\
    \ {\n            n /= largest_prime;\n        } else {\n            largest_prime\
    \ += 1;\n        }\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n > 1 {\n        if n % largest_prime == 0\
    \ {\n            n /= largest_prime;\n        } else {\n            largest_prime\
    \ += 1;\n        }\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n > 1 {\n        if n % largest_prime == 0\
    \ {\n            n /= largest_prime;\n        } else {\n            largest_prime\
    \ += 1;\n        }\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 0;\n    let mut i = 2;\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            largest_prime = i;\n            n /= i;\n     \
    \   } else {\n            i += 1;\n        }\n    }\n    if n > largest_prime\
    \ {\n        n\n    } else {\n        largest_prime\n    }\n}\n\nfn main() {\n\
    \    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n\
    \    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330),\
    \ 11);\n    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n % 2 == 0 {\n        n /= 2;\n    }\n   \
    \ let mut i = 3;\n    while i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n            largest_prime = i;\n        }\n        i += 2;\n    }\n\
    \    largest_prime\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 0;\n    let mut i = 2;\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            largest_prime = i;\n            n /= i;\n     \
    \   } else {\n            i += 1;\n        }\n    }\n    if n > largest_prime\
    \ {\n        n\n    } else {\n        largest_prime\n    }\n}\n\nfn main() {\n\
    \    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n\
    \    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330),\
    \ 11);\n    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut prime_factors\
    \ = Vec::new();\n    let mut n = n;\n    let mut i = 2;\n    while i <= n {\n\
    \        if n % i == 0 {\n            prime_factors.push(i);\n            n /=\
    \ i;\n        } else {\n            i += 1;\n        }\n    }\n    prime_factors.pop().unwrap()\n\
    }\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n % 2 == 0 {\n        n /= 2;\n    }\n   \
    \ let mut i = 3;\n    while i <= (n as f64).sqrt() as isize {\n        while n\
    \ % i == 0 {\n            n /= i;\n            largest_prime = i;\n        }\n\
    \        i += 2;\n    }\n    if n > 2 {\n        largest_prime = n;\n    }\n \
    \   largest_prime\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut largest_prime\
    \ = 1;\n    let mut n = n;\n    let mut i = 2;\n    while i <= n {\n        if\
    \ n % i == 0 {\n            largest_prime = i;\n            n /= i;\n        }\
    \ else {\n            i += 1;\n        }\n    }\n    largest_prime\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n % 2 == 0 {\n        n /= 2;\n    }\n   \
    \ let mut i = 3;\n    while i <= (n as f64).sqrt() as isize {\n        while n\
    \ % i == 0 {\n            n /= i;\n            largest_prime = i;\n        }\n\
    \        i += 2;\n    }\n    if n > 2 {\n        largest_prime = n;\n    }\n \
    \   largest_prime\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut largest_prime\
    \ = 1;\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            largest_prime = i;\n            n /= i;\n        } else {\n     \
    \       i += 1;\n        }\n    }\n    if n > largest_prime {\n        n\n   \
    \ } else {\n        largest_prime\n    }\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpl63kmrr5.rs:12:13\n\
    \   |\n6  | fn largest_prime_factor(n: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut n`\n...\n12 |  \
    \           n /= i;\n   |             ^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 1;\n    let mut i = 2;\n    while i * i <= n {\n       \
    \ if n % i == 0 {\n            largest_prime = i;\n            n /= i;\n     \
    \   } else {\n            i += 1;\n        }\n    }\n    if n > 1 {\n        largest_prime\
    \ = n;\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n % 2 == 0 {\n        n /= 2;\n    }\n   \
    \ let mut i = 3;\n    while i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n            largest_prime = i;\n        }\n        i += 2;\n    }\n\
    \    largest_prime\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n > 1 {\n        if n % largest_prime == 0\
    \ {\n            n /= largest_prime;\n        } else {\n            largest_prime\
    \ += 1;\n        }\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n % 2 == 0 {\n        n /= 2;\n    }\n   \
    \ let mut i = 3;\n    while i <= (n as f64).sqrt() as isize {\n        while n\
    \ % i == 0 {\n            n /= i;\n            largest_prime = i;\n        }\n\
    \        i += 2;\n    }\n    if n > 2 {\n        largest_prime = n;\n    }\n \
    \   largest_prime\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut prime = 2;\n    while n > 1 {\n        if n % prime == 0 {\n           \
    \ n /= prime;\n        } else {\n            prime += 1;\n        }\n    }\n \
    \   prime\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n % 2 == 0 {\n        n /= 2;\n    }\n   \
    \ let mut i = 3;\n    while i <= (n as f64).sqrt() as isize {\n        while n\
    \ % i == 0 {\n            n /= i;\n            largest_prime = i;\n        }\n\
    \        i += 2;\n    }\n    if n > 2 {\n        largest_prime = n;\n    }\n \
    \   largest_prime\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n\
    \    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut p = 2;\n    while n > 1 {\n        if n % p == 0 {\n            n /= p;\n\
    \        } else {\n            p += 1;\n        }\n    }\n    p\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut p = 2;\n    while n > 1 {\n        if n % p == 0 {\n            n /= p;\n\
    \        } else {\n            p += 1;\n        }\n    }\n    p\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 1
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut largest_prime_factor\
    \ = 1;\n    let mut i = 2;\n    while i * i <= n {\n        if n % i == 0 {\n\
    \            largest_prime_factor = i;\n            n /= i;\n        } else {\n\
    \            i += 1;\n        }\n    }\n    if n > 1 {\n        largest_prime_factor\
    \ = n;\n    }\n    largest_prime_factor\n}\n\nfn main() {\n    let candidate =\
    \ largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmphhsclngn.rs:12:13\n\
    \   |\n6  | fn largest_prime_factor(n: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut n`\n...\n12 |  \
    \           n /= i;\n   |             ^^^^^^ cannot assign to immutable argument\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_factor = 1;\n    let mut factor = 2;\n    while n > 1 {\n      \
    \  while n % factor == 0 {\n            largest_factor = factor;\n           \
    \ n /= factor;\n        }\n        factor += 1;\n    }\n    largest_factor\n}\n\
    \nfn main() {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut largest_prime = 2;\n    while n > 1 {\n        if n % largest_prime == 0\
    \ {\n            n /= largest_prime;\n        } else {\n            largest_prime\
    \ += 1;\n        }\n    }\n    largest_prime\n}\n\nfn main() {\n    let candidate\
    \ = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 101
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut i = 2;\n    while i * i <= n {\n        while n % i == 0 {\n           \
    \ n /= i;\n        }\n        i += 1;\n    }\n    n\n}\n\nfn main() {\n    let\
    \ candidate = largest_prime_factor;\n    assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27),\
    \ 3);\n    assert_eq!(candidate(63), 7);\n    assert_eq!(candidate(330), 11);\n\
    \    assert_eq!(candidate(13195), 29);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `3`', /tmp/tmpbhyqu25_.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut n = n;\n    let\
    \ mut factor = 2;\n    while n > 1 {\n        if n % factor == 0 {\n         \
    \   n /= factor;\n        } else {\n            factor += 1;\n        }\n    }\n\
    \    factor\n}\n\nfn main() {\n    let candidate = largest_prime_factor;\n   \
    \ assert_eq!(candidate(15), 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63),\
    \ 7);\n    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
- exit_code: 0
  program: "/// Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
    /// >>> largest_prime_factor(13195)\n/// 29\n/// >>> largest_prime_factor(2048)\n\
    /// 2\nfn largest_prime_factor(n: isize) -> isize {\n    let mut largest_prime_factor\
    \ = 1;\n    let mut n = n;\n    let mut i = 2;\n    while i * i <= n {\n     \
    \   if n % i == 0 {\n            largest_prime_factor = i;\n            n /= i;\n\
    \        } else {\n            i += 1;\n        }\n    }\n    if n > 1 {\n   \
    \     largest_prime_factor = n;\n    }\n    largest_prime_factor\n}\n\nfn main()\
    \ {\n    let candidate = largest_prime_factor;\n    assert_eq!(candidate(15),\
    \ 5);\n    assert_eq!(candidate(27), 3);\n    assert_eq!(candidate(63), 7);\n\
    \    assert_eq!(candidate(330), 11);\n    assert_eq!(candidate(13195), 29);\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660012007
