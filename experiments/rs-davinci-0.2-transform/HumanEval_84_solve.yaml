name: HumanEval_84_solve
language: rs
prompt: "/// Given a positive integer N, return the total sum of its digits in binary.\n\
  /// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>> solve(150)\n\
  /// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"1100\")\n/// Variables:\n\
  /// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n/// Output:\n/// a string\
  \ of binary number\nfn solve(N: isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ['    format!("{:b}", N).chars().map(|d| d.to_digit(10).unwrap()).sum::<u32>().to_string()',
  '    format!("{:b}", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()',
  "    let mut N = N;\n    let mut result = String::new();\n    while N > 0 {\n  \
    \      result.push_str(&(N % 2).to_string());\n        N /= 2;\n    }\n    result.chars().rev().collect()",
  '    format!("{:b}", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().iter().fold(String::from(""),
    |acc, x| acc + x)', '    format!("{:b}", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()',
  "    let mut result = String::new();\n    let mut n = N;\n    while n > 0 {\n  \
    \      result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
  '    format!("{:b}", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().iter().map(|x|
    x.parse::<isize>().unwrap()).sum::<isize>().to_string()', '    format!("{:b}",
    N).chars().map(|x| x.to_string()).collect::<Vec<String>>().join("")', '    format!("{:b}",
    N).chars().map(|x| x.to_string()).collect::<Vec<String>>().join("")', '    format!("{:b}",
    N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()', '    format!("{:b}",
    N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()', '    format!("{:b}",
    N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()', '    format!("{:b}",
    N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()', '    format!("{:b}",
    N).chars().map(|x| x.to_string()).collect::<Vec<String>>().iter().map(|x| x.parse::<isize>().unwrap()).sum::<isize>().to_string()',
  '    format!("{:b}", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().join("")',
  '    format!("{:b}", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()',
  "    let mut n = N;\n    let mut result = String::new();\n    while n > 0 {\n  \
    \      result.push_str(&(n % 2).to_string());\n        n /= 2;\n    }\n    result.chars().rev().collect()",
  '    format!("{:b}", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().join("")',
  '    format!("{:b}", N).chars().map(|c| c.to_digit(10).unwrap()).sum::<u32>().to_string()',
  '    format!("{:b}", N).chars().map(|x| x.to_string()).collect::<Vec<String>>().join("")']
stop_tokens:
- "\n}"
