name: HumanEval_2_truncate_number
language: rs
prompt: "/// Given a positive floating point number, it can be decomposed into\n///\
  \ and integer part (largest integer smaller than given number) and decimals\n///\
  \ (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n\
  /// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n"
tests: "}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  }\n"
completions: ['    number - number.floor()', '    number - number.floor()', '    number.fract()',
  "    let integer_part = number.floor();\n    number - integer_part", '    number
    - number.floor()', '    number - number.floor()', '    number - number.floor()',
  "    let integer_part = number.floor();\n    number - integer_part", '    number
    - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', "    if number < 0.0\
    \ {\n        return -(number - number.floor());\n    }\n    number - number.floor()",
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', "    let integer_part = number.floor();\n    number\
    \ - integer_part", '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number.fract()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number.fract()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', "    let integer_part\
    \ = number.floor();\n    number - integer_part", '    number.fract()', '    number
    - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number.fract()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number.fract()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number.fract()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number.fract()',
  '    number - number.floor()', '    number - number.floor()', '    number.fract()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number.fract()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number.fract()',
  "    let integer_part = number.floor();\n    number - integer_part", '    number
    - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number.fract()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', "    let integer_part = number.floor();\n    number\
    \ - integer_part", "    let mut number = number;\n    let mut integer_part = 0;\n\
    \    while number >= 1.0 {\n        number -= 1.0;\n        integer_part += 1;\n\
    \    }\n    number", '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number.fract()', "    let integer_part = number.floor();\n\
    \    number - integer_part", '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number.fract()', '    number - number.floor()', '    number - number.floor()',
  '    number.fract()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number.fract()', '    number - number.floor()', '    number - number.floor()',
  '    number.fract()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', "    if number < 0.0\
    \ {\n        return -truncate_number(-number);\n    }\n    let integer_part =\
    \ number.floor();\n    number - integer_part", '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number.fract()', '    number - number.floor()',
  '    number - number.floor()']
stop_tokens:
- "\n}"
