name: HumanEval_2_truncate_number
language: rs
prompt: "/// Given a positive floating point number, it can be decomposed into\n///\
  \ and integer part (largest integer smaller than given number) and decimals\n///\
  \ (leftover part always smaller than 1).\n/// Return the decimal part of the number.\n\
  /// >>> truncate_number(3.5)\n/// 0.5\nfn truncate_number(number: f64) -> f64 {\n"
tests: "}\n\nfn main() {\n    let candidate = truncate_number;\n    assert_eq!(candidate(3.5),\
  \ 0.5);\n    assert_eq!(candidate(1.25), 0.25);\n    assert_eq!(candidate(123.0),\
  \ 0.0);\n}\n"
completions: ['    number - number.floor()', '    number - number.floor()', '    number
    - number.floor()', '    number - number.floor()', '    number.fract()', '    number
    - number.floor()', "    let integer_part = number.floor();\n    number - integer_part",
  '    number - number.floor()', '    number - number.floor()', "    let integer_part\
    \ = number.floor();\n    number - integer_part", '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number.fract()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number.fract()', "    let integer_part = number.floor();\n\
    \    number - integer_part", '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number.fract()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number.fract()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', "    if number < 0.0\
    \ {\n        panic!(\"Number must be positive.\");\n    }\n\n    let int_part\
    \ = number.trunc();\n    number - int_part", '    number - number.floor()', '    number
    - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number.fract()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number.fract()',
  '    number.fract()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', "    let int_part = number.floor();\n    number -\
    \ int_part", '    number - number.floor()', '    number - number.floor()', " \
    \   let int_part = number.floor();\n    number - int_part", '    number - number.floor()',
  "    let integer_part = number.floor();\n    number - integer_part", '    number
    - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', "    let int_part\
    \ = number.floor();\n    number - int_part", '    number - number.floor()', '    number
    - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  "    let integer_part = number.floor();\n    number - integer_part", '    number
    - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number.fract()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number.fract()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number.fract()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', "    let integer_part\
    \ = number.floor();\n    number - integer_part", '    number.fract()', '    number
    - number.floor()', '    number - number.floor()', '    number - number.floor()',
  "    let integer_part = number.floor();\n    number - integer_part", '    number
    - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number.fract()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  "    let integer_part = number.floor();\n    number - integer_part", '    number
    - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number.fract()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number.fract()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  "    let integer_part = number.floor();\n    number - integer_part", "    let integer_part\
    \ = number.floor();\n    number - integer_part", '    number - number.floor()',
  '    number - number.floor()', "    let integer_part = number.floor();\n    number\
    \ - integer_part", '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', "    let integer_part = number.floor();\n    number\
    \ - integer_part", '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number.fract()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', '    number - number.floor()',
  '    number - number.floor()', '    number - number.floor()', "    let integer_part\
    \ = number.floor();\n    number - integer_part", '    number.fract()']
stop_tokens:
- "\n}"
