name: HumanEval_131_digits
language: rs
prompt: "/// Given a positive integer n, return the product of the odd digits.\n///\
  \ Return 0 if all digits are even.\n/// For example:\n/// >>> digits(1)\n/// 1\n\
  /// >>> digits(4)\n/// 0\n/// >>> digits(235)\n/// 15\nfn digits(n: isize) -> isize\
  \ {\n"
tests: "}\n\nfn main() {\n    let candidate = digits;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n  \
    \      let digit = n % 10;\n        if digit % 2 == 1 {\n            result *=\
    \ digit;\n        }\n        n /= 10;\n    }\n    result", "    let mut n = n;\n\
    \    let mut result = 1;\n    while n > 0 {\n        let digit = n % 10;\n   \
    \     if digit % 2 == 1 {\n            result *= digit;\n        }\n        n\
    \ /= 10;\n    }\n    result", "    let mut product = 1;\n    let mut n = n;\n\
    \    while n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n\
    \            product *= digit;\n        }\n        n /= 10;\n    }\n    product",
  "    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit\
    \ = n % 10;\n        if digit % 2 == 1 {\n            product *= digit;\n    \
    \    }\n        n /= 10;\n    }\n    product", "    let mut product = 1;\n   \
    \ let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        if digit\
    \ % 2 == 1 {\n            product *= digit;\n        }\n        n /= 10;\n   \
    \ }\n    product", "    let mut product = 1;\n    let mut n = n;\n    while n\
    \ > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n          \
    \  product *= digit;\n        }\n        n /= 10;\n    }\n    product", "    let\
    \ mut n = n;\n    let mut result = 1;\n    while n > 0 {\n        let digit =\
    \ n % 10;\n        if digit % 2 == 1 {\n            result *= digit;\n       \
    \ }\n        n /= 10;\n    }\n    result", "    let mut n = n;\n    let mut product\
    \ = 1;\n    while n > 0 {\n        let digit = n % 10;\n        if digit % 2 ==\
    \ 1 {\n            product *= digit;\n        }\n        n /= 10;\n    }\n   \
    \ product", "    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n\
    \        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product", "    let mut n\
    \ = n;\n    let mut result = 1;\n    while n > 0 {\n        let digit = n % 10;\n\
    \        if digit % 2 == 1 {\n            result *= digit;\n        }\n      \
    \  n /= 10;\n    }\n    result", "    let mut n = n;\n    let mut result = 1;\n\
    \    while n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n\
    \            result *= digit;\n        }\n        n /= 10;\n    }\n    result",
  "    let mut product = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit\
    \ = n % 10;\n        if digit % 2 == 1 {\n            product *= digit;\n    \
    \    }\n        n /= 10;\n    }\n    product", "    let mut product = 1;\n   \
    \ let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n        if digit\
    \ % 2 == 1 {\n            product *= digit;\n        }\n        n /= 10;\n   \
    \ }\n    product", "    let mut result = 1;\n    let mut n = n;\n    while n >\
    \ 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n            result\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    result", "    let mut product\
    \ = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n \
    \       if digit % 2 == 1 {\n            product *= digit;\n        }\n      \
    \  n /= 10;\n    }\n    product", "    let mut product = 1;\n    let mut num =\
    \ n;\n    while num > 0 {\n        let digit = num % 10;\n        if digit % 2\
    \ == 1 {\n            product *= digit;\n        }\n        num /= 10;\n    }\n\
    \    product", "    let mut n = n;\n    let mut product = 1;\n    while n > 0\
    \ {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n            product\
    \ *= digit;\n        }\n        n /= 10;\n    }\n    product", "    let mut product\
    \ = 1;\n    let mut n = n;\n    while n > 0 {\n        let digit = n % 10;\n \
    \       if digit % 2 == 1 {\n            product *= digit;\n        }\n      \
    \  n /= 10;\n    }\n    product", "    let mut result = 1;\n    let mut n = n;\n\
    \    while n > 0 {\n        let digit = n % 10;\n        if digit % 2 == 1 {\n\
    \            result *= digit;\n        }\n        n /= 10;\n    }\n    result",
  "    let mut n = n;\n    let mut result = 1;\n    while n > 0 {\n        let digit\
    \ = n % 10;\n        if digit % 2 == 1 {\n            result *= digit;\n     \
    \   }\n        n /= 10;\n    }\n    result"]
stop_tokens:
- "\n}"
